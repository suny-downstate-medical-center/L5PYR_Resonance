* [2020-3-7 Sat] - abstract draft
**
Pyramidal neurons in neocortex have complex input-output relationships that depend on their morhpologies, active and
passive channel distributions, and the nature of their inputs, and which cannot be replicated by their simple 
integrate-and-fire analogs. Measures of the complex impedance response across neurons' dendritic arbors, such as 
resonance and the phase response, can provide intraneuronal functional maps reflecting their intrinsic dynamics and excitability. 
Experimental studies of dendritic impedance show that pyramidal neurons in hippocampal CA1 and neocrotex exhibit distance-dependent
relationships for the resonance and the phase responses with respect to the soma. We present a detailed study of
the complex impedance profiles of biophysically detailed models of neocortical layer 5 pyramidal neurons from 
across neocortex.  While none of these models were designed to fit the impedance response directly, two closely 
recapitulate the distance-dependent relationships of the complex impedance response. The  impedance response is also
dynamically tunable via the activity-dependent expression of voltage-gated ion channels in the dendrites, like HCN channels
and M- and A-type K+ channels. We investigated the roles of different voltage-gated ion channels in tuning the impedance response,
showing that changes in HCN and M-type K+ channel conductances, both locally and across the dendritic arbor, can modulate the
impedance response, producing a wide range of profiles.  We also clearly demonstrate the impedance profile's dependence on cell
morphology.  Although a number of cell models exhibit impedance profiles that diverge from the experimental data, some have 
biologically plausible impedance profiles which may reflect regional variation or cells with different histories and therefore
differently tuned impedance responses. Given the dearth of experimental data on resonance in neocortical pyrmaidal neurons 
from different cortical regions, we hypothesize that neocortical pyramidal neurons have more diverse impedance profiles 
than previously assumed.

* [2020-3-10 Tue] - Introduction outline (cont to [2020-3-13 Fri])
** Neocortical pyramidal neurons
*** Main oupuuts of neocortex 
**** something about I/O relationship
*** Diversity:  
**** Naka2016-rn
"Before surveying the existent literature on layer 5 (L5) inhibitory neurons, we briefly review current
knowledge on the connectivity and physiological properties of L5 pyramidal cells (PCs), as it
provides important context for understanding L5 inhibitory circuits. One feature that distinguishes
L5 from other cortical layers is the diversity of its PCs, which send a myriad of long-range
projections to other cortical and sub-cortical structures (Levesque1996-hf, Veinante2000-gg,
Hattox2007-km, Aronoff2010-do, Harris2015-te). This simple anatomical fact establishes L5 as a primary 
cortical layer involved in the top-down control of other brain areas. Exactly how L5 circuits parse information to 
influence downstream circuits and control behavior is one of the central questions in neuroscience. Even though L5 is
conventionally thought of as primarily an output layer, L5 PCs also receive direct thalamocortical input (Agmon1992-mi,
Meyer2010-pe, Wimmer2010-lq, Oberlaender2012-fh, Rah2013-kr) and can be driven by thalamic activity alone (Constantinople2013-bq), 
suggesting that L5 is an important input layer as well. L5 PCs also receive input from all cortical layers and
are thus uniquely positioned to integrate nearly every local and afferent pathway in the cortex
(Markram2015-zg). Without exception, signals transmitted via these pathways invoke a mixture
of synaptic excitation and inhibition (reviewed in Isaacson2011-qs). Thus inhibition
onto L5 PCs, the focus of this review, is crucial for nearly every aspect of L5 function."
*** Active conductances
**** One of the main distinguishing factors between PT and IT neurons is the greater expression of 
voltage-gated ion channels, like HCN. Oswald2013-lh
**** "In responseto dynamic stimuli,  COM neurons act as low-pass filters, whereas CPn neurons act 
as bandpass filters, resonating in the theta frequency range (3– 6Hz)." Dembrow2010-lb
**** mediate coincidence detection Das2015-mh, Dewell2019-ra
**** Ih has also been shown to "interact with somato-dendritic structure to determine frequency response to
weak alternating electric field stimulation" Toloza2018-vh
****  "the inhibitory action of Ih was caused by its interaction with the delayed-rectifier M-type K1 current. In this manner, Ih can
enhance spike firing in response to an EPSP when spike threshold is low and can inhibit firing when spike threshold is high." George2009-ad
***** check w/ salva/joao - pretty sure this is the paper proposing that Ih modulation determines planning versus action 

** Impedance as comprehensive tool for studying subthreshold dynamics
*** As mentioned above, PT cells act as bandpass filters as characterized by their impedance profiles.
*** some  background on impedance Puil1986-uv, Jaffe1999-pb: 
**** complex function (resistance and reactance) from which can calculate the amplitude and phase 
**** input vs transfer
**** resonance - peak |Z| at some frequency - driven by inductive reactance imparted by voltage-gated ion channels like HCN, M-type K+, and K-type K+ channels
**** resonance strength (Q-factor as in Dewell2019-ra)
**** transfer frequency - resonance frequency of the transfer impedance amplitude 
**** leading phase response - changes in V preceed changes in I, driven by the balance of capacitive and inductive reactances
**** synchronous frequency - frequency at which V and I are synchronous

*** importance of impedance
**** resonance:  "Apart from invertebrate giant axons from where initial evidence came, direct evidence for the presence of electrical resonance
also came from experiments on numerous neuronal subtypes of the central and peripheral nervous system (Crawford1981-av, Puil1988-ca,
Hutcheon2000-gs, Pike et al., 2000). Subthreshold resonance in local responses and in dendrite-to-soma transfer endows neurons with the ability to
discriminate inputs based upon their frequency content."
**** phase response: "the impedance phase profile quantifies the temporal dynamics between voltage and current. It has been shown that presence
of inductive reactance in neuronal membrane causes the voltage response to lead the injected oscillatory current. The balance between capacitive and
inductive reactances determines both the optimal lead frequency and the frequency bandwidth over which the voltage leads the current, providing a
potential mechanism by which the subthreshold membrane dynamics of the neuron may maintain a phase relationship with an ongoing oscillation
(Mauro1961-ys, Cole, 1968, Sabah1969-at, Mauro1970-km, Hu2002-ga, Hu2009-qb, Ulrich2002-dd, Cook2007-cz, Narayanan2008-zw,
Vaidya2013-sx)." Das2017-nz
**** relation between subthreshold resonance and suprathreshold resonance via STA Das2015-mh
*** By determining these factors across the dendritic arbor, we can produce intraneuronal functional maps characterizing
the neuron's intrinsic dynamics and excitability Narayanan2012-hn 

** Experimental evidence of location dependence 
*** relationships between aspects of the complex impedance and distance from the soma have been described in pyramidal neurons from CA1 and neocortex
Das2017-nz, Narayanan2007-gw, Ulrich2002-dd, Dembrow2015-zb
**** first observed in PT neurons from somatosensory cortex.  Saw roughly linear relationships between distance and transfer impedance amplitude with
strength increasing with distance from the soma. Ulrich2002-dd
**** Dembrow et al additionally saw distance-dependence in the resoance frequency and phase response Dembrow2015-zb
**** in both above studies resonance and synchronous frequencies were found in the theta range (3-10 Hz), but also sampled a fairly small fraction of the 
dendritic arbor (120-280 um and 200-600 um respectively)

** dynamic tunability and degeneracy impedance profile
*** Tunability
**** dynamically tunable subthreshold resonance along the neuronal topograph (Magee2005-oq, Narayanan2007-gw, Narayanan2008-zw, Sjostrom2008-sz, 
Hu2009-qb, Rathour2012-am, Rathour2012-bu) Das2017-nz
**** LTP induces changes in impedance profile Narayanan2007-gw
*** Degeneracy:
**** "With reference to sub- and supra-threshold frequency selectivity in neurons, several studies have demonstrated multi-channel regulation
of somatodendritic spectral selectivity. Specifically, studies pertaining to sub-threshold resonance and phase dynamics have shown that impedance properties 
mediated by HCN channel could be significantly modulated by the presenc eof other sub-threshold conductances and by morphological characteristics 
(Hutcheon2000-gs, Hu2002-ga, 2009, Narayanan2008-zw, Zemankovics2010-zt, Rathour2012-bu, Dhupia2014-ad, Rathour2016-vv). While these studies
elucidated the role of individual conductances in modulating sub-threshold impedance properties, computational
frameworks have provided direct lines of evidence for degeneracy (Figures 2B,C) in active dendritic spectral tuning (Rathour2012-bu, Rathour2014-pl)." Das2017-nz
***** mainly studied in hippocampal neurons
*** role in disease: Ih altered in temporal lobe epilepsy Shin2008-za, Marcelin2009-vy

* [2020-3-12 Thu] 
** fairly satisfied w/ intro outline
** going with frontiers in neuroscience as target journal (in part becasue formatting is easy)

* [2020-3-13 Fri] - further along with intro
** may want to consolidate explanation and importance of impedance while separating amplitude/resonance and phase

* [2020-3-14 Sat] - finished with draft of intro, methods outline  (con't to [2020-3-16 Mon])
** General stuff:
*** All models have perviously been published and are freely available on modelDB
*** Simulations were performed using NEURON in Python Hines2009-qx
*** Code for simulation, analysis, and visualization was written in Python and MATLAB (Natick, Ma) and is available on GitHub (https://github.com/suny-downstate-medical-center/L5PYR_Resonance)

** Focus on 5  models
*** Kole2008-aj
**** Wistar rats, 2-4 weeks old, somatosensory cortex
**** channels densities were adjusted primarily to account for perisomatic spiking actiivity:
"The model included a high-voltage-activated K+ channel (Kv)16, a faster
low-voltage activated Kv1-like K+ channel (‘Kv1’), as described49, and a slowly-activating and non-inactivating M-type K+ channel (‘Km’)16. Potassium
channel densities were adjusted to obtain fast action potential repolarization
and large amplitude afterhyperpolarizations in the distal AIS13. The density of
Kv, Kv1 and Km were set to 20, 100 and 5 pS mm–2, respectively, in the soma,
dendrites and inter-nodal sections, and increased linearly with distance from
the axon hillock in the AIS to 2,000 pS mm–2 in the distal AIS and nodes for
Kv and Kv1, and to 50 pS mm–2 for Km. The K+ reversal potential was set
to –85 mV. Ih channels were included in the soma and dendrites with an
exponential increase in density with distance from the soma, and kinetics and
voltage dependence as described previously50." 50: Kole2006-bm
*** Acker2009-yj
**** Sprague–Dawley rats (postnatal day 21 [P21] to P33), frontal cortex
**** fit using voltage-sensitive dye imaging focusing on back-propagating APs in basal dendrites 
"The model was fit to experimental data using the
following approach: AP waveforms from simulations were analyzed
and amplitude data were averaged over the basal dendrites (Fig. 6B).
Half-widths and latencies were calculated in exactly the same way as
with the optical AP waveforms (Supplemental Fig. S5) and were
averaged over the model basal dendrites. The model data averaged
over the basal dendrites were taken as the fit data. AP amplitude ratios
TTX/Control and AP amplitude ratios 4-AP/Control were used to fit
the model.
**** channel distributions
. . . Basal dendritic sodium and A-type potassium conductance
distributions were assumed linear and were systematically varied over
a wide range over a four-dimensional parameter space to determine
the best-fit values of these model parameters (Supplemental Fig. S7).
Other parameters, such as delayed rectifier potassium conductance,
leak conductance, and somatic conductances, were manually varied to
find the lowest possible overall model fit. This was done by first
determining the sensitivities of AP amplitudes, half-widths, and latencies
 to each model parameter and using this information to modify
parameters and improve fits before finally fitting the basal sodium and
A-type potassium distributions. An automated optimization approach
based on a genetic algorithm (Keren et al. 2005), if feasible, would
allow a larger parameter space to be searched exhaustively and could
potentially lead to improved overall fits, something that could be
pursued in future studies."
*** Hay2011-if
**** P36 Wistar rat 
**** model fit to perisomatic and backpropagating spiking
**** channel distributions:
"Dendritic channel distribution. All dendritic channels
except for Ih, CaLVA and CaHVA were uniformly distributed. Ihchannels were distributed on the apical dendrites using an
exponential density function suggested in [13]: gsoma: ð{0:8696z 2:087: e x
323Þ, where x is the distance from the soma in mm, with gsoma = 1 pS/mm2 .
The density of Ih on the basal dendrites was set to be uniform as suggested in [10]."
10: Nevian2007-gw  13: Kole2006-bm
*** Neymotin2017-dr
**** might leave out or stick in supplements, both because mice and wonky
**** Mice (strain: C57Bl/6J; Jackson Laboratories) postnatal day (P) 21,
**** channel distributions:
Somatic and dendritic compartments
additionally contained CaL, CaN, BK, and HCN channels. KD was
present in the soma and at 20 times somatic density in the axon. The
axon contained only leak, Na, KA, Kdr, and KD ion channels. Basal
dendrites contained uniform density of all their channels. Apical
dendrite HCN channel density increased exponentially with distance
from soma until reaching the nexus with apical dendrite tufts, where
the HCN channel density plateaus at 0.00565 S/cm2 (Harnett et al.
2015). This exponential increase of HCN channel density within the
main apical trunk was set to gh·exp(d/h), where d is distance of the
apical dendrite compartment from soma and h is the length constant,
defined as dnexus/log(0.00565/gh), dnexus is distance from soma to
nexus (300 m), and gh is somatic HCN channel density. Harnett2015-sj
**** fitting was mostly focused on preisomatic spiking activity:
. Focusing on spike times, we also
provided some fitness function redundancy by using both
overall spiking rate (F–I), along with spike timing [instantaneous firing rate (IFR)]. The degree of redundancy of these two
measures was demonstrated in the final archive (Fig. 2, A and
C). We included subthreshold fit, determined initially by
PRAXIS, as an EMO fitness function as well so as not to lose
fitness for this criterion while optimizing for the others.
*** allen institute cell(s) Reimann2013-mg, Shai2015-ff, Markram2015-zg
**** based on data from primary visual cortex (V1) of C57BL/6 mice, P35-62
**** Modified version of an earlier model \citep{Hay2011-if}
**** major change to the original:"We change the Ih conductance to be constant in the dendritic tree, instead of exponentially increasing as a function of distance from
the soma, to fit the subthreshold data. The change to Ih conductance accounted for the differences between dendritic sag, dendritic resting membrane potential relative 
to the soma, and dendritic input resistance in our experiments compared to those in rat L5 somatosensory cortex."


** simulations 
*** Impedance Profiles:
****Each dendritic segment was stimulated with a subthreshold chirp-waveform current injection, and membrane potential was recorded
from the site of stimulation and at the soma.
***** For generating impednace profiles, the chirp-waveform instantaneous frequency changed linearly spanned 0.5-50 Hz over 50s.
***** For investigating bimodal phase response, the chirp-waveform spanned 0.5-100 Hz over 100s.
***** in experiments, typically 0.5-20 Hz (citations)
**** We computed Z$_{in}$ and Z$_c$ and associated measures from each of the recorded waveforms via \emph{Eq. 1-3}.
***** focused on six measures of the impedance response: 1) $|$Z$_{in}|$ resonance amplitude, 2) $|$Z$_{in}|$ resonance frequency,
3) $|$Z$_{in}|$ Q-factor, 4) $|$Z$_{c}|$ transfer frequency, 5) $\Phi_{in}$ leading phase bandwidth, and 6) $\Phi_{in}$ synchronous frequency. 
*** Influence of morphology
**** same parameters as above, used biophysics template and three morphologies from Hay2011-if
*** Ih and Im 
**** used cell model from Kole2008-aj, only one that had Ih and Im distributed throughout the dendritic arbor.
**** varied Ih and Im conductance in 5* increments up to +/- 20* either at the branch level or across the whole dendritic arbor 


* [2020-3-15 Sun] - bimodal phase response
** L5PCtemplate[0].apic[91].mat 
* [2020-3-16 Mon] - methods con't, added in sam's cell, going to add in allen institute
* [2020-3-17 Tue]
** bimodal phase response, a couple OK examples, not sure if it warrants figure / mentioning
* [2020-3-19 Thu] - working on putting figures together properly
* [2020-3-20 Fri] - finished up figures
** allen exmaple 1: 497233139, 2: 497232419
* [2020-3-21 Sat] 
** table of basic model info
* [2020-3-23 Mon] - methods done, on with results
** done with results text, still need to do figure captions
* [2020-4-6 Mon] - moved and cleaned up paper
** moved paper to overleaf, removed paper code from this repo - now just code and these notes.
*** 'moved paper to overleaf, removed paper code from this repo - now just code and notes'

* [2020-4-10 Fri] - discussion notes
** add to intro: Additionally, HCN plays an important role in
regulating neuronal excitability by setting resting membrane
potential (RMP) [5,6]

** biological plausibility
*** rat models all seem biologically plausible
**** resonance frequency, transfer frequency, synchronous frequency, and leading phase bandwidth all increase
 with distance from the soma along the dendritic arbor.
**** Two models, Acker & Antic and Hay et al., 2011, conform well to experimental data in L5 PT and resemble hipp PT
***** resonance and transfer frequencies in the theta range
***** synchronous frequencies in delta/theta range
***** roughly linear relationships with distance
**** third model (Kole et al) is very different, but not necessarily implausible
***** resonance frequencies from 10-50 Hz
***** transfer frequencies from 10-25 Hz
***** synchronous frequencies from 2-35 Hz
***** farthest dendritic compartment of this neuron is 1500 microns from the soma, in experimental studies of L5 PT cells,
farthest out is 700 microns (Dembrow2015-zb, Ulrich2002-dd)
***** at these distances in this cell, resonance frequencies are from 10-18 Hz, transfer frequencies from 11-15 Hz, synch freq 4-12 Hz, 
not too far off from experimental values!! (Dembrow2015-zb).

*** Neymotin et al - may be biologically possible
**** only model in which HCN channel density plateaus in the apical tufts
**** resonance transfer and synchronous frequencies below the nexus of the apical tufts are similar to experimental values and model
 was validated looking at somatic input resonance

*** dendritic impedance profiles for the ABA cells more of a mixed bag
**** 4927233139
**** resonance frequencies between 2-15 Hz, but resonance strength is so low that it would be indistinguishable from noise in experimental preparations
**** seemingly no relationship between input resonance frequency and transfer frequency to the soma
**** synchronous frequencies are all >35 Hz, which is not seen experimentally
**** 497232419
**** like Neymotin cell, input resonance frequency also plateau, but resonance strength is comparable to other cells studied here
and transfer frequency is not far offf from experimental observations
**** phase response is, as in the other ABA model, is fairly unusual

*** should be noted that these models were intended for use in large network simulations
**** constraining these models focused mainly on measures of perisomatic firing characteristics
**** ABA models deliberately simplified the channel distributions in the dendrites

** morphology, channel distribution, and dendritic impedance 
*** Although one of the ABA cells did not exhibit strong resonance, and neither may have biologically plausible impedance profiles 
by its constant channel densities in the dendrites they demonstrate that gradients in voltage-gated ion channel density are not 
necessary for gradients in the dendritic impedance profile.
**** The channel distributions in these models do suggest that realistic phase responses may require realistic channel distributions
*** The impedance profiles of the three cells with the same channel distributions (\emph{Fig. 7}) demonstrates that morphology has a
direct impact on all location-dependent relationships in the denritic impedance profile.
**** suggests that dendritic pruning seen during development \cite{Riccomagno2015-pq} and dendritic damage seen during traumatic 
brain injury \cite{Gao2011-xo} have impacts on the impedance profile of the entire neuron.
***** dendritic pruning during development may be one mechanism for tuning the impedance profile.

** Tunability and degeneracy of the impedance profile 
*** (from intro) Tunability
**** dynamically tunable subthreshold resonance along the neuronal topograph (Magee2005-oq, Narayanan2007-gw, Narayanan2008-zw, Sjostrom2008-sz, 
Hu2009-qb, Rathour2012-am, Rathour2012-bu) Das2017-nz
**** LTP induces changes in impedance profile Narayanan2007-gw
*** (from intro) Degeneracy:
**** "With reference to sub- and supra-threshold frequency selectivity in neurons, several studies have demonstrated multi-channel regulation
of somatodendritic spectral selectivity. Specifically, studies pertaining to sub-threshold resonance and phase dynamics have shown that impedance properties 
mediated by HCN channel could be significantly modulated by the presenc eof other sub-threshold conductances and by morphological characteristics 
(Hutcheon2000-gs, Hu2002-ga, 2009, Narayanan2008-zw, Zemankovics2010-zt, Rathour2012-bu, Dhupia2014-ad, Rathour2016-vv). While these studies
elucidated the role of individual conductances in modulating sub-threshold impedance properties, computational
frameworks have provided direct lines of evidence for degeneracy (Figures 2B,C) in active dendritic spectral tuning (Rathour2012-bu, Rathour2014-pl)." Das2017-nz
***** mainly studied in hippocampal neurons
*** (from intro) role in disease: Ih altered in temporal lobe epilepsy Shin2008-za, Marcelin2009-vy
*** role in oscillations and cross-frequency coupling 
We found that tuning Ih in different cell classes altered network rhythms, providing independent control for
gamma and theta oscillations. Ih modulation also set the level of cross-frequency coupling and timing of gamma
generation relative to the theta cycle. Ih modulation may therefore be an important control point with functional
consequences, since these dynamics are hypothesized to contribute to learning and cognitive function [19–21]. - Neymotin2013-cm
*** we looked at two paradigms for dynamically tuning the impedance response by changing the conductances of HCN and M-type K+ channels at the branch level and
across the whole dendritic arbor in one PC model
**** Changing either HCN or M-type K+ conductance across the whole arbor changed the location-dependent relationships of the impedance profile 
**** We also found that both local and global changes to both HCN and M-type K+ conductance can have produce a wide array of impedance profiles
while also allowing for degeneracy.
***** For instance, changing HCN and M-type K+ conductance by $\pm20\%$ produces a range of impedance profiles, with resonance amplitude varying by over
45M%$\Omega$, resonance frequency over 10 Hz, transfer frequency by 5 Hz, and synchronous frequency by over 6 Hz (\emph{Fig. 9S, T, V, W}). Many of the
possible impedance responses in these ranges can, however, be achieved by multiple combinations of changes to HCN and M-type K+ conductance.
*** While HCN channels are necessary for subthreshold resonance in PCs, M-type K+ channels are just one of the voltage-gated ion channels with
inductive reactance capable of modulating the impedance response; therefore, we have only scratched the surface of possible mechanisms by which 
neurons may dynamically tune their impedance response.  The degeneracy of the impedance response, however, implies that neurons may have multiple 
ways to maintain their impedance profiles in response to Ih modulation, brought about through participation in network oscillations or through pathophysiology.

* [2020-4-13 Mon] - srdjan comments 
** This looks like an attack on strawman. In order to make this statement scientific, the abstract should:
[1] Summarize/state very briefly the published impedance profiles that can be found in dendrites of neocortical L5 pyramidal neurons?;
and [2] Specify in which aspect is your set of impedance profiles different from the “previously established set”.

** Who published the map of impedance profiles in dendrites of pyramidal neurons? Which map is different from the map you hypothesize. 
In which aspect is your hypothesis different from the “previously established impedance profile”?
*** all fair questions, but does the "who" really belong in the abstract?

** The balance of excitatory and inhibitory inputs . . . 
Not true. Active dendritic conductances also play important role.
*** will definitely add that

** Distinguish PCs from IT cells? - I thought that IT cells are PC cells!
Did you meant to say PT instead of PC?
*** Does PT really make sense outside of motor cortex?  PC is pyramidal cell, need some way to distinguish from commissural/IT 

** Ruth Empson does not recognize PT and IT cells. 
Instead, she divides L5 projection pyramidal neurons of the M1 cortical region into 4 categories: 
    1 corticospinal (CSp) neurons, 
    2 corticothalamic (CTh) neurons, 
    3 commissural projecting corticostriatal (CStr) neurons,
    4 commissural projecting corticocortical (CC) neurons.
*** very helpful, but how best to refer to the non-commissural neurons outside of M1 then?

** In the year 2013, a separation based upon two broad projection neuron types (PT and IT) seems limiting and dated (Ruth Empson)
*** seems commissural nuerons don't have location-dependent impedance profiles, but Csp and CTh are (or however we might choose to distinguish them)

** Srdjan is totally confused. Nikolai Dembrow describes COM and CPn pyramidal neurons [ref 9]. 
Craig Kelley somehow uses PC and IT nomenclature. What is the relation between Dembrow and Kelley nomenclatures?
*** maybe subcortical project neurons . . . 

** Unnecessary and Irritating repetition of the term “complex”. We get it -  it is complex. We just need to hear it once in one of the sentences.
*** OK

** (REF) for impedance equations
*** can try to find references, but seems like citing Ohm or Fourier

** It sounds very intellectual, but has no meaning to me. Could you please define “inductive reactances”, before you use it in explaining your point?
*** fair, will add an explanation

** In the context of dendritic integration or synaptic integration, the transfer frequency (what is symbol of Transfer Frequency – Zt#^&?) specifies the
frequency of EPSP leading phase and/or dendritic spike leading phase, at which the efficacy of transfer between the initiation site and the soma is the 
most optimal. For example, two EPSPs of identical amplitude, which propagate from dendrite to soma, will have different somatic amplitude depending on 
the frequency of heir leading phases. 
*** no symbol for transfer frequency, iTo join the video meeting, click this link: https://meet.google.com/xuw-bsyp-pgp
Otherwise, to join by phone, dial +1 320-412-3603 and enter this PIN: 810 319 845#t's the peak frequency of the transfer impedance amplitude
*** not entirely sure if we're talking about the same transfer frequency or using phase in the same manner here?

** If my text above is correct, then we should include this explanation at this point of manuscript, 
because there are readers who are interested in biology primarily, and not physics savvy.

** This Introduction has left us hanging. What is this paper about? I believe, here it is necessary to state two things: 
[1] What is the GAP in knowledge or interesting questions, which remains to be investigated? 
and 
[2] What have we done to address this interesting question - briefly in broad strokes?
*** totally fair 

** The FIRST model [ref 17] does not appear in Fig. 1.
What is the point of calling it The FIRST?
This mismatch between Methods and Figures is a mistake. Readers do not have time to play detective games.
If you call something FIRST, it must be addressed first in the Results section, in Figure 1. I understand that you consider Fig 1 as a Methods figure, 
and Fig. 2 as a Result figure, however I strongly advise that you address FIRST MODEL in the FIRST FIGURE. 
Or change the ordering of models in your narrative, make Acker2008 the “first model”. Also, start the Results section with the Acker figure – Fig. 3.
*** so you touched on why I have it ordered that way, but if confusing will reword/structure things 

** What constitutes a "dendritic segment". Is this based on the, for example n=9 segment feature of NEURON?
*** should change segment -> compartment (more universal term)

** In Figure 1, the amplitude of the injected Chirp current was equal or less than 2 pA. Two picoAmps of current has little or no physiological meaning. 
How can anyone believe that voltage-gated channels are activated with voltage swings of only 0.1 mV (one tenth of one millivolt)?
*** I understand the skepticism, but impedance should be fairly independent of current amplitude as long as we're below spiking threshold, since it's a ratio 
*** NEURON's built in impedance tool looks at much smaller excursions in membrane potential (I believe uV)
*** if voltage-gated ion channels like HCN weren't activated, there wouldn't be any resonance 

** The Figure1 Modeling data has no implications on neuronal physiology, unless the RANGE of current amplitudes were carefully investigated. 
To account for this criticism, I would plot 3 complete Impedance Profiles for the same cell, where the Chirp current amplitude was set at 2 pA, 20 pA and 50 pA.
Then I would publish a conclusion on whether the conclusions of this paper depend, or do not depend, on the Chirp current amplitude. 
Alternatively, how exactly the conclusions of the current paper depend on the Chirp current amplitude, displayed right there in Figure-1. 
*** can include if above argument is not convincing.  

** Fig. 1. The color of the “basilar dendrite” line in the graphs I-L is plum-purple and the color of the dot on cell morphology is sky blue.
 Could you please fix this? Fig. 1. The measurements that should describe OBLIQUE branch  have been made at the branch point between apical trunk 
 and oblique branch.  Could you please move the stimulation and recording site to the middle of the oblique branch, and plot the middle-branch data? Thanks, Srdjan.
*** for sure can move oblique example away from branch point 
*** surprised at the color difference, can't see it on my machine.  I-L look different to C?

** suggestions from discussion with srdjan 
morphology - systematic changes - length and radius
voltage clamp 1 compartment each conductance
EPSP frequency vs soma V 
different current injections
kruschavatz
antic@uchc.edu 

* [2020-4-15 Wed] - working on srdjan's suggestions
** running examples of higher amplitude current injections on neurosim machine
*** amp * 10: very much same results ("noisier" impedance measures, but think it's due to sampling rate (greater voltage excursion in less time))
*** amp * 20: start getting into territory where excusions are asymmetric about resting membrane potenital 
*** perfectly replace traces in Figure 1 w/ traces from amp*10, but impredance metrics remain virtually unchanged
** new branch called neurosim_machine 
** seems like for changing morphology systematically, only need to deal with L, not pt3d

* [2020-4-20 Mon] - finished draft of discussion 

* [2020-4-23 Thu] - fundamental dend notes
** Bill's questions about dends to Arnd:
Hi Bill,
sorry for the late reply. Of course these are excellent questions, but they tend not to have easy answers. Here is an attempt:
a couple of very basic questions:
1. for passive properties:
We typically assume that cable properties are uniform across the dendritic tree and differ in soma (and axon).
We often assume that passive membrane properties are uniform across the dendritic tree and soma, and differ in the axon. 
We then allow for differences between soma and dendrites, and sometimes between different dendritic regions, 
to account for the membrane area in spines (whose density is inhomogeneous). 
To do this, we scale up Cm and scale down Rm to ‘collapse’ the spine membrane into the dendritic shaft membrane, 
effectively assuming that the spine membrane has the same passive properties as the dendritic shaft membrane.

The main reasons for these choices are that we do not know better, at least not with much certainty.
We tend to accept that axons, especially myelinated ones, should be treated differently. 
And we use our knowledge about different spine densities. But there is no easy way to prove locally inhomogeneous Rm (or Ri) in dendrites. 
In this paper https://www.ncbi.nlm.nih.gov/pubmed/11533136 we wrote:
"A final potential source of error which is very difficult to assess quantitatively is the structure of the model itself.
We constructed our compartmental models with the simplest possible assumption, namely that the passive parameters are homogeneously distributed. 
While this assumption proved adequate to constrain our models within a reasonable margin of error, it is difficult in principle to rule out alternative models with more complex
distributions of parameters. 
The lower value of somatic vs. dendritic Rm assumed in the model of Purkinje cells constructed by Rapp et al. (1994) is not necessarily inconsistent with our models since it
could be due to a shunt conductance associated with somatic microelectrode recording. 
Although two-site recording can give an indication of inhomogeneities in the passive parameters, it cannot clearly distinguish between alternative inhomogeneous models, 
e.g. between an inhomogeneity in Rm (Stuart & Spruston, 1998; London et al. 1999) and an inhomogeneity in Ri. 
To exclude or confirm an inhomogeneous distribution of Ri in dendrites, simultaneous recording from at least three sites would be required (Kleinle, 1998). 
We conclude that future refinements of passive models of neurons will depend primarily on improved acquisition of morphological data, 
for example by combining high-resolution confocal microscopy, deconvolution, and novel image processing techniques allowing automated reconstruction of neuronal morphology, 
as well as on multi-site recordings."

What evidence do we have for this from dendritic recordings?
Not much. It is impossible to prove precise uniformity of passive parameters, because even patch-clamp recordings are noisy and morphological reconstructions are imperfect. 
What we do have are models with uniform parameters across soma and dendrites that fit data from multi-site patch-clamp recordings, suggesting that nonuniformity, 
which must exist to some degree, is not severe in these cases.
This (otherwise very good) paper https://www.ncbi.nlm.nih.gov/pubmed/9570781 claims to provide evidence for nonuniform Rm in dendrites. 
However, with hindsight we now think that this is most likely due to their old-style pharmacological block of I_h with cesium, which is not as complete and specific as with ZD7288. 
Thus, in this paper the well-known distance-dependent increase in I_h density 
(https://www.ncbi.nlm.nih.gov/pubmed/9742133 https://www.ncbi.nlm.nih.gov/pubmed/10805715 https://www.ncbi.nlm.nih.gov/pubmed/11160518 https://www.ncbi.nlm.nih.gov/pubmed/16467515 ) 
may show up incorrectly as a decrease in Rm with distance from the soma.

Since most are done with patch how accurate are those assessments? Is rapid dialysis in small spaces a problem? Has this been done with voltage indicators?
Patch at least means that there should be no shunt conductance associated with the electrode, which can happen with sharp recordings as discussed above in the context of Rapp et al. (1994). Rapid dialysis may be a problem for measurements of Ri, and indeed values of Ri vary quite a lot across studies. Larger organelles like mitochondria and ER, whose excluded volume and added tortuosity increase intracellular Ri above the values for bulk electrolytes, do not migrate en masse to the patch pipette, howerver, at least as long as the series resistance remains small (which it should for good recordings). The more likely reason for uncertainty in Ri are over- or underestimated dendritic diameters, however. Voltage indiators are noisy, and therefore measuring the small subthreshold voltage responses needed to infer passive parameters (to avoid activating voltage-gated channels) with voltage-sensitive dyes would be very difficult.
Has it been shown in pyramidal cells that basilar dends vs apical oblique vs apical main vs tufts have same properties? (or differ in some systematic way?)
For passive properties: no, to my knowledge.
There are vastly differing estimates in spines -- think Rin 50Mohm vs 500Mohm (carnevale paper is one; forget other) -- any opinion on which to accept?
Do you mean estimates of the spine neck resistance? My favourite paper is https://www.ncbi.nlm.nih.gov/pubmed/24657968 because it links morphology and function of individual spines (Fig. 3) and uses superresolution microscopy, yielding exquisite morphological data. It shows that there is a diversity/degeneracy of spine neck resistances. Some filopodia-like spines have spine neck resistances of 500 MOhm, but most do not, and the average spine neck resistance (Fig. 4) is consistent with the early estimates https://www.ncbi.nlm.nih.gov/pubmed/8614831

2. for active properties:
Parameter degeneracy (non-uniqueness of solution) is assumed in sims and can be demonstrated in models eg our jnphys 2017 paper --
https://eur01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fpaperpile.com%2Fshared%2FljIkpv&amp;data=02%7C01%7C%7Cdc8a3e9634324e2a2c5f08d7bd2e3fc1%7C1faf88fea9984c5b93c9210a11d9a5c2%7C0%7C0%7C637185878650424699&amp;sdata=WweMkFsqP9HxRbzjC3vEI80BxS9s4sF39FRu9XUZNTs%3D&amp;reserved=0
Mostly this is simply because expts are only done in soma so all dend params are underconstrained.
However, "real" degeneracy is also believed to exist but is mostly discussed by marder and colleagues in STG; they have
experimental demonstrations and also have explanation (evolutionary advantages of not having everyone like everyone else so
that everyone dies when env changes)

Q: has anyone demonstrated mammalian dend or somatic channel degeneracy experimentally?
Yes, in dissociated Purkinje cells https://www.ncbi.nlm.nih.gov/pubmed/15814781 , and there are indications in pyramidal neurons as well https://physoc.onlinelibrary.wiley.com/doi/full/10.1113/jphysiol.2007.146597
Real degeneracy is believed to exist and to be exploited by the brain https://www.ncbi.nlm.nih.gov/pubmed/18982095 but yes, not many people have demonstrated it experimentally in mammalian neurons.
Does this answer your questions? I know that some of the answers are not satisfactory. Do you have additional questions?

Stay safe,
Arnd

* [2020-4-30 Thu] - Ia, Im, ted's comments
** ted's email: 
Hi, Craig. Yes, I'm interested. You sure have put a lot of work into
this. I may have some other comments over the next couple of days, but
here are two things I wanted to mention to you right now.

First, I wouldn't put too much emphasis on results obtained from the
Kole et al. model cell. That cell's morphology contains a lot of abrupt
jumps parallel to the z axis. Those are artifacts caused by hysteresis
and/or stiction in the z axis position control of the microscope that
was used to obtain the morphometric data. They add spurious length to
the cell's branches. GIGO. FYI, this is a problem that crops up in a lot
of papers (e.g. Poirazi and Mel's "pyramidal neuron as a two layer
network" is pretty bad). Yes, I know all experimental data is
inaccurate, but why deliberately reuse data that are visibly corrupt?

The morphologies used by Hay, Acker, and Neymotin are free of z axis
artifact. I haven't checked the Allen Institute morphologies; they need
a look, but I'd bet they're also free of this artifact.

My other leading comment at this point is: if you want to make this
paper stand out from all the "other" impeadance analysis papers, one way
might be to bring it back to the time domain. A little phase shift, a
low Q resonance--even if those things are location-dependent, a lot of
neuroscientists may not have a clear idea of what those imply to
neuronal function. But these properties can have a big impact on
moment-to-moment interaction of signals. I'm wondering if it would be
possible, without spending a lot of time on it, to construct an example
simulation with one of these cells that illustrates how phase shift
and/or low Q resonance shape integration of, say, a pair of synaptic
inputs that are distributed in time and/or space.

--Ted
*** my response: 
Hi Ted,

Great, thanks.

Definitely good to know that about the Kole cell's morphology.  I caught the discussion about that issue at your lab meeting last week, 
have been meaning to go check the morphologies I've been using, but haven't had a chance yet.  Maybe this paper would be a good forum to address that issue.  

In light of that, do you think it'd be worth revisiting the tunability/degeneracy stuff (Figs. 8 & 9) with a different cell model?  On the one hand, 
Figure 9 at least doesn't deal much with the location dependence (could maybe ditch Fig. 8 which does).  But on the other, as you said, GIGO.

Re bringing things back to the time domain, I think that'd be a great idea if we can come up with a good sim for it.  
Bill and Srdjan's main qualms with the paper are how does this all relate to physiological function, and outside of some hand-wavy explanations and pointing some of 
Dan Johnston & Co's papers, I haven't had a great retort for that.  I'll give it some thought, but please let me know if you think of anything.

Best,
Craig
*** bill's comments 
billl  10:01 AM
this seems quite reasonable; what do you think;  i'm a big fan of timedomain illustrations as you recall

Craig  10:02 AM
yeah, i think it's a great idea, but I'm still at a bit of a loss for a good example sim right now (edited) 
10:06
also not sure whether this implies I ought to toss the Kole cell results.  as ted mentioned regarding the Poirzai and Mel paper w/ the same issue at gordon's lab meeting last week, their results at least are probably qualitatively still right.  on the other hand, since channels are distributed based on distance to the soma, might be problematic to draw any conclusions based on those channel distributions when we know they're spurious

billl  10:36 AM
you already have the sims ; show responses in time domain -- big vs little
10:36
if know it to be spurious i would leave it out; qual still but quant not

Craig  10:39 AM
sure,  but those are still continuous inputs, rather than synaptic.  and right on - will have to redo the m-type K+ and Ih density stuff (figs 8 & 9 I think) with another cell and I think maybe a-type rather than m-type (I think kole was the only one with m-type all over)

billl  10:41 AM
how much is our model of mtype diff from atype?
10:42
i think would be interesting to say about differences in properties they confer

Craig  10:43 AM
good question, will have to look, and I agree, would be cool to compare the two.

** Ia and Im distributions:
*** Acker and Antic: Ih and Ia but no Im, separated as proximal and distal, but both in all dends 
*** Hay: Im, but K_Pst and K_Tst (not sure if that adds up to Ia), shaw related potassium
channel family (SKv3).  Also, only Ih in basal dends 
*** Neymotin: Ih and Ia, but no Im unless it's IKsin (slowly inactivating, Im is noninactivating, right?)
*** Kole: Ih and Im, no Ia
*** Allen cells: Ih and Im throughout 

** trying  Ih and Im changes in apical branch of hay cell
*** trying to parallelize with ParallelContext for neurosim_machine
*** works with do nothing function, not with 

* [2020-5-4 Mon] - more Im / Ia stuff 
** running changes to Im on single branch for Hay cell
*** changing just apic 65 didn't do shit, trying whole apical arbor 
** salva's suggestion re getting rid of Kole cell 
I was finishing ysterday the Labarrera 2018 cell reports paper and it uses the kole ih model with some pyr cell morphology — I think Shai 2015 … maybe that’s an option
3:57
labarrera 2018:
All simulations were done using the Neuron simulation environment (Hines and
Carnevale, 1997). Ih was simulated using the deterministic model by Kole et al.
(2006), with a positive shift of 14 mV (to accommodate our uncorrected liquid
junction potential values). To explore the effect of shifting of Vhalf, we introduced
a variable Vshift for both functions, alpha(V) and beta(V), which resulted in the
correct shift in both activation curve and activation time constant. For Figure 6,
we modified the published (Shai et al., 2015) L5PC model to fit experimental re-
sults of Ih (Harnett et al., 2015; Supplemental Experimental Procedures).

* [2020-5-6 Wed] - implementing teds time-domain sim suggestion
** added conditionAndTest() to chirpUtils.y
from getCells import AckerAnticCell
cell = AckerAnticCell()
from neuron import h, gui
from chirpUtils import conditionAndTest
stim_seg = cell.apical[15](0.5)
soma_seg = cell.soma[0](0.5)
start = 200
lag = 10
Sc0 = 0.0025
St0 = 0.001
St, v_soma, v_stim, t_vec = conditionAndTest(stim_seg, soma_seg,  Sc0, St0, start, lag)
** added getSc0 to chirpUtils.py 
from getCells import AckerAnticCell
cell = AckerAnticCell()
from neuron import h, gui
from chirpUtils import findSc
# stim_seg = cell.apical[15](0.5)
stim_seg = cell.basal[12](0.5)
soma_seg = cell.soma[0](0.5)
start = 200
SC = findSc(stim_seg, soma_seg, start, 0.006, 0.0005)

* [2020-5-7 Thu] - continued from yesterday
** incorporated getTp and sweepLags
from getCells import AckerAnticCell
cell = AckerAnticCell()
from neuron import h, gui
from chirpUtils import findSc
stim_seg = cell.basal[12](0.5)
soma_seg = cell.soma[0](0.5)
v_stim = h.Vector()
v_soma = h.Vector()
t_vec = h.Vector()
v_stim.record(stim_seg._ref_v)    
v_soma.record(soma_seg._ref_v)
t_vec.record(h._ref_t)
start = 200
SC = findSc(stim_seg, soma_seg, start, 0.5, 0.01)
from chirpUtils import getTp
TP = getTp(stim_seg, start, SC / 2)
from chirpUtils import sweepLags
lags, testWeights = sweepLags(stim_seg, soma_seg, SC / 2, SC / 10, SC / 20, start, TP, 5)
** results look reasonable/good 

* [2020-5-8 Fri] - " "
** looking at a few weights in basal section *testScript.py*
** trying to figure out how to pick an initial weight to find Sc - lowest weight of single syn to get spike
*** right now, something of a trial and error affair, trying to use |Z| for better guesses
**** testSC.py
from getCells import AckerAnticCell
cell = AckerAnticCell()
from neuron import h, gui

from scipy.io import loadmat
data = loadmat('AckerAntic/ackerantic_impedance_measures/apical[15].mat')

from chirpUtils import findSc
stim_sec = cell.apical[15]
soma_seg = cell.soma[0](0.5)
start = 200
base = 2e-5
count = 0
weights = []
inds = [0, 6, 12]
# for stim_seg in stim_seg.allseg():
for loc in [0.1, 0.5, 0.9]:
    SC = findSc(stim_sec(loc), soma_seg, start, base * data['ZinResAmp'][0][inds[count]], base * data['ZinResAmp'][0][inds[count]] / 50)
    weights.append(SC)
    count = count + 1
**** outputs:
In [4]: weights
Out[4]: [None, 0.004943106899110322, 0.0033753265030080875]
*** not a great strategy,salva suggests weightnorm 
https://github.com/NathanKlineInstitute/A1/blob/d1061a5861c303a5193f91c33a146447dbe9891d/analysis/wscale.py#L177
https://github.com/NathanKlineInstitute/A1/blob/d1061a5861c303a5193f91c33a146447dbe9891d/analysis/wscale.py#L194
https://github.com/suny-downstate-medical-center/M1/blob/d5e5c240a40305dac2c23c29d79b36d1f347d87a/analysis/wscale.py#L175

* [2020-5-11 Mon] - more time domain
** trying out procedure in testScript on an apical tuft 
** commit: 'initial code for time domain sims'
** another commit: 'trying to use parallel context to parallelize the time domain stuff'
*** at least got it running on my in serial . . . 
** one more: 'even simpler approach, just gonna try using pcid to index list'
*** finally got something running from scratch with mpi

* [2020-5-14 Thu] - meeting w/ bill
** consider color coding impedance plots apical vs basal
** think about cponsolidating figs 2-5
*** get rid of sam's cell and non-resonant allen institute cell
*** maybe have figure 2 be transfer frequency comparison, figure 3 resonance strength
figure 4 phase response, something along those lines 
** obviously hash out synaptic sims 
** (bill) invite migliore to join in, then hopefully pow wow w/ everybody 

* [2020-5-14 Thu] - revisiting some old data, working on time domain
** got the color coding more or less down
** still screwing around with time domain sims, takes a real long time to run 
** plotting traces
plt.figure()
plt.subplot(2,1,1)
plt.plot(t_vec, cond_i, label='Conditioning Synapse')
plt.plot(t_vec, test_i, label='Test Synapse')
plt.ylabel('Synaptic Current')
plt.title('Apical Tuft: Lag = 3ms')
plt.xlim(195,350)
plt.subplot(2,1,2)
plt.plot(t_vec, v_soma, label='Soma')
plt.plot(t_vec, v_stim, label='Synapse')
plt.xlabel('Time (ms)')
plt.ylabel('Membrane Potential')
plt.title('Test Synapse Weight: 0.0025')
plt.xlim(195,350)

* [2020-5-16 Sat] - synaptic stims for hay cell
** making synapses more realistic, time constants based on AMPA and NMDA - https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3545156/
** focusing on hay's apical trunk - reasonably large change in Zc before start getting into dend spike territory 
*** NMDA-type: apic[2](0.25): weight = 0.03; apic[36](0.8): weight = 0.05
*** AMPA-type: apic[2](0.25): weight = 0.125; apic[36](0.8): weight = 0.065

* [2020-5-17 Sun] - fleshing out stuff from yesterday
** AMPA synaptic stim on farther segment - dendritic Vm has bump 8ms after initial stim 
** separated code for chirp utils and synaptic utils 
*** added in recording dendritic currents, saving traces
*** modified testScript.py to sweep lags for two apical trunk segments mentioned [2020-5-16 Sat]
** commit: 'cleaned up and augmented synaptic stim code, test script focuses on hay apical trunk'

* [2020-5-18 Mon] - " "
** since sweeping over lags is the bottleneck, worked out parallelizing it 
*** added some functions to *synUtils.py*
*** new script *sweepLagsMulti.py*
*** uses robert's suggestions re multiprocessing package
** commit: 'code for parallelizing lag sweep'
*** basic tests worked added code for higher res and both segments with amplitude stim

* [2020-5-19 Tue] 
** plotting yesterday's output
from matplotlib import pyplot as plt
import json 
from os import listdir
from os.path import isdir
import numpy as np 
path_name = 'L5PYR_Resonance/timeDomainOutput/HayApic0/'
file_list = listdir(path_name)

lags = []
weights = []
start = 200
for filename in file_list:
    if not isdir(path_name + filename):
        lag = int(filename.split('_')[1][3:])
        weight = float(filename.split('_')[2][1:])
        lags.append(lag)
        weights.append(weight)
        with open(path_name+filename, 'rb') as fileObj:
            data = json.load(fileObj)

        dt = 0.025
        restVm = data['v_soma'][int(start*(1/dt) - 25*(1/dt))]
        a = np.array(data['v_soma'])
        b = a[a > restVm - 0.1]
        c = b[b < restVm + 0.1]
        t = np.array(data['t_vec'])
        t1 = t[a > restVm - 0.1]
        t2 = t1[b < restVm + 0.1]

        diff = 0.02
        ind = -2
        while diff < 0.026:
            diff = t2[ind+1] - t2[ind]
            ind = ind - 1

        Tp = t2[ind+2] - start
        
        plt.figure(figsize=(8,10))  
        plt.subplot(3,1,1)  
        plt.plot(data['t_vec'], data['v_soma'], label='Soma')  
        plt.plot(data['t_vec'], data['v_stim'], label='Dendrite')  
        plt.ylabel('Membrane Potential (mV)')
        plt.title('Lag: ' + str(lag) + ' Weight: ' + str(weight))
        plt.legend(loc='lower right')  
        plt.xlim(195, start+Tp+5)  
        # plt.subplot(2,2,4)  
        plt.subplot(3,1,2)  
        plt.plot(data['t_vec'], data['cond_i'], label='Conditioning Synapse')  
        plt.plot(data['t_vec'], data['test_i'], label='Test Synapse')  
        plt.ylabel('Current (nA)')
        plt.title('Synaptic Currents')
        plt.legend(loc='lower right')  
        plt.xlim(195, start+Tp+5)  
        plt.subplot(3,1,3)  
        plt.plot(data['t_vec'], data['i_hcn'], label='Ih')  
        plt.plot(data['t_vec'], data['i_im'], label='Im')  
        plt.plot(data['t_vec'], data['i_ca_lvast'], label='Ica lvast')  
        plt.plot(data['t_vec'], data['i_ca_hva'], label='Ica hva')  
        # plt.plot(data['t_vec'], data['i_nata'], label='Ina')  
        plt.plot(data['t_vec'], data['i_ske2'], label='Iske2')  
        plt.plot(data['t_vec'], data['i_skv3'], label='Iskv3')
        plt.xlim(195, start+Tp+5)  
        plt.legend(loc='lower right') 
        plt.title('Dendritic Currents')
        plt.xlabel('Time (s)')
        plt.ylabel('Current (nA)')
        plt.savefig(path_name + 'Figures/' + filename[:-4] + 'png')
        plt.close()
    
lasgs_sort = np.sort(np.array(lags))
inds = np.argsort(np.array(lags))
weights_sort = np.array(weights)[inds]

plt.figure(figsize=(8,10))
plt.plot(lasgs_sort, weights_sort, '*-')
plt.ylabel('Test Weight')
plt.xlabel('Interstimulus interval (ms)')
plt.title('Base of Apical Trunk - AMPA Synapses')
plt.savefig(path_name+'Figures/base_apicalTrunk_weightsLags.png')
plt.close()

* [2020-5-20 Wed]
** running a midway synapse/segment
*** adding Apic[14](0.5):  AMPA weight = 0.14
*** updating *sweepLagsMulti.py* for it

* [2020-5-21 Thu] - hopefully three points is enough for a trend 
** everything has a delay of 1 ms, might as well rerun
** nice plotting of "critical" weight stims 
from matplotlib import pyplot as plt
plt.ion()
import json
from os import listdir
from os.path import isdir
# path = './HayApic2/'
# path = './HayApic14/'
# path = './HayApic36/'
# path = './HayApic409/'
path = './ChirpSKE2/HayApic409/'
filenames = listdir(path)
dt = 0.025
lags = []
weights = []
for filename in filenames:
    if not isdir(path+filename):
        lag = int(filename.split('_')[1][3:])
        weight = float(filename.split('_')[2][1:])
        lags.append(lag)
        weights.append(weight)
        if '_lag0_' in filename:
        # if '_lag4_' in filename:
        # if '_lag3_' in filename:
        # if '_lag15_' in filename:
        # if '_lag20_' in filename:
        # if '_lag35_' in filename:
            current_file = filename
            with open(path + filename, 'rb') as fileObj: data = json.load(fileObj)
            stim_lag = lag
            stim_weight = weight

time = [t - data['t_vec'][int(1/dt*198)] - 2 for t in data['t_vec'][int(1/dt*198):]]

plt.figure(figsize=(8,10))  
plt.subplot(3,1,1)  
plt.plot(time, data['v_soma'][int(1/dt*198):], label='Soma')  
plt.plot(time, data['v_stim'][int(1/dt*198):], label='Dendrite')  
plt.ylabel('Membrane Potential (mV)')
plt.title('Lag: ' + str(stim_lag) + ' Weight: ' + str(stim_weight))
plt.legend(loc='lower right')  
# plt.xlim(-1,60)
plt.xlim(-1,18)
# plt.xlim(-1,30)

plt.subplot(3,1,2)  
plt.plot(time, data['cond_i'][int(1/dt*198):], label='Conditioning Synapse')  
plt.plot(time, data['test_i'][int(1/dt*198):], label='Test Synapse')  
plt.ylabel('Current (nA)')
plt.title('Synaptic Currents')
plt.ylim(-5.5,0.2)
plt.legend(loc='lower right')  
# plt.xlim(-1,60)
plt.xlim(-1,18)
# plt.xlim(-1,30)

plt.subplot(3,1,3)  
plt.plot(time, data['i_hcn'][int(1/dt*198):], label='Ih')  
plt.plot(time, data['i_im'][int(1/dt*198):], label='Im')  
plt.plot(time, data['i_ca_lvast'][int(1/dt*198):], label='Ica lvast')  
plt.plot(time, data['i_ca_hva'][int(1/dt*198):], label='Ica hva')  
# plt.plot(time, data['i_nata'][int(1/dt*198):], label='Ina')  
plt.plot(time, data['i_ske2'][int(1/dt*198):], label='Iske2')  
plt.plot(time, data['i_skv3'][int(1/dt*198):], label='Iskv3')
plt.legend(loc='lower right') 
plt.title('Dendritic Currents')
plt.xlabel('Time (s)')
plt.ylabel('Current (nA)')
# plt.xlim(-1,60)
plt.xlim(-1,18)
# plt.xlim(-1,30)
# plt.ylim(-0.00043,0.00026)
# plt.ylim(-0.00026, 0.00026)
# plt.ylim(-0.0004,0.00026)
# plt.savefig(path + 'Figures/' + current_file[:-4] + 'png')

* [2020-5-22 Fri] - more teasing a trend out
** filling things out with one more segment at 400 um from soma, running on el
*** plotting impedance data from the four segments:
from scipy.io import loadmat
from matplotlib import pyplot as plt 
plt.ion()
data0 = loadmat('Hay/hay_impedance_measures/L5PCtemplate[0].apic[0].mat')
data1 = loadmat('Hay/hay_impedance_measures/L5PCtemplate[0].apic[2].mat')
data2 = loadmat('Hay/hay_impedance_measures/L5PCtemplate[0].apic[14].mat')
data3 = loadmat('Hay/hay_impedance_measures/L5PCtemplate[0].apic[36].mat')
ZinResAmp = [data0['ZinResAmp'][0][0],data1['ZinResAmp'][0][0], data2['ZinResAmp'][0][1], data3['ZinResAmp'][0][1], data3['ZinResAmp'][0][-3]]
ZinResFreq = [data0['ZinResFreq'][0][0],data1['ZinResFreq'][0][0], data2['ZinResFreq'][0][1], data3['ZinResFreq'][0][1], data3['ZinResFreq'][0][-3]]
ZinQ = [data0['QfactorIn'][0][0],data1['QfactorIn'][0][0], data2['QfactorIn'][0][1], data3['QfactorIn'][0][1], data3['QfactorIn'][0][-3]]
ZcResAmp = [data0['ZcResAmp'][0][0],data1['ZcResAmp'][0][0], data2['ZcResAmp'][0][1], data3['ZcResAmp'][0][1], data3['ZcResAmp'][0][-3]]
ZcResFreq = [data0['ZcResFreq'][0][0],data1['ZcResFreq'][0][0], data2['ZcResFreq'][0][1], data3['ZcResFreq'][0][1], data3['ZcResFreq'][0][-3]]
ZcQ = [data0['QfactorTrans'][0][0],data1['QfactorTrans'][0][0], data2['QfactorTrans'][0][1], data3['QfactorTrans'][0][1], data3['QfactorTrans'][0][-3]]
dist = [data0['dist'][0][0],data1['dist'][0][0], data2['dist'][0][1], data3['dist'][0][1], data3['dist'][0][-3]]
plt.figure()
plt.subplot(3,2,1)
plt.plot(dist, ZinResAmp, '*-')
plt.ylabel('Resonance Amplitude')
plt.ylim(15,55)
plt.title('Input Impedance')

plt.subplot(3,2,3)
plt.plot(dist, ZinResFreq, '*-')
plt.ylabel('Resonance Frequency')
plt.ylim(4,6.5)

plt.subplot(3,2,5)
plt.plot(dist, ZinQ, '*-')
plt.ylabel('Q-factor')
plt.ylim(1,1.5)
plt.xlabel('Distnace to Soma (um)')

plt.subplot(3,2,2)
plt.plot(dist, ZcResAmp, '*-', label='Control')
plt.legend()
plt.ylabel('Resonance Amplitude')
plt.ylim(15,55)
plt.title('Transfer Impedance')

plt.subplot(3,2,4)
plt.plot(dist, ZcResFreq, '*-')
plt.ylabel('Transfer Frequency')
plt.ylim(4,6.5)

plt.subplot(3,2,6)
plt.plot(dist, ZcQ, '*-')
plt.ylabel('Q-factor')
plt.xlabel('Distnace to Soma (um)')
plt.ylim(1,1.5)

* [2020-5-23 Sat] - " "
** finished running segment from yesterday, only kind of fleshes things out 
** figures in presentiation on google drive
** running on more segment apic[0]
** Ih and SK_E2 seem to be only dendritic currents affecting paired-pulse effects
** how does SK_E2 impact chirp?
*** new file: chirpSKE2.py

* [2020-5-25 Mon] -results from chirp sans SK_E2
** plotting with code from [2020-5-22 Fri]
modData1 = loadmat('timeDomainOutput/ChirpSKE2/analysis/apic0_0.5.mat')
modData2 = loadmat('timeDomainOutput/ChirpSKE2/analysis/apic2_2.5.mat')
modData3 = loadmat('timeDomainOutput/ChirpSKE2/analysis/apic14_0.5.mat')
modData4 = loadmat('timeDomainOutput/ChirpSKE2/analysis/apic36_0.14.mat')
modData5 = loadmat('timeDomainOutput/ChirpSKE2/analysis/apic36_0.8.mat')

ZinResAmpSK = [modData1['ZinResAmp'][0][0], modData2['ZinResAmp'][0][0], modData3['ZinResAmp'][0][0], modData4['ZinResAmp'][0][0], modData5['ZinResAmp'][0][0]]
ZinResFreqSK = [modData1['ZinResFreq'][0][0], modData2['ZinResFreq'][0][0], modData3['ZinResFreq'][0][0], modData4['ZinResFreq'][0][0], modData5['ZinResFreq'][0][0]]
ZinQSK = [modData1['QfactorIn'][0][0], modData2['QfactorIn'][0][0], modData3['QfactorIn'][0][0], modData4['QfactorIn'][0][0], modData5['QfactorIn'][0][0]]
ZcResAmpSK = [modData1['ZcResAmp'][0][0], modData2['ZcResAmp'][0][0], modData3['ZcResAmp'][0][0], modData4['ZcResAmp'][0][0], modData5['ZcResAmp'][0][0]]
ZcResFreqSK = [modData1['ZcResFreq'][0][0], modData2['ZcResFreq'][0][0], modData3['ZcResFreq'][0][0], modData4['ZcResFreq'][0][0], modData5['ZcResFreq'][0][0]]
ZcQSK = [modData1['QfactorTrans'][0][0], modData2['QfactorTrans'][0][0], modData3['QfactorTrans'][0][0], modData4['QfactorTrans'][0][0], modData5['QfactorTrans'][0][0]]

plt.subplot(3,2,1)
plt.plot(dist, ZinResAmpSK, '*-')
plt.subplot(3,2,3)
plt.plot(dist, ZinResFreqSK, '*-')
plt.subplot(3,2,5)
plt.plot(dist, ZinQSK, '*-')
plt.subplot(3,2,2)
plt.plot(dist, ZcResAmpSK, '*-', label='Block SK E2')
plt.legend()
plt.subplot(3,2,4)
plt.plot(dist, ZcResFreqSK, '*-')
plt.subplot(3,2,6)
plt.plot(dist, ZcQSK, '*-')
** trying synaptic sims without SK_E2
*** has an effect at least for apic36(0.14)
** SK channels and resonance in lit:
*** Xue2012-dh: rat substantia nigra pars compacta dopaminergic neurons - blocking SK w/ 
apamin eliminated resonance 
*** Ge2016-sq: Electrical resonance mediated by other channels:
Electrical resonance could also arise from Ca2+ channels, which underlies autonomous
rhythmicity of certain excitable cells. The resonant frequency is in the same range 
as the central frequency revealed by spectral analysis of the spontaneous rhythm, 
and both the resonant and rhythmic behaviors disappear after blocking Ca2+ current66. 
L-type Ca2+ channels (Cav1.3) act as the main generator of spontaneous oscillations in 
substantia nigra pars compacta (SNc) neurons59. Later, T-type Ca2+ channels (Cav3) were 
found to mediate the subthreshold resonance phenomenon in GABAergic interneurons, with 
possible aid from persistent Na+ currents67. Electrical resonance contributes to the 
network oscillation in the immature neocortex and temporally tunes the integration of 
synaptic inputs within a specific range of frequencies in developing cortical neurons68. 
In addition, persistent Na+ currents could amplify the electrical resonance in neurons1,7,16 
and may play an important role in the nervous system69,70,71,72.
*** Matsumoto-Makidono2016-rd: Bath-applied UCL1684, a blocker of SK-type Ca2+-activated
K+ channels, or intracellular loading of BAPTA did not block resonance in WT mice (Figure S5), 
suggesting that Ca2+-activated K+ channel activation plays a negligible role, if any, in resonance

* [2020-5-27 Wed]
** plotting: just get Tp and Tp_soma for each of the segments: 
from getCells import HayCell
cell = HayCell()
from synUtils import getTp

start = 200
factor = 4
durDend = []
durSoma = []
secs = [0, 2, 14, 36, 36]
locs = [0.5, 0.5, 0.5, 0.14, 0.8]
weights = [0.065, 0.125, 0.14, 0.075, 0.065]

soma_seg = cell.soma[0](0.5)

for i in range(len(secs)):
    stim_seg = cell.apic[secs[i]](locs[i])
    Sc0 = weights[i] #/ factor 
    Tp, TpSoma = getTp(stim_seg, soma_seg, start, Sc0)
    durDend.append(Tp)
    durSoma.append(TpSoma)

# without SK
from neuron import h
for sec in h.allsec():
    try: sec.uninsert('SK_E2')
    except: pass

durDendNoSK = []
durSomaNoSK = []
for i in range(len(secs)):
    stim_seg = cell.apic[secs[i]](locs[i])
    Sc0 = weights[i] #/ factor 
    Tp, TpSoma = getTp(stim_seg, soma_seg, start, Sc0)
    durDendNoSK.append(Tp)
    durSomaNoSK.append(TpSoma)

from scipy.io import loadmat
data0 = loadmat('Hay/hay_impedance_measures/L5PCtemplate[0].apic[0].mat')
data1 = loadmat('Hay/hay_impedance_measures/L5PCtemplate[0].apic[2].mat')
data2 = loadmat('Hay/hay_impedance_measures/L5PCtemplate[0].apic[14].mat')
data3 = loadmat('Hay/hay_impedance_measures/L5PCtemplate[0].apic[36].mat')
ZinResAmp = [data0['ZinResAmp'][0][0],data1['ZinResAmp'][0][0], data2['ZinResAmp'][0][1], data3['ZinResAmp'][0][1], data3['ZinResAmp'][0][-3]]
ZinResFreq = [data0['ZinResFreq'][0][0],data1['ZinResFreq'][0][0], data2['ZinResFreq'][0][1], data3['ZinResFreq'][0][1], data3['ZinResFreq'][0][-3]]
ZinQ = [data0['QfactorIn'][0][0],data1['QfactorIn'][0][0], data2['QfactorIn'][0][1], data3['QfactorIn'][0][1], data3['QfactorIn'][0][-3]]
ZcResAmp = [data0['ZcResAmp'][0][0],data1['ZcResAmp'][0][0], data2['ZcResAmp'][0][1], data3['ZcResAmp'][0][1], data3['ZcResAmp'][0][-3]]
ZcResFreq = [data0['ZcResFreq'][0][0],data1['ZcResFreq'][0][0], data2['ZcResFreq'][0][1], data3['ZcResFreq'][0][1], data3['ZcResFreq'][0][-3]]
ZcQ = [data0['QfactorTrans'][0][0],data1['QfactorTrans'][0][0], data2['QfactorTrans'][0][1], data3['QfactorTrans'][0][1], data3['QfactorTrans'][0][-3]]
dist = [data0['dist'][0][0],data1['dist'][0][0], data2['dist'][0][1], data3['dist'][0][1], data3['dist'][0][-3]]

from matplotlib import pyplot as plt 
plt.ion()
plt.figure()
plt.subplot(1,2,1)
plt.plot(dist, durDend, label='Control')
# plt.plot(dist, durDendNoSK, label='Block SK')
plt.title('Dendrite')
plt.xlabel('Distance to Soma (microns)')
plt.ylabel('PSP Duration (ms)')
plt.ylim(40,240)
# plt.ylim(90,140)
plt.subplot(1,2,2)
plt.plot(dist, durSoma, label='Control')
# plt.plot(dist, durSomaNoSK, label='Block SK')
plt.title('Soma')
plt.xlabel('Distance to Soma (microns)')
plt.ylim(40,240)
# plt.ylim(90,140)
# plt.legend()

modData1 = loadmat('timeDomainOutput/ChirpSKE2/analysis/apic0_0.5.mat')
modData2 = loadmat('timeDomainOutput/ChirpSKE2/analysis/apic2_2.5.mat')
modData3 = loadmat('timeDomainOutput/ChirpSKE2/analysis/apic14_0.5.mat')
modData4 = loadmat('timeDomainOutput/ChirpSKE2/analysis/apic36_0.14.mat')
modData5 = loadmat('timeDomainOutput/ChirpSKE2/analysis/apic36_0.8.mat')
ZinResAmpSK = [modData1['ZinResAmp'][0][0], modData2['ZinResAmp'][0][0], modData3['ZinResAmp'][0][0], modData4['ZinResAmp'][0][0], modData5['ZinResAmp'][0][0]]
ZinResFreqSK = [modData1['ZinResFreq'][0][0], modData2['ZinResFreq'][0][0], modData3['ZinResFreq'][0][0], modData4['ZinResFreq'][0][0], modData5['ZinResFreq'][0][0]]
ZinQSK = [modData1['QfactorIn'][0][0], modData2['QfactorIn'][0][0], modData3['QfactorIn'][0][0], modData4['QfactorIn'][0][0], modData5['QfactorIn'][0][0]]
ZcResAmpSK = [modData1['ZcResAmp'][0][0], modData2['ZcResAmp'][0][0], modData3['ZcResAmp'][0][0], modData4['ZcResAmp'][0][0], modData5['ZcResAmp'][0][0]]
ZcResFreqSK = [modData1['ZcResFreq'][0][0], modData2['ZcResFreq'][0][0], modData3['ZcResFreq'][0][0], modData4['ZcResFreq'][0][0], modData5['ZcResFreq'][0][0]]
ZcQSK = [modData1['QfactorTrans'][0][0], modData2['QfactorTrans'][0][0], modData3['QfactorTrans'][0][0], modData4['QfactorTrans'][0][0], modData5['QfactorTrans'][0][0]]

** look at time to minimum rather than return to rest 
from getCells import HayCell
cell = HayCell()
from synUtils import getT2min

start = 200
factor = 4
durDend = []
durSoma = []
secs = [0, 2, 14, 36, 36]
locs = [0.5, 0.5, 0.5, 0.14, 0.8]
weights = [0.065, 0.125, 0.14, 0.075, 0.065]

soma_seg = cell.soma[0](0.5)

for i in range(len(secs)):
    stim_seg = cell.apic[secs[i]](locs[i])
    Sc0 = weights[i] / factor 
    Tp, TpSoma = getT2min(stim_seg, soma_seg, start, Sc0)
    durDend.append(Tp)
    durSoma.append(TpSoma)

# without SK
from neuron import h
for sec in h.allsec():
    try: sec.uninsert('SK_E2')
    except: pass

durDendNoSK = []
durSomaNoSK = []
for i in range(len(secs)):
    stim_seg = cell.apic[secs[i]](locs[i])
    Sc0 = weights[i] / factor 
    Tp, TpSoma = getT2min(stim_seg, soma_seg, start, Sc0)
    durDendNoSK.append(Tp)
    durSomaNoSK.append(TpSoma)

from scipy.io import loadmat
data0 = loadmat('Hay/hay_impedance_measures/L5PCtemplate[0].apic[0].mat')
data1 = loadmat('Hay/hay_impedance_measures/L5PCtemplate[0].apic[2].mat')
data2 = loadmat('Hay/hay_impedance_measures/L5PCtemplate[0].apic[14].mat')
data3 = loadmat('Hay/hay_impedance_measures/L5PCtemplate[0].apic[36].mat')
ZinResAmp = [data0['ZinResAmp'][0][0],data1['ZinResAmp'][0][0], data2['ZinResAmp'][0][1], data3['ZinResAmp'][0][1], data3['ZinResAmp'][0][-3]]
ZinResFreq = [data0['ZinResFreq'][0][0],data1['ZinResFreq'][0][0], data2['ZinResFreq'][0][1], data3['ZinResFreq'][0][1], data3['ZinResFreq'][0][-3]]
ZinQ = [data0['QfactorIn'][0][0],data1['QfactorIn'][0][0], data2['QfactorIn'][0][1], data3['QfactorIn'][0][1], data3['QfactorIn'][0][-3]]
ZcResAmp = [data0['ZcResAmp'][0][0],data1['ZcResAmp'][0][0], data2['ZcResAmp'][0][1], data3['ZcResAmp'][0][1], data3['ZcResAmp'][0][-3]]
ZcResFreq = [data0['ZcResFreq'][0][0],data1['ZcResFreq'][0][0], data2['ZcResFreq'][0][1], data3['ZcResFreq'][0][1], data3['ZcResFreq'][0][-3]]
ZcQ = [data0['QfactorTrans'][0][0],data1['QfactorTrans'][0][0], data2['QfactorTrans'][0][1], data3['QfactorTrans'][0][1], data3['QfactorTrans'][0][-3]]
dist = [data0['dist'][0][0],data1['dist'][0][0], data2['dist'][0][1], data3['dist'][0][1], data3['dist'][0][-3]]

from matplotlib import pyplot as plt 
plt.ion()
plt.figure()
plt.subplot(1,2,1)
plt.plot(dist, durDend, label='Control')
plt.plot(dist, durDendNoSK, label='Block SK')
plt.title('Dendrite')
plt.xlabel('Distance to Soma (microns)')
plt.ylabel('PSP Duration (ms)')
plt.ylim(90,140)
plt.subplot(1,2,2)
plt.plot(dist, durSoma, label='Control')
plt.plot(dist, durSomaNoSK, label='Block SK')
plt.title('Soma')
plt.xlabel('Distance to Soma (microns)')
plt.ylim(90,140)
plt.legend()



* [2020-5-31 Sun] - quick look at blocking SK in other models
** plotting removal of SK for allen cell
from scipy.io import loadmat
from matplotlib import pyplot as plt 
plt.ion()

modData0 = loadmat('timeDomainOutput/allenSK/analysis/apic0.mat')
modData1 = loadmat('timeDomainOutput/allenSK/analysis/apic2.mat')
modData2 = loadmat('timeDomainOutput/allenSK/analysis/apic4.mat')
modData3 = loadmat('timeDomainOutput/allenSK/analysis/apic6.mat')
modData4 = loadmat('timeDomainOutput/allenSK/analysis/apic8.mat')
modData5 = loadmat('timeDomainOutput/allenSK/analysis/apic10.mat')

ZinResAmpSK = [modData0['ZinResAmp'][0][0], modData1['ZinResAmp'][0][0], modData2['ZinResAmp'][0][0], modData3['ZinResAmp'][0][0], modData4['ZinResAmp'][0][0], modData5['ZinResAmp'][0][0]]
ZinResFreqSK = [modData0['ZinResFreq'][0][0], modData1['ZinResFreq'][0][0], modData2['ZinResFreq'][0][0], modData3['ZinResFreq'][0][0], modData4['ZinResFreq'][0][0], modData5['ZinResFreq'][0][0]]
ZinQSK = [modData0['QfactorIn'][0][0], modData1['QfactorIn'][0][0], modData2['QfactorIn'][0][0], modData3['QfactorIn'][0][0], modData4['QfactorIn'][0][0], modData5['QfactorIn'][0][0]]
ZcResAmpSK = [modData0['ZcResAmp'][0][0], modData1['ZcResAmp'][0][0], modData2['ZcResAmp'][0][0], modData3['ZcResAmp'][0][0], modData4['ZcResAmp'][0][0], modData5['ZcResAmp'][0][0]]
ZcResFreqSK = [modData0['ZcResFreq'][0][0], modData1['ZcResFreq'][0][0], modData2['ZcResFreq'][0][0], modData3['ZcResFreq'][0][0], modData4['ZcResFreq'][0][0], modData5['ZcResFreq'][0][0]]
ZcQSK = [modData0['QfactorTrans'][0][0], modData1['QfactorTrans'][0][0], modData2['QfactorTrans'][0][0], modData3['QfactorTrans'][0][0], modData4['QfactorTrans'][0][0], modData5['QfactorTrans'][0][0]]

data0 = loadmat('497232419/497232419_impedance_measures/apic/apic[0].mat')
data1 = loadmat('497232419/497232419_impedance_measures/apic/apic[2].mat')
data2 = loadmat('497232419/497232419_impedance_measures/apic/apic[4].mat')
data3 = loadmat('497232419/497232419_impedance_measures/apic/apic[6].mat')
data4 = loadmat('497232419/497232419_impedance_measures/apic/apic[8].mat')
data5 = loadmat('497232419/497232419_impedance_measures/apic/apic[10].mat')

ZinResAmp = [data0['ZinResAmp'][0][0],data1['ZinResAmp'][0][0], data2['ZinResAmp'][0][0], data3['ZinResAmp'][0][12], data4['ZinResAmp'][0][0], data5['ZinResAmp'][0][2]]
ZinResFreq = [data0['ZinResFreq'][0][0],data1['ZinResFreq'][0][0], data2['ZinResFreq'][0][0], data3['ZinResFreq'][0][12], data4['ZinResFreq'][0][0], data5['ZinResFreq'][0][2]]
ZinQ = [data0['QfactorIn'][0][0],data1['QfactorIn'][0][0], data2['QfactorIn'][0][0], data3['QfactorIn'][0][12], data4['QfactorIn'][0][0], data5['QfactorIn'][0][2]]
ZcResAmp = [data0['ZcResAmp'][0][0],data1['ZcResAmp'][0][0], data2['ZcResAmp'][0][0], data3['ZcResAmp'][0][12], data4['ZcResAmp'][0][0], data5['ZcResAmp'][0][2]]
ZcResFreq = [data0['ZcResFreq'][0][0],data1['ZcResFreq'][0][0], data2['ZcResFreq'][0][0], data3['ZcResFreq'][0][12], data4['ZcResFreq'][0][0], data5['ZcResFreq'][0][2]]
ZcQ = [data0['QfactorTrans'][0][0],data1['QfactorTrans'][0][0], data2['QfactorTrans'][0][0], data3['QfactorTrans'][0][12], data4['QfactorTrans'][0][0], data5['QfactorTrans'][0][2]]
dist = [data0['dist'][0][0],data1['dist'][0][0], data2['dist'][0][0], data3['dist'][0][12], data4['dist'][0][0], data5['dist'][0][2]]

plt.figure()
plt.subplot(3,2,1)
plt.plot(dist, ZinResAmp, '*-')
plt.ylabel('Resonance Amplitude')
# plt.ylim(15,55)
plt.title('Input Impedance')

plt.subplot(3,2,3)
plt.plot(dist, ZinResFreq, '*-')
plt.ylabel('Resonance Frequency')
# plt.ylim(4,6.5)

plt.subplot(3,2,5)
plt.plot(dist, ZinQ, '*-')
plt.ylabel('Q-factor')
# plt.ylim(1,1.5)
plt.xlabel('Distnace to Soma (um)')

plt.subplot(3,2,2)
plt.plot(dist, ZcResAmp, '*-', label='Control')
plt.legend()
plt.ylabel('Resonance Amplitude')
# plt.ylim(15,55)
plt.title('Transfer Impedance')

plt.subplot(3,2,4)
plt.plot(dist, ZcResFreq, '*-')
plt.ylabel('Transfer Frequency')
# plt.ylim(4,6.5)

plt.subplot(3,2,6)
plt.plot(dist, ZcQ, '*-')
plt.ylabel('Q-factor')
plt.xlabel('Distnace to Soma (um)')
# plt.ylim(1,1.5)

plt.subplot(3,2,1)
plt.plot(dist, ZinResAmpSK, '*-')
plt.subplot(3,2,3)
plt.plot(dist, ZinResFreqSK, '*-')
plt.subplot(3,2,5)
plt.plot(dist, ZinQSK, '*-')
plt.subplot(3,2,2)
plt.plot(dist, ZcResAmpSK, '*-', label='Block SK E2')
plt.legend()
plt.subplot(3,2,4)
plt.plot(dist, ZcResFreqSK, '*-')
plt.subplot(3,2,6)
plt.plot(dist, ZcQSK, '*-')

** EEE cell
from scipy.io import loadmat
from matplotlib import pyplot as plt 
plt.ion()

modData0 = loadmat('timeDomainOutput/ackerSK/analysis/apic0.mat')
modData1 = loadmat('timeDomainOutput/ackerSK/analysis/apic2.mat')
modData2 = loadmat('timeDomainOutput/ackerSK/analysis/apic4.mat')
modData3 = loadmat('timeDomainOutput/ackerSK/analysis/apic6.mat')
modData4 = loadmat('timeDomainOutput/ackerSK/analysis/apic10.mat')
modData5 = loadmat('timeDomainOutput/ackerSK/analysis/apic13.mat')

ZinResAmpSK = [modData0['ZinResAmp'][0][0], modData1['ZinResAmp'][0][0], modData2['ZinResAmp'][0][0], modData3['ZinResAmp'][0][0], modData4['ZinResAmp'][0][0], modData5['ZinResAmp'][0][0]]
ZinResFreqSK = [modData0['ZinResFreq'][0][0], modData1['ZinResFreq'][0][0], modData2['ZinResFreq'][0][0], modData3['ZinResFreq'][0][0], modData4['ZinResFreq'][0][0], modData5['ZinResFreq'][0][0]]
ZinQSK = [modData0['QfactorIn'][0][0], modData1['QfactorIn'][0][0], modData2['QfactorIn'][0][0], modData3['QfactorIn'][0][0], modData4['QfactorIn'][0][0], modData5['QfactorIn'][0][0]]
ZcResAmpSK = [modData0['ZcResAmp'][0][0], modData1['ZcResAmp'][0][0], modData2['ZcResAmp'][0][0], modData3['ZcResAmp'][0][0], modData4['ZcResAmp'][0][0], modData5['ZcResAmp'][0][0]]
ZcResFreqSK = [modData0['ZcResFreq'][0][0], modData1['ZcResFreq'][0][0], modData2['ZcResFreq'][0][0], modData3['ZcResFreq'][0][0], modData4['ZcResFreq'][0][0], modData5['ZcResFreq'][0][0]]
ZcQSK = [modData0['QfactorTrans'][0][0], modData1['QfactorTrans'][0][0], modData2['QfactorTrans'][0][0], modData3['QfactorTrans'][0][0], modData4['QfactorTrans'][0][0], modData5['QfactorTrans'][0][0]]

data0 = loadmat('AckerAntic/ackerantic_impedance_measures/apic/apical[0].mat')
data1 = loadmat('AckerAntic/ackerantic_impedance_measures/apic/apical[2].mat')
data2 = loadmat('AckerAntic/ackerantic_impedance_measures/apic/apical[4].mat')
data3 = loadmat('AckerAntic/ackerantic_impedance_measures/apic/apical[6].mat')
data4 = loadmat('AckerAntic/ackerantic_impedance_measures/apic/apical[10].mat')
data5 = loadmat('AckerAntic/ackerantic_impedance_measures/apic/apical[13].mat')

ZinResAmp = [data0['ZinResAmp'][0][1],data1['ZinResAmp'][0][1], data2['ZinResAmp'][0][0], data3['ZinResAmp'][0][1], data4['ZinResAmp'][0][1], data5['ZinResAmp'][0][3]]
ZinResFreq = [data0['ZinResFreq'][0][1],data1['ZinResFreq'][0][1], data2['ZinResFreq'][0][0], data3['ZinResFreq'][0][1], data4['ZinResFreq'][0][1], data5['ZinResFreq'][0][3]]
ZinQ = [data0['QfactorIn'][0][1],data1['QfactorIn'][0][1], data2['QfactorIn'][0][0], data3['QfactorIn'][0][1], data4['QfactorIn'][0][1], data5['QfactorIn'][0][3]]
ZcResAmp = [data0['ZcResAmp'][0][1],data1['ZcResAmp'][0][1], data2['ZcResAmp'][0][0], data3['ZcResAmp'][0][1], data4['ZcResAmp'][0][1], data5['ZcResAmp'][0][3]]
ZcResFreq = [data0['ZcResFreq'][0][1],data1['ZcResFreq'][0][1], data2['ZcResFreq'][0][0], data3['ZcResFreq'][0][1], data4['ZcResFreq'][0][1], data5['ZcResFreq'][0][3]]
ZcQ = [data0['QfactorTrans'][0][1],data1['QfactorTrans'][0][1], data2['QfactorTrans'][0][0], data3['QfactorTrans'][0][1], data4['QfactorTrans'][0][1], data5['QfactorTrans'][0][3]]
dist = [data0['dist'][0][1],data1['dist'][0][1], data2['dist'][0][0], data3['dist'][0][1], data4['dist'][0][1], data5['dist'][0][3]]

plt.figure()
plt.subplot(3,2,1)
plt.plot(dist, ZinResAmp, '*-')
plt.ylabel('Resonance Amplitude')
# plt.ylim(15,55)
plt.title('Input Impedance')

plt.subplot(3,2,3)
plt.plot(dist, ZinResFreq, '*-')
plt.ylabel('Resonance Frequency')
# plt.ylim(4,6.5)

plt.subplot(3,2,5)
plt.plot(dist, ZinQ, '*-')
plt.ylabel('Q-factor')
# plt.ylim(1,1.5)
plt.xlabel('Distnace to Soma (um)')

plt.subplot(3,2,2)
plt.plot(dist, ZcResAmp, '*-', label='Control')
plt.legend()
plt.ylabel('Resonance Amplitude')
# plt.ylim(15,55)
plt.title('Transfer Impedance')

plt.subplot(3,2,4)
plt.plot(dist, ZcResFreq, '*-')
plt.ylabel('Transfer Frequency')
# plt.ylim(4,6.5)

plt.subplot(3,2,6)
plt.plot(dist, ZcQ, '*-')
plt.ylabel('Q-factor')
plt.xlabel('Distnace to Soma (um)')
# plt.ylim(1,1.5)

plt.subplot(3,2,1)
plt.plot(dist, ZinResAmpSK, '*-')
plt.subplot(3,2,3)
plt.plot(dist, ZinResFreqSK, '*-')
plt.subplot(3,2,5)
plt.plot(dist, ZinQSK, '*-')
plt.subplot(3,2,2)
plt.plot(dist, ZcResAmpSK, '*-', label='Block SK E2')
plt.legend()
plt.subplot(3,2,4)
plt.plot(dist, ZcResFreqSK, '*-')
plt.subplot(3,2,6)
plt.plot(dist, ZcQSK, '*-')
** neat results blocking SK 

* [2020-6-1 Mon] - revisiting figures 
** data from figures
*** dembrow 
dist = [318.1987014295793,
    307.52076704913554,
    342.74197031427707,
    354.50252659765914,
    366.82166971394025,
    379.9067102402788,
    383.3172571658917,
    411.5042973755057,
    425.9008652337284,
    456.65481349246346,
    443.4099710628987,
    428.29501446855073,
    452.4049466607161,
    475.1860756395676,
    491.63847338794426,
    486.4269158232678,
    480.3587624710269,
    547.2121046342552,
    568.8415081844489,
    604.1706857085271,
    568.3779386994141,
    626.7704179323649,
    698.2608946027268,
    585.4954578828408,
    555.8745195145478,
    540.9539165862858,
    504.9538590000144,
    495.8120384100431,
    470.7677689638791,
    429.6166193979356,
    423.9069405853645,
    433.152416463915,
    407.80437943594256,
    399.5321115446078,
    369.9385266552455,
    371.69202862037696,
    386.09723441931453,
    385.5429665567729,
    383.62534371805765];
transfer = [3.447920415772879,
    4.459639222009471,
    4.794316235009575,
    4.813362894286001,
    5.268495990555852,
    5.20815997466204,
    4.553749586098673,
    4.175235023970284,
    4.094988554728552,
    3.934366047134363,
    4.728192798836757,
    5.105843566893652,
    5.441254804854523,
    5.875872791926403,
    5.3593671268769505,
    5.28041634874246,
    6.133240235527849,
    5.2763997063100145,
    4.997437410921236,
    4.836512575402022,
    4.125221347230818,
    6.10374166798635,
    7.962453751025753,
    9.555808295302398,
    7.515915405767263,
    7.001482846489395,
    7.241747167475273,
    7.202703675443773,
    8.15590043333669,
    8.039676941017259,
    7.247102690718532,
    6.810368408171492,
    6.15785836656541,
    5.127567987791711,
    5.962122629965016,
    6.9135486100113726,
    6.793653992888094,
    6.3377434819539005,
    6.1396323116569];
syncDist = [319.6391290360118,
    306.8443641292072,
    365.4776817189286,
    378.92409525569684,
    380.1466209417418,
    374.98819229110626,
    356.4805497943063,
    341.8020275034055,
    358.29996372124225,
    369.19454312722894,
    376.73094167334057,
    396.50218014799,
    413.131541299601,
    427.17210505780645,
    421.5002977596156,
    424.1014162405624,
    433.71323353252427,
    402.46969354717265,
    408.30852003203483,
    401.3087732988343,
    449.80046683231683,
    548.0036415658733,
    566.490748916771,
    605.2994366524974,
    549.795675298273,
    568.8646117830667,
    591.1644112231417,
    623.6729161960697,
    556.6393549226167,
    696.9094605417172,
    507.5767843330527,
    499.1491604547851,
    426.36712733843973,
    443.1936258907119,
    475.79111649588276,
    494.929872476744,
    470.6367948744276,
    452.8027051632202,
    487.95476791862615,
    445.8549807996386,
    388.9835787283269,
    404.9749813472425];
synchFreq = [4.236051502145923,
    4.738197424892704,
    5.568669527896995,
    4.8733905579399135,
    5.626609442060085,
    6.399141630901287,
    6.495708154506437,
    6.572961373390558,
    7.82832618025751,
    7.133047210300429,
    8.813304721030041,
    8.890557939914162,
    8.291845493562231,
    8.214592274678111,
    7.229613733905579,
    6.534334763948497,
    5.9356223175965654,
    5.703862660944205,
    4.3326180257510725,
    4.081545064377682,
    3.9849785407725324,
    4.583690987124463,
    4.776824034334762,
    6.283261802575107,
    6.3025751072961365,
    7.287553648068668,
    7.6931330472103,
    8.079399141630901,
    8.75536480686695,
    9.894849785407724,
    7.905579399141629,
    9.798283261802574,
    10.570815450643774,
    7.190987124463518,
    6.321888412017167,
    6.321888412017167,
    7.0364806866952785,
    6.630901287553647,
    5.723175965665236,
    5.645922746781116,
    6.959227467811158,
    6.360515021459227];
*** ulrich 
distUlrich = [124.96170813873078,
    154.66628208399433,
    167.2835520647282,
    158.03049296842354,
    145.54102276803377,
    148.26741808204184,
    145.07834022993603,
    175.5432045351172,
    180.47000440051326,
    200.32689527148207,
    201.02801906642554,
    198.64419816361774,
    241.7582823946188,
    267.5549047233409,
    258.79470311327066];
resFreq= [3.87548673744467,
    3.882223405553522,
    4.297444189288633,
    4.689161055087769,
    5.501217536969858,
    5.433132536803452,
    6.308019288300182,
    6.615919318992837,
    6.6785942763744215,
    6.616799421646828,
    6.34977886496341,
    6.207648757687031,
    5.487588888519098,
    4.715777689027931,
    6.340466602323028];
distQ = [124.72035635199708,
    145.02991867237844,
    146.4082527211068,
    147.93372125746546,
    167.25814200069928,
    179.99494012001583,
    175.05126681770503,
    153.87890968114226,
    158.26429060766884,
    200.68291324011406,
    200.30495726106994,
    202.26500695022838,
    266.5418562937232,
    241.89284993476167,
    258.22500547206124];
Q = [1.038395961192426,
    1.097792129896784,
    1.1206389093400269,
    1.1380710486743397,
    1.0946174816010825,
    1.1390329943971778,
    1.20102505209118,
    1.2005827389869437,
    1.4002490143183233,
    1.2988774457271017,
    1.19903066344123,
    1.1911963773533416,
    1.1973296341251949,
    1.3990187243985706,
    1.3982944224772376];
** comparing to experimental values
*** experimental data focuses entirely on apical dendrites 
** some nice new figures 
*** if going this direction, have to rework Ih/Im figure(s)
*** need to flesh out SK figures 

* [2020-6-3 Wed]
** important fix to get numpy working on multiple threads:
import os
os.environ["OPENBLAS_NUM_THREADS"] = "6"
** running all apical segments without SK for allen cell on *my*

* [2020-6-4 Thu]
** towards nice plots for SK
path_name = './497232419/497232419_impedance_measures/apic/';
dist = [];
fVarIn = [];
QfactorIn = [];
ZinResAmp = [];
ZinResFreq = [];
ZinSynchFreq = [];
ZinPeakPhaseFreq = [];
ZinLeadPhaseMinFreq =[];
ZinLeadPhaseBW = [];
ZcResFreq = [];
ZinLeadPhaseBool = [];
list = dir(path_name);
count = 1;
for i = 1:length(list)
if ~list(i).isdir
file = load(strcat(path_name,list(i).name));
for j = 1:length(file.dist)
dist = [dist file.dist(j)];
fVarIn = [fVarIn file.fVarIn(j)];
QfactorIn = [QfactorIn file.QfactorTrans(j)];
ZinResAmp = [ZinResAmp file.ZcResAmp(j)];
ZinResFreq = [ZinResFreq file.ZcResFreq(j)];
ZinLeadPhaseBool(count,:) = file.ZinLeadPhaseBool(j,:);
if isstr(file.ZinSynchFreq(j))
ZinSynchFreq = [ZinSynchFreq NaN];
else
ZinSynchFreq = [ZinSynchFreq file.ZinSynchFreq(j)];
end
if isstr(ZinLeadPhaseBW)
ZinLeadPhaseBW  = [ZinLeadPhaseBW  NaN];
else
ZinLeadPhaseBW  = [ZinLeadPhaseBW  file.ZinLeadPhaseBW(j)];
end
ZcResFreq =  [ZcResFreq file.ZcResFreq(j)];
% dendType = [dendType type];
count = count + 1;
end
end
end
figure()
subplot(3,4,1)
hold on
contAmp = scatter(dist, ZinResAmp, 'bo');
subplot(3,4,2)
hold on
contFreq =scatter(dist, ZinResFreq, 'bo');
subplot(3,4,3)
hold on
contQ = scatter(dist, QfactorIn, 'bo');
subplot(3,4,4)
hold on
contSync = scatter(dist, ZinSynchFreq, 'bo');
path_name = './497232419/noSK/';
dist = [];
fVarIn = [];
QfactorIn = [];
ZinResAmp = [];
ZinResFreq = [];
ZinSynchFreq = [];
ZinPeakPhaseFreq = [];
ZinLeadPhaseMinFreq =[];
ZinLeadPhaseBW = [];
ZcResFreq = [];
ZinLeadPhaseBool = [];
list = dir(path_name);
count = 1;
for i = 1:length(list)
if ~list(i).isdir
file = load(strcat(path_name,list(i).name));
for j = 1:length(file.dist)
dist = [dist file.dist(j)];
fVarIn = [fVarIn file.fVarIn(j)];
QfactorIn = [QfactorIn file.QfactorTrans(j)];
ZinResAmp = [ZinResAmp file.ZcResAmp(j)];
ZinResFreq = [ZinResFreq file.ZcResFreq(j)];
ZinLeadPhaseBool(count,:) = file.ZinLeadPhaseBool(j,:);
if isstr(file.ZinSynchFreq(j))
ZinSynchFreq = [ZinSynchFreq NaN];
else
ZinSynchFreq = [ZinSynchFreq file.ZinSynchFreq(j)];
end
if isstr(ZinLeadPhaseBW)
ZinLeadPhaseBW  = [ZinLeadPhaseBW  NaN];
else
ZinLeadPhaseBW  = [ZinLeadPhaseBW  file.ZinLeadPhaseBW(j)];
end
ZcResFreq =  [ZcResFreq file.ZcResFreq(j)];
% dendType = [dendType type];
count = count + 1;
end
end
end
subplot(3,4,1)
koAmp = scatter(dist, ZinResAmp, 'ro');
legend([contAmp, koAmp], {'Control', 'Block SK'})
subplot(3,4,2)
koFreq =scatter(dist, ZinResFreq, 'ro');
subplot(3,4,3)
koQ = scatter(dist, QfactorIn, 'ro');
subplot(3,4,4)
koSync = scatter(dist, ZinSynchFreq, 'ro');

path_name = './Hay/hay_impedance_measures/apic/';
dist = [];
fVarIn = [];
QfactorIn = [];
ZinResAmp = [];
ZinResFreq = [];
ZinSynchFreq = [];
ZinPeakPhaseFreq = [];
ZinLeadPhaseMinFreq =[];
ZinLeadPhaseBW = [];
ZcResFreq = [];
ZinLeadPhaseBool = [];
list = dir(path_name);
count = 1;
for i = 1:length(list)
if ~list(i).isdir
file = load(strcat(path_name,list(i).name));
for j = 1:length(file.dist)
dist = [dist file.dist(j)];
fVarIn = [fVarIn file.fVarIn(j)];
QfactorIn = [QfactorIn file.QfactorTrans(j)];
ZinResAmp = [ZinResAmp file.ZcResAmp(j)];
ZinResFreq = [ZinResFreq file.ZcResFreq(j)];
ZinLeadPhaseBool(count,:) = file.ZinLeadPhaseBool(j,:);
if isstr(file.ZinSynchFreq(j))
ZinSynchFreq = [ZinSynchFreq NaN];
else
ZinSynchFreq = [ZinSynchFreq file.ZinSynchFreq(j)];
end
if isstr(ZinLeadPhaseBW)
ZinLeadPhaseBW  = [ZinLeadPhaseBW  NaN];
else
ZinLeadPhaseBW  = [ZinLeadPhaseBW  file.ZinLeadPhaseBW(j)];
end
ZcResFreq =  [ZcResFreq file.ZcResFreq(j)];
% dendType = [dendType type];
count = count + 1;
end
end
end
synchFreq = [];
distSynch = [];
for i = 1:length(ZinSynchFreq)
if ~isnan(ZinSynchFreq{i})
distSynch = [distSynch, dist(i)];
synchFreq = [synchFreq, ZinSynchFreq{i}];
end
subplot(3,4,5)
hold on
contAmp = scatter(dist, ZinResAmp, 'bo');
subplot(3,4,6)
hold on
contFreq =scatter(dist, ZinResFreq, 'bo');
subplot(3,4,7)
hold on
contQ = scatter(dist, QfactorIn, 'bo');
subplot(3,4,8)
hold on
contSync = scatter(distSynch, synchFreq, 'bo');
path_name = './Hay/noSK/';
dist = [];
fVarIn = [];
QfactorIn = [];
ZinResAmp = [];
ZinResFreq = [];
ZinSynchFreq = [];
ZinPeakPhaseFreq = [];
ZinLeadPhaseMinFreq =[];
ZinLeadPhaseBW = [];
ZcResFreq = [];
ZinLeadPhaseBool = [];
list = dir(path_name);
count = 1;
for i = 1:length(list)
if ~list(i).isdir
file = load(strcat(path_name,list(i).name));
for j = 1:length(file.dist)
dist = [dist file.dist(j)];
fVarIn = [fVarIn file.fVarIn(j)];
QfactorIn = [QfactorIn file.QfactorTrans(j)];
ZinResAmp = [ZinResAmp file.ZcResAmp(j)];
ZinResFreq = [ZinResFreq file.ZcResFreq(j)];
ZinLeadPhaseBool(count,:) = file.ZinLeadPhaseBool(j,:);
if isstr(file.ZinSynchFreq(j))
ZinSynchFreq = [ZinSynchFreq NaN];
else
ZinSynchFreq = [ZinSynchFreq file.ZinSynchFreq(j)];
end
if isstr(ZinLeadPhaseBW)
ZinLeadPhaseBW  = [ZinLeadPhaseBW  NaN];
else
ZinLeadPhaseBW  = [ZinLeadPhaseBW  file.ZinLeadPhaseBW(j)];
end
ZcResFreq =  [ZcResFreq file.ZcResFreq(j)];
% dendType = [dendType type];
count = count + 1;
end
end
end
synchFreq = [];
distSynch = [];
for i = 1:length(ZinSynchFreq)
if ~isnan(ZinSynchFreq{i})
distSynch = [distSynch, dist(i)];
synchFreq = [synchFreq, ZinSynchFreq{i}];
end
subplot(3,4,9)
koAmp = scatter(dist, ZinResAmp, 'ro');
subplot(3,4,10)
koFreq =scatter(dist, ZinResFreq, 'ro');
subplot(3,4,11)
koQ = scatter(dist, QfactorIn, 'ro');
subplot(3,4,12)
koSync = scatter(dist, ZinSynchFreq, 'ro');
** allen institute cell w/out SK looks a bit like M1 cell, which also doesn't have SK
** hay cell still running on *zn*

* [2020-6-5 Fri]
** continuing plotting code for SK stuff on [2020-6-4 Thu] in Analysis/plotSK.mat

* [2020-6-16 Tue] - outline of TODOs
** Focus on one or two cells:  BBP vs ABA
*** heavier on BBP because of more realistic channel distributions
*** BBP makes a bit more sense than EEE cell: closer to experimental data (I think) and better looking tufts 
*** TODO: look at traces for ABA cell(s) more closely 

** Passive properties
*** TODO: Summarize channel dists and passive properties 
*** TODO: Changing passive properties by +/- 

** Morphology
*** TODO: impedance profiles for BBP and ABA cells with multiple morphologies
*** maybe TODO: Srdjan's suggestion of systematically changing morphology
**** going to do dendrite diameter as passive property
**** option 1 - could characterize existing morphologies based on branching
**** option 2 - could systematically alter a single morphology (e.g. increase length of apical tufts, basal branches, add/remove branches)

** Synaptic integreation
*** Focus just along apical trunk
*** TODO: Flesh out for BBP cell (all segments, save all params)
*** TODO: repeat for ABA channel distribution for comparison
*** TODO: Plot impedance measures for just main trunk of both models

** DONE: ask Joao about his modified PT cell

* [2020-6-17 Wed] - working way through todo from [2020-6-16 Tue]
** running chirp on modified PT cell from Joao on *pt*
*** kind of bizarre results, have to dig into a bit
*** fucked something up when modifying cell params - consistently fires sans input 
** working on computing number of branch points 
N = 0
for sec in h.allsec():
    if len(sec.children()) == 2:
        N = N + 1
** modified Hay cell template to load in SWC cells and added all Suter/Shepherd morphos to repo
** ways to quantify morphology:
*** distance of center of mass of bifurcation points to soma 
*** bifurcation "torque" on soma 

* [2020-6-18 Thu] - same as yesterday 
** set up Suter morphologies + Hay biophys to run on neurosim machines - *chirpSuterMorphs.py*
** Added code for finding number and positions of bifurcation points 

* [2020-6-19 Fri] - " "
** only ran chirp on one morph last night - gotta run more but its a lot of segments
** code for putting all allen morphologies in same place 
import os
model_ids = [497229117, 491766131, 497232312, 485591806,
		497232419, 497232429, 496930324, 497232564, 497232839, 497232946,
		497233049, 497233139, 497233307, 497229124]
for id in model_ids:
    files = os.listdir(str(id))
    for filename in files:
        if filename[-3:] == 'swc':
            os.system('cp %s/%s ./allen_morphs' % (str(id),filename))

* [2020-6-22 Mon] - morphology and Ih dist 
** a few suter-shepherd morphologies still running on neurosim machines 
** testing out allen morphologies on zn 
** added a few utils for computing morphology stats     

* [2020-7-9 Thu] - traces for synchronous frequency 
** using Kole cell, best fit to data 

* [2020-7-13 Mon] - focusing just on main trunks 
** trunks
*** that's the only place data has been collected
*** sam's cell is much more reasonable when just looking at that 
*** including sam's cell allows to easily look at effect of different Ih models
*** also should make looking at influence of morphology a bit more sensible
