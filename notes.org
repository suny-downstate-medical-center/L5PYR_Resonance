* [2020-3-7 Sat] - abstract draft
**
Pyramidal neurons in neocortex have complex input-output relationships that depend on their morhpologies, active and
passive channel distributions, and the nature of their inputs, and which cannot be replicated by their simple 
integrate-and-fire analogs. Measures of the complex impedance response across neurons' dendritic arbors, such as 
resonance and the phase response, can provide intraneuronal functional maps reflecting their intrinsic dynamics and excitability. 
Experimental studies of dendritic impedance show that pyramidal neurons in hippocampal CA1 and neocrotex exhibit distance-dependent
relationships for the resonance and the phase responses with respect to the soma. We present a detailed study of
the complex impedance profiles of biophysically detailed models of neocortical layer 5 pyramidal neurons from 
across neocortex.  While none of these models were designed to fit the impedance response directly, two closely 
recapitulate the distance-dependent relationships of the complex impedance response. The  impedance response is also
dynamically tunable via the activity-dependent expression of voltage-gated ion channels in the dendrites, like HCN channels
and M- and A-type K+ channels. We investigated the roles of different voltage-gated ion channels in tuning the impedance response,
showing that changes in HCN and M-type K+ channel conductances, both locally and across the dendritic arbor, can modulate the
impedance response, producing a wide range of profiles.  We also clearly demonstrate the impedance profile's dependence on cell
morphology.  Although a number of cell models exhibit impedance profiles that diverge from the experimental data, some have 
biologically plausible impedance profiles which may reflect regional variation or cells with different histories and therefore
differently tuned impedance responses. Given the dearth of experimental data on resonance in neocortical pyrmaidal neurons 
from different cortical regions, we hypothesize that neocortical pyramidal neurons have more diverse impedance profiles 
than previously assumed.

* [2020-3-10 Tue] - Introduction outline (cont to [2020-3-13 Fri])
** Neocortical pyramidal neurons
*** Main oupuuts of neocortex 
**** something about I/O relationship
*** Diversity:  
**** Naka2016-rn
"Before surveying the existent literature on layer 5 (L5) inhibitory neurons, we briefly review current
knowledge on the connectivity and physiological properties of L5 pyramidal cells (PCs), as it
provides important context for understanding L5 inhibitory circuits. One feature that distinguishes
L5 from other cortical layers is the diversity of its PCs, which send a myriad of long-range
projections to other cortical and sub-cortical structures (Levesque1996-hf, Veinante2000-gg,
Hattox2007-km, Aronoff2010-do, Harris2015-te). This simple anatomical fact establishes L5 as a primary 
cortical layer involved in the top-down control of other brain areas. Exactly how L5 circuits parse information to 
influence downstream circuits and control behavior is one of the central questions in neuroscience. Even though L5 is
conventionally thought of as primarily an output layer, L5 PCs also receive direct thalamocortical input (Agmon1992-mi,
Meyer2010-pe, Wimmer2010-lq, Oberlaender2012-fh, Rah2013-kr) and can be driven by thalamic activity alone (Constantinople2013-bq), 
suggesting that L5 is an important input layer as well. L5 PCs also receive input from all cortical layers and
are thus uniquely positioned to integrate nearly every local and afferent pathway in the cortex
(Markram2015-zg). Without exception, signals transmitted via these pathways invoke a mixture
of synaptic excitation and inhibition (reviewed in Isaacson2011-qs). Thus inhibition
onto L5 PCs, the focus of this review, is crucial for nearly every aspect of L5 function."
*** Active conductances
**** One of the main distinguishing factors between PT and IT neurons is the greater expression of 
voltage-gated ion channels, like HCN. Oswald2013-lh
**** "In responseto dynamic stimuli,  COM neurons act as low-pass filters, whereas CPn neurons act 
as bandpass filters, resonating in the theta frequency range (3– 6Hz)." Dembrow2010-lb
**** mediate coincidence detection Das2015-mh, Dewell2019-ra
**** Ih has also been shown to "interact with somato-dendritic structure to determine frequency response to
weak alternating electric field stimulation" Toloza2018-vh
****  "the inhibitory action of Ih was caused by its interaction with the delayed-rectifier M-type K1 current. In this manner, Ih can
enhance spike firing in response to an EPSP when spike threshold is low and can inhibit firing when spike threshold is high." George2009-ad
***** check w/ salva/joao - pretty sure this is the paper proposing that Ih modulation determines planning versus action 

** Impedance as comprehensive tool for studying subthreshold dynamics
*** As mentioned above, PT cells act as bandpass filters as characterized by their impedance profiles.
*** some  background on impedance Puil1986-uv, Jaffe1999-pb: 
**** complex function (resistance and reactance) from which can calculate the amplitude and phase 
**** input vs transfer
**** resonance - peak |Z| at some frequency - driven by inductive reactance imparted by voltage-gated ion channels like HCN, M-type K+, and K-type K+ channels
**** resonance strength (Q-factor as in Dewell2019-ra)
**** transfer frequency - resonance frequency of the transfer impedance amplitude 
**** leading phase response - changes in V preceed changes in I, driven by the balance of capacitive and inductive reactances
**** synchronous frequency - frequency at which V and I are synchronous

*** importance of impedance
**** resonance:  "Apart from invertebrate giant axons from where initial evidence came, direct evidence for the presence of electrical resonance
also came from experiments on numerous neuronal subtypes of the central and peripheral nervous system (Crawford1981-av, Puil1988-ca,
Hutcheon2000-gs, Pike et al., 2000). Subthreshold resonance in local responses and in dendrite-to-soma transfer endows neurons with the ability to
discriminate inputs based upon their frequency content."
**** phase response: "the impedance phase profile quantifies the temporal dynamics between voltage and current. It has been shown that presence
of inductive reactance in neuronal membrane causes the voltage response to lead the injected oscillatory current. The balance between capacitive and
inductive reactances determines both the optimal lead frequency and the frequency bandwidth over which the voltage leads the current, providing a
potential mechanism by which the subthreshold membrane dynamics of the neuron may maintain a phase relationship with an ongoing oscillation
(Mauro1961-ys, Cole, 1968, Sabah1969-at, Mauro1970-km, Hu2002-ga, Hu2009-qb, Ulrich2002-dd, Cook2007-cz, Narayanan2008-zw,
Vaidya2013-sx)." Das2017-nz
**** relation between subthreshold resonance and suprathreshold resonance via STA Das2015-mh
*** By determining these factors across the dendritic arbor, we can produce intraneuronal functional maps characterizing
the neuron's intrinsic dynamics and excitability Narayanan2012-hn 

** Experimental evidence of location dependence 
*** relationships between aspects of the complex impedance and distance from the soma have been described in pyramidal neurons from CA1 and neocortex
Das2017-nz, Narayanan2007-gw, Ulrich2002-dd, Dembrow2015-zb
**** first observed in PT neurons from somatosensory cortex.  Saw roughly linear relationships between distance and transfer impedance amplitude with
strength increasing with distance from the soma. Ulrich2002-dd
**** Dembrow et al additionally saw distance-dependence in the resoance frequency and phase response Dembrow2015-zb
**** in both above studies resonance and synchronous frequencies were found in the theta range (3-10 Hz), but also sampled a fairly small fraction of the 
dendritic arbor (120-280 um and 200-600 um respectively)

** dynamic tunability and degeneracy impedance profile
*** Tunability
**** dynamically tunable subthreshold resonance along the neuronal topograph (Magee2005-oq, Narayanan2007-gw, Narayanan2008-zw, Sjostrom2008-sz, 
Hu2009-qb, Rathour2012-am, Rathour2012-bu) Das2017-nz
**** LTP induces changes in impedance profile Narayanan2007-gw
*** Degeneracy:
**** "With reference to sub- and supra-threshold frequency selectivity in neurons, several studies have demonstrated multi-channel regulation
of somatodendritic spectral selectivity. Specifically, studies pertaining to sub-threshold resonance and phase dynamics have shown that impedance properties 
mediated by HCN channel could be significantly modulated by the presenc eof other sub-threshold conductances and by morphological characteristics 
(Hutcheon2000-gs, Hu2002-ga, 2009, Narayanan2008-zw, Zemankovics2010-zt, Rathour2012-bu, Dhupia2014-ad, Rathour2016-vv). While these studies
elucidated the role of individual conductances in modulating sub-threshold impedance properties, computational
frameworks have provided direct lines of evidence for degeneracy (Figures 2B,C) in active dendritic spectral tuning (Rathour2012-bu, Rathour2014-pl)." Das2017-nz
***** mainly studied in hippocampal neurons
*** role in disease: Ih altered in temporal lobe epilepsy Shin2008-za, Marcelin2009-vy

* [2020-3-12 Thu] 
** fairly satisfied w/ intro outline
** going with frontiers in neuroscience as target journal (in part becasue formatting is easy)

* [2020-3-13 Fri] - further along with intro
** may want to consolidate explanation and importance of impedance while separating amplitude/resonance and phase

* [2020-3-14 Sat] - finished with draft of intro, methods outline  (con't to [2020-3-16 Mon])
** General stuff:
*** All models have perviously been published and are freely available on modelDB
*** Simulations were performed using NEURON in Python Hines2009-qx
*** Code for simulation, analysis, and visualization was written in Python and MATLAB (Natick, Ma) and is available on GitHub (https://github.com/suny-downstate-medical-center/L5PYR_Resonance)

** Focus on 5  models
*** Kole2008-aj
**** Wistar rats, 2-4 weeks old, somatosensory cortex
**** channels densities were adjusted primarily to account for perisomatic spiking actiivity:
"The model included a high-voltage-activated K+ channel (Kv)16, a faster
low-voltage activated Kv1-like K+ channel (‘Kv1’), as described49, and a slowly-activating and non-inactivating M-type K+ channel (‘Km’)16. Potassium
channel densities were adjusted to obtain fast action potential repolarization
and large amplitude afterhyperpolarizations in the distal AIS13. The density of
Kv, Kv1 and Km were set to 20, 100 and 5 pS mm–2, respectively, in the soma,
dendrites and inter-nodal sections, and increased linearly with distance from
the axon hillock in the AIS to 2,000 pS mm–2 in the distal AIS and nodes for
Kv and Kv1, and to 50 pS mm–2 for Km. The K+ reversal potential was set
to –85 mV. Ih channels were included in the soma and dendrites with an
exponential increase in density with distance from the soma, and kinetics and
voltage dependence as described previously50." 50: Kole2006-bm
*** Acker2009-yj
**** Sprague–Dawley rats (postnatal day 21 [P21] to P33), frontal cortex
**** fit using voltage-sensitive dye imaging focusing on back-propagating APs in basal dendrites 
"The model was fit to experimental data using the
following approach: AP waveforms from simulations were analyzed
and amplitude data were averaged over the basal dendrites (Fig. 6B).
Half-widths and latencies were calculated in exactly the same way as
with the optical AP waveforms (Supplemental Fig. S5) and were
averaged over the model basal dendrites. The model data averaged
over the basal dendrites were taken as the fit data. AP amplitude ratios
TTX/Control and AP amplitude ratios 4-AP/Control were used to fit
the model.
**** channel distributions
. . . Basal dendritic sodium and A-type potassium conductance
distributions were assumed linear and were systematically varied over
a wide range over a four-dimensional parameter space to determine
the best-fit values of these model parameters (Supplemental Fig. S7).
Other parameters, such as delayed rectifier potassium conductance,
leak conductance, and somatic conductances, were manually varied to
find the lowest possible overall model fit. This was done by first
determining the sensitivities of AP amplitudes, half-widths, and latencies
 to each model parameter and using this information to modify
parameters and improve fits before finally fitting the basal sodium and
A-type potassium distributions. An automated optimization approach
based on a genetic algorithm (Keren et al. 2005), if feasible, would
allow a larger parameter space to be searched exhaustively and could
potentially lead to improved overall fits, something that could be
pursued in future studies."
*** Hay2011-if
**** P36 Wistar rat 
**** model fit to perisomatic and backpropagating spiking
**** channel distributions:
"Dendritic channel distribution. All dendritic channels
except for Ih, CaLVA and CaHVA were uniformly distributed. Ihchannels were distributed on the apical dendrites using an
exponential density function suggested in [13]: gsoma: ð{0:8696z 2:087: e x
323Þ, where x is the distance from the soma in mm, with gsoma = 1 pS/mm2 .
The density of Ih on the basal dendrites was set to be uniform as suggested in [10]."
10: Nevian2007-gw  13: Kole2006-bm
*** Neymotin2017-dr
**** might leave out or stick in supplements, both because mice and wonky
**** Mice (strain: C57Bl/6J; Jackson Laboratories) postnatal day (P) 21,
**** channel distributions:
Somatic and dendritic compartments
additionally contained CaL, CaN, BK, and HCN channels. KD was
present in the soma and at 20 times somatic density in the axon. The
axon contained only leak, Na, KA, Kdr, and KD ion channels. Basal
dendrites contained uniform density of all their channels. Apical
dendrite HCN channel density increased exponentially with distance
from soma until reaching the nexus with apical dendrite tufts, where
the HCN channel density plateaus at 0.00565 S/cm2 (Harnett et al.
2015). This exponential increase of HCN channel density within the
main apical trunk was set to gh·exp(d/h), where d is distance of the
apical dendrite compartment from soma and h is the length constant,
defined as dnexus/log(0.00565/gh), dnexus is distance from soma to
nexus (300 m), and gh is somatic HCN channel density. Harnett2015-sj
**** fitting was mostly focused on preisomatic spiking activity:
. Focusing on spike times, we also
provided some fitness function redundancy by using both
overall spiking rate (F–I), along with spike timing [instantaneous firing rate (IFR)]. The degree of redundancy of these two
measures was demonstrated in the final archive (Fig. 2, A and
C). We included subthreshold fit, determined initially by
PRAXIS, as an EMO fitness function as well so as not to lose
fitness for this criterion while optimizing for the others.
*** allen institute cell(s) Reimann2013-mg, Shai2015-ff, Markram2015-zg
**** based on data from primary visual cortex (V1) of C57BL/6 mice, P35-62
**** Modified version of an earlier model \citep{Hay2011-if}
**** major change to the original:"We change the Ih conductance to be constant in the dendritic tree, instead of exponentially increasing as a function of distance from
the soma, to fit the subthreshold data. The change to Ih conductance accounted for the differences between dendritic sag, dendritic resting membrane potential relative 
to the soma, and dendritic input resistance in our experiments compared to those in rat L5 somatosensory cortex."


** simulations 
*** Impedance Profiles:
****Each dendritic segment was stimulated with a subthreshold chirp-waveform current injection, and membrane potential was recorded
from the site of stimulation and at the soma.
***** For generating impednace profiles, the chirp-waveform instantaneous frequency changed linearly spanned 0.5-50 Hz over 50s.
***** For investigating bimodal phase response, the chirp-waveform spanned 0.5-100 Hz over 100s.
***** in experiments, typically 0.5-20 Hz (citations)
**** We computed Z$_{in}$ and Z$_c$ and associated measures from each of the recorded waveforms via \emph{Eq. 1-3}.
***** focused on six measures of the impedance response: 1) $|$Z$_{in}|$ resonance amplitude, 2) $|$Z$_{in}|$ resonance frequency,
3) $|$Z$_{in}|$ Q-factor, 4) $|$Z$_{c}|$ transfer frequency, 5) $\Phi_{in}$ leading phase bandwidth, and 6) $\Phi_{in}$ synchronous frequency. 
*** Influence of morphology
**** same parameters as above, used biophysics template and three morphologies from Hay2011-if
*** Ih and Im 
**** used cell model from Kole2008-aj, only one that had Ih and Im distributed throughout the dendritic arbor.
**** varied Ih and Im conductance in 5* increments up to +/- 20* either at the branch level or across the whole dendritic arbor 


* [2020-3-15 Sun] - bimodal phase response
** L5PCtemplate[0].apic[91].mat 
* [2020-3-16 Mon] - methods con't, added in sam's cell, going to add in allen institute
* [2020-3-17 Tue]
** bimodal phase response, a couple OK examples, not sure if it warrants figure / mentioning
* [2020-3-19 Thu] - working on putting figures together properly
* [2020-3-20 Fri] - finished up figures
** allen exmaple 1: 497233139, 2: 497232419
* [2020-3-21 Sat] 
** table of basic model info
* [2020-3-23 Mon] - methods done, on with results
** done with results text, still need to do figure captions
* [2020-4-6 Mon] - moved and cleaned up paper
** moved paper to overleaf, removed paper code from this repo - now just code and these notes.
*** 'moved paper to overleaf, removed paper code from this repo - now just code and notes'

* [2020-4-10 Fri] - discussion notes
** add to intro: Additionally, HCN plays an important role in
regulating neuronal excitability by setting resting membrane
potential (RMP) [5,6]

** biological plausibility
*** rat models all seem biologically plausible
**** resonance frequency, transfer frequency, synchronous frequency, and leading phase bandwidth all increase
 with distance from the soma along the dendritic arbor.
**** Two models, Acker & Antic and Hay et al., 2011, conform well to experimental data in L5 PT and resemble hipp PT
***** resonance and transfer frequencies in the theta range
***** synchronous frequencies in delta/theta range
***** roughly linear relationships with distance
**** third model (Kole et al) is very different, but not necessarily implausible
***** resonance frequencies from 10-50 Hz
***** transfer frequencies from 10-25 Hz
***** synchronous frequencies from 2-35 Hz
***** farthest dendritic compartment of this neuron is 1500 microns from the soma, in experimental studies of L5 PT cells,
farthest out is 700 microns (Dembrow2015-zb, Ulrich2002-dd)
***** at these distances in this cell, resonance frequencies are from 10-18 Hz, transfer frequencies from 11-15 Hz, synch freq 4-12 Hz, 
not too far off from experimental values!! (Dembrow2015-zb).

*** Neymotin et al - may be biologically possible
**** only model in which HCN channel density plateaus in the apical tufts
**** resonance transfer and synchronous frequencies below the nexus of the apical tufts are similar to experimental values and model
 was validated looking at somatic input resonance

*** dendritic impedance profiles for the ABA cells more of a mixed bag
**** 4927233139
**** resonance frequencies between 2-15 Hz, but resonance strength is so low that it would be indistinguishable from noise in experimental preparations
**** seemingly no relationship between input resonance frequency and transfer frequency to the soma
**** synchronous frequencies are all >35 Hz, which is not seen experimentally
**** 497232419
**** like Neymotin cell, input resonance frequency also plateau, but resonance strength is comparable to other cells studied here
and transfer frequency is not far offf from experimental observations
**** phase response is, as in the other ABA model, is fairly unusual

*** should be noted that these models were intended for use in large network simulations
**** constraining these models focused mainly on measures of perisomatic firing characteristics
**** ABA models deliberately simplified the channel distributions in the dendrites

** morphology, channel distribution, and dendritic impedance 
*** Although one of the ABA cells did not exhibit strong resonance, and neither may have biologically plausible impedance profiles 
by its constant channel densities in the dendrites they demonstrate that gradients in voltage-gated ion channel density are not 
necessary for gradients in the dendritic impedance profile.
**** The channel distributions in these models do suggest that realistic phase responses may require realistic channel distributions
*** The impedance profiles of the three cells with the same channel distributions (\emph{Fig. 7}) demonstrates that morphology has a
direct impact on all location-dependent relationships in the denritic impedance profile.
**** suggests that dendritic pruning seen during development \cite{Riccomagno2015-pq} and dendritic damage seen during traumatic 
brain injury \cite{Gao2011-xo} have impacts on the impedance profile of the entire neuron.
***** dendritic pruning during development may be one mechanism for tuning the impedance profile.

** Tunability and degeneracy of the impedance profile 
*** (from intro) Tunability
**** dynamically tunable subthreshold resonance along the neuronal topograph (Magee2005-oq, Narayanan2007-gw, Narayanan2008-zw, Sjostrom2008-sz, 
Hu2009-qb, Rathour2012-am, Rathour2012-bu) Das2017-nz
**** LTP induces changes in impedance profile Narayanan2007-gw
*** (from intro) Degeneracy:
**** "With reference to sub- and supra-threshold frequency selectivity in neurons, several studies have demonstrated multi-channel regulation
of somatodendritic spectral selectivity. Specifically, studies pertaining to sub-threshold resonance and phase dynamics have shown that impedance properties 
mediated by HCN channel could be significantly modulated by the presenc eof other sub-threshold conductances and by morphological characteristics 
(Hutcheon2000-gs, Hu2002-ga, 2009, Narayanan2008-zw, Zemankovics2010-zt, Rathour2012-bu, Dhupia2014-ad, Rathour2016-vv). While these studies
elucidated the role of individual conductances in modulating sub-threshold impedance properties, computational
frameworks have provided direct lines of evidence for degeneracy (Figures 2B,C) in active dendritic spectral tuning (Rathour2012-bu, Rathour2014-pl)." Das2017-nz
***** mainly studied in hippocampal neurons
*** (from intro) role in disease: Ih altered in temporal lobe epilepsy Shin2008-za, Marcelin2009-vy
*** role in oscillations and cross-frequency coupling 
We found that tuning Ih in different cell classes altered network rhythms, providing independent control for
gamma and theta oscillations. Ih modulation also set the level of cross-frequency coupling and timing of gamma
generation relative to the theta cycle. Ih modulation may therefore be an important control point with functional
consequences, since these dynamics are hypothesized to contribute to learning and cognitive function [19–21]. - Neymotin2013-cm
*** we looked at two paradigms for dynamically tuning the impedance response by changing the conductances of HCN and M-type K+ channels at the branch level and
across the whole dendritic arbor in one PC model
**** Changing either HCN or M-type K+ conductance across the whole arbor changed the location-dependent relationships of the impedance profile 
**** We also found that both local and global changes to both HCN and M-type K+ conductance can have produce a wide array of impedance profiles
while also allowing for degeneracy.
***** For instance, changing HCN and M-type K+ conductance by $\pm20\%$ produces a range of impedance profiles, with resonance amplitude varying by over
45M%$\Omega$, resonance frequency over 10 Hz, transfer frequency by 5 Hz, and synchronous frequency by over 6 Hz (\emph{Fig. 9S, T, V, W}). Many of the
possible impedance responses in these ranges can, however, be achieved by multiple combinations of changes to HCN and M-type K+ conductance.
*** While HCN channels are necessary for subthreshold resonance in PCs, M-type K+ channels are just one of the voltage-gated ion channels with
inductive reactance capable of modulating the impedance response; therefore, we have only scratched the surface of possible mechanisms by which 
neurons may dynamically tune their impedance response.  The degeneracy of the impedance response, however, implies that neurons may have multiple 
ways to maintain their impedance profiles in response to Ih modulation, brought about through participation in network oscillations or through pathophysiology.

* [2020-4-13 Mon] - srdjan comments 
** This looks like an attack on strawman. In order to make this statement scientific, the abstract should:
[1] Summarize/state very briefly the published impedance profiles that can be found in dendrites of neocortical L5 pyramidal neurons?;
and [2] Specify in which aspect is your set of impedance profiles different from the “previously established set”.

** Who published the map of impedance profiles in dendrites of pyramidal neurons? Which map is different from the map you hypothesize. 
In which aspect is your hypothesis different from the “previously established impedance profile”?
*** all fair questions, but does the "who" really belong in the abstract?

** The balance of excitatory and inhibitory inputs . . . 
Not true. Active dendritic conductances also play important role.
*** will definitely add that

** Distinguish PCs from IT cells? - I thought that IT cells are PC cells!
Did you meant to say PT instead of PC?
*** Does PT really make sense outside of motor cortex?  PC is pyramidal cell, need some way to distinguish from commissural/IT 

** Ruth Empson does not recognize PT and IT cells. 
Instead, she divides L5 projection pyramidal neurons of the M1 cortical region into 4 categories: 
    1 corticospinal (CSp) neurons, 
    2 corticothalamic (CTh) neurons, 
    3 commissural projecting corticostriatal (CStr) neurons,
    4 commissural projecting corticocortical (CC) neurons.
*** very helpful, but how best to refer to the non-commissural neurons outside of M1 then?

** In the year 2013, a separation based upon two broad projection neuron types (PT and IT) seems limiting and dated (Ruth Empson)
*** seems commissural nuerons don't have location-dependent impedance profiles, but Csp and CTh are (or however we might choose to distinguish them)

** Srdjan is totally confused. Nikolai Dembrow describes COM and CPn pyramidal neurons [ref 9]. 
Craig Kelley somehow uses PC and IT nomenclature. What is the relation between Dembrow and Kelley nomenclatures?
*** maybe subcortical project neurons . . . 

** Unnecessary and Irritating repetition of the term “complex”. We get it -  it is complex. We just need to hear it once in one of the sentences.
*** OK

** (REF) for impedance equations
*** can try to find references, but seems like citing Ohm or Fourier

** It sounds very intellectual, but has no meaning to me. Could you please define “inductive reactances”, before you use it in explaining your point?
*** fair, will add an explanation

** In the context of dendritic integration or synaptic integration, the transfer frequency (what is symbol of Transfer Frequency – Zt#^&?) specifies the
frequency of EPSP leading phase and/or dendritic spike leading phase, at which the efficacy of transfer between the initiation site and the soma is the 
most optimal. For example, two EPSPs of identical amplitude, which propagate from dendrite to soma, will have different somatic amplitude depending on 
the frequency of heir leading phases. 
*** no symbol for transfer frequency, iTo join the video meeting, click this link: https://meet.google.com/xuw-bsyp-pgp
Otherwise, to join by phone, dial +1 320-412-3603 and enter this PIN: 810 319 845#t's the peak frequency of the transfer impedance amplitude
*** not entirely sure if we're talking about the same transfer frequency or using phase in the same manner here?

** If my text above is correct, then we should include this explanation at this point of manuscript, 
because there are readers who are interested in biology primarily, and not physics savvy.

** This Introduction has left us hanging. What is this paper about? I believe, here it is necessary to state two things: 
[1] What is the GAP in knowledge or interesting questions, which remains to be investigated? 
and 
[2] What have we done to address this interesting question - briefly in broad strokes?
*** totally fair 

** The FIRST model [ref 17] does not appear in Fig. 1.
What is the point of calling it The FIRST?
This mismatch between Methods and Figures is a mistake. Readers do not have time to play detective games.
If you call something FIRST, it must be addressed first in the Results section, in Figure 1. I understand that you consider Fig 1 as a Methods figure, 
and Fig. 2 as a Result figure, however I strongly advise that you address FIRST MODEL in the FIRST FIGURE. 
Or change the ordering of models in your narrative, make Acker2008 the “first model”. Also, start the Results section with the Acker figure – Fig. 3.
*** so you touched on why I have it ordered that way, but if confusing will reword/structure things 

** What constitutes a "dendritic segment". Is this based on the, for example n=9 segment feature of NEURON?
*** should change segment -> compartment (more universal term)

** In Figure 1, the amplitude of the injected Chirp current was equal or less than 2 pA. Two picoAmps of current has little or no physiological meaning. 
How can anyone believe that voltage-gated channels are activated with voltage swings of only 0.1 mV (one tenth of one millivolt)?
*** I understand the skepticism, but impedance should be fairly independent of current amplitude as long as we're below spiking threshold, since it's a ratio 
*** NEURON's built in impedance tool looks at much smaller excursions in membrane potential (I believe uV)
*** if voltage-gated ion channels like HCN weren't activated, there wouldn't be any resonance 

** The Figure1 Modeling data has no implications on neuronal physiology, unless the RANGE of current amplitudes were carefully investigated. 
To account for this criticism, I would plot 3 complete Impedance Profiles for the same cell, where the Chirp current amplitude was set at 2 pA, 20 pA and 50 pA.
Then I would publish a conclusion on whether the conclusions of this paper depend, or do not depend, on the Chirp current amplitude. 
Alternatively, how exactly the conclusions of the current paper depend on the Chirp current amplitude, displayed right there in Figure-1. 
*** can include if above argument is not convincing.  

** Fig. 1. The color of the “basilar dendrite” line in the graphs I-L is plum-purple and the color of the dot on cell morphology is sky blue.
 Could you please fix this? Fig. 1. The measurements that should describe OBLIQUE branch  have been made at the branch point between apical trunk 
 and oblique branch.  Could you please move the stimulation and recording site to the middle of the oblique branch, and plot the middle-branch data? Thanks, Srdjan.
*** for sure can move oblique example away from branch point 
*** surprised at the color difference, can't see it on my machine.  I-L look different to C?

** suggestions from discussion with srdjan 
morphology - systematic changes - length and radius
voltage clamp 1 compartment each conductance
EPSP frequency vs soma V 
different current injections
kruschavatz
antic@uchc.edu 

* [2020-4-15 Wed] - working on srdjan's suggestions
** running examples of higher amplitude current injections on neurosim machine
*** amp * 10: very much same results ("noisier" impedance measures, but think it's due to sampling rate (greater voltage excursion in less time))
*** amp * 20: start getting into territory where excusions are asymmetric about resting membrane potenital 
*** perfectly replace traces in Figure 1 w/ traces from amp*10, but impredance metrics remain virtually unchanged
** new branch called neurosim_machine 
** seems like for changing morphology systematically, only need to deal with L, not pt3d

* [2020-4-20 Mon] - finished draft of discussion 

* [2020-4-23 Thu] - fundamental dend notes
** Bill's questions about dends to Arnd:
Hi Bill,
sorry for the late reply. Of course these are excellent questions, but they tend not to have easy answers. Here is an attempt:
a couple of very basic questions:
1. for passive properties:
We typically assume that cable properties are uniform across the dendritic tree and differ in soma (and axon).
We often assume that passive membrane properties are uniform across the dendritic tree and soma, and differ in the axon. 
We then allow for differences between soma and dendrites, and sometimes between different dendritic regions, 
to account for the membrane area in spines (whose density is inhomogeneous). 
To do this, we scale up Cm and scale down Rm to ‘collapse’ the spine membrane into the dendritic shaft membrane, 
effectively assuming that the spine membrane has the same passive properties as the dendritic shaft membrane.

The main reasons for these choices are that we do not know better, at least not with much certainty.
We tend to accept that axons, especially myelinated ones, should be treated differently. 
And we use our knowledge about different spine densities. But there is no easy way to prove locally inhomogeneous Rm (or Ri) in dendrites. 
In this paper https://www.ncbi.nlm.nih.gov/pubmed/11533136 we wrote:
"A final potential source of error which is very difficult to assess quantitatively is the structure of the model itself.
We constructed our compartmental models with the simplest possible assumption, namely that the passive parameters are homogeneously distributed. 
While this assumption proved adequate to constrain our models within a reasonable margin of error, it is difficult in principle to rule out alternative models with more complex
distributions of parameters. 
The lower value of somatic vs. dendritic Rm assumed in the model of Purkinje cells constructed by Rapp et al. (1994) is not necessarily inconsistent with our models since it
could be due to a shunt conductance associated with somatic microelectrode recording. 
Although two-site recording can give an indication of inhomogeneities in the passive parameters, it cannot clearly distinguish between alternative inhomogeneous models, 
e.g. between an inhomogeneity in Rm (Stuart & Spruston, 1998; London et al. 1999) and an inhomogeneity in Ri. 
To exclude or confirm an inhomogeneous distribution of Ri in dendrites, simultaneous recording from at least three sites would be required (Kleinle, 1998). 
We conclude that future refinements of passive models of neurons will depend primarily on improved acquisition of morphological data, 
for example by combining high-resolution confocal microscopy, deconvolution, and novel image processing techniques allowing automated reconstruction of neuronal morphology, 
as well as on multi-site recordings."

What evidence do we have for this from dendritic recordings?
Not much. It is impossible to prove precise uniformity of passive parameters, because even patch-clamp recordings are noisy and morphological reconstructions are imperfect. 
What we do have are models with uniform parameters across soma and dendrites that fit data from multi-site patch-clamp recordings, suggesting that nonuniformity, 
which must exist to some degree, is not severe in these cases.
This (otherwise very good) paper https://www.ncbi.nlm.nih.gov/pubmed/9570781 claims to provide evidence for nonuniform Rm in dendrites. 
However, with hindsight we now think that this is most likely due to their old-style pharmacological block of I_h with cesium, which is not as complete and specific as with ZD7288. 
Thus, in this paper the well-known distance-dependent increase in I_h density 
(https://www.ncbi.nlm.nih.gov/pubmed/9742133 https://www.ncbi.nlm.nih.gov/pubmed/10805715 https://www.ncbi.nlm.nih.gov/pubmed/11160518 https://www.ncbi.nlm.nih.gov/pubmed/16467515 ) 
may show up incorrectly as a decrease in Rm with distance from the soma.

Since most are done with patch how accurate are those assessments? Is rapid dialysis in small spaces a problem? Has this been done with voltage indicators?
Patch at least means that there should be no shunt conductance associated with the electrode, which can happen with sharp recordings as discussed above in the context of Rapp et al. (1994). Rapid dialysis may be a problem for measurements of Ri, and indeed values of Ri vary quite a lot across studies. Larger organelles like mitochondria and ER, whose excluded volume and added tortuosity increase intracellular Ri above the values for bulk electrolytes, do not migrate en masse to the patch pipette, howerver, at least as long as the series resistance remains small (which it should for good recordings). The more likely reason for uncertainty in Ri are over- or underestimated dendritic diameters, however. Voltage indiators are noisy, and therefore measuring the small subthreshold voltage responses needed to infer passive parameters (to avoid activating voltage-gated channels) with voltage-sensitive dyes would be very difficult.
Has it been shown in pyramidal cells that basilar dends vs apical oblique vs apical main vs tufts have same properties? (or differ in some systematic way?)
For passive properties: no, to my knowledge.
There are vastly differing estimates in spines -- think Rin 50Mohm vs 500Mohm (carnevale paper is one; forget other) -- any opinion on which to accept?
Do you mean estimates of the spine neck resistance? My favourite paper is https://www.ncbi.nlm.nih.gov/pubmed/24657968 because it links morphology and function of individual spines (Fig. 3) and uses superresolution microscopy, yielding exquisite morphological data. It shows that there is a diversity/degeneracy of spine neck resistances. Some filopodia-like spines have spine neck resistances of 500 MOhm, but most do not, and the average spine neck resistance (Fig. 4) is consistent with the early estimates https://www.ncbi.nlm.nih.gov/pubmed/8614831

2. for active properties:
Parameter degeneracy (non-uniqueness of solution) is assumed in sims and can be demonstrated in models eg our jnphys 2017 paper --
https://eur01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fpaperpile.com%2Fshared%2FljIkpv&amp;data=02%7C01%7C%7Cdc8a3e9634324e2a2c5f08d7bd2e3fc1%7C1faf88fea9984c5b93c9210a11d9a5c2%7C0%7C0%7C637185878650424699&amp;sdata=WweMkFsqP9HxRbzjC3vEI80BxS9s4sF39FRu9XUZNTs%3D&amp;reserved=0
Mostly this is simply because expts are only done in soma so all dend params are underconstrained.
However, "real" degeneracy is also believed to exist but is mostly discussed by marder and colleagues in STG; they have
experimental demonstrations and also have explanation (evolutionary advantages of not having everyone like everyone else so
that everyone dies when env changes)

Q: has anyone demonstrated mammalian dend or somatic channel degeneracy experimentally?
Yes, in dissociated Purkinje cells https://www.ncbi.nlm.nih.gov/pubmed/15814781 , and there are indications in pyramidal neurons as well https://physoc.onlinelibrary.wiley.com/doi/full/10.1113/jphysiol.2007.146597
Real degeneracy is believed to exist and to be exploited by the brain https://www.ncbi.nlm.nih.gov/pubmed/18982095 but yes, not many people have demonstrated it experimentally in mammalian neurons.
Does this answer your questions? I know that some of the answers are not satisfactory. Do you have additional questions?

Stay safe,
Arnd

* [2020-4-30 Thu] - Ia, Im, ted's comments
** ted's email: 
Hi, Craig. Yes, I'm interested. You sure have put a lot of work into
this. I may have some other comments over the next couple of days, but
here are two things I wanted to mention to you right now.

First, I wouldn't put too much emphasis on results obtained from the
Kole et al. model cell. That cell's morphology contains a lot of abrupt
jumps parallel to the z axis. Those are artifacts caused by hysteresis
and/or stiction in the z axis position control of the microscope that
was used to obtain the morphometric data. They add spurious length to
the cell's branches. GIGO. FYI, this is a problem that crops up in a lot
of papers (e.g. Poirazi and Mel's "pyramidal neuron as a two layer
network" is pretty bad). Yes, I know all experimental data is
inaccurate, but why deliberately reuse data that are visibly corrupt?

The morphologies used by Hay, Acker, and Neymotin are free of z axis
artifact. I haven't checked the Allen Institute morphologies; they need
a look, but I'd bet they're also free of this artifact.

My other leading comment at this point is: if you want to make this
paper stand out from all the "other" impeadance analysis papers, one way
might be to bring it back to the time domain. A little phase shift, a
low Q resonance--even if those things are location-dependent, a lot of
neuroscientists may not have a clear idea of what those imply to
neuronal function. But these properties can have a big impact on
moment-to-moment interaction of signals. I'm wondering if it would be
possible, without spending a lot of time on it, to construct an example
simulation with one of these cells that illustrates how phase shift
and/or low Q resonance shape integration of, say, a pair of synaptic
inputs that are distributed in time and/or space.

--Ted
*** my response: 
Hi Ted,

Great, thanks.

Definitely good to know that about the Kole cell's morphology.  I caught the discussion about that issue at your lab meeting last week, 
have been meaning to go check the morphologies I've been using, but haven't had a chance yet.  Maybe this paper would be a good forum to address that issue.  

In light of that, do you think it'd be worth revisiting the tunability/degeneracy stuff (Figs. 8 & 9) with a different cell model?  On the one hand, 
Figure 9 at least doesn't deal much with the location dependence (could maybe ditch Fig. 8 which does).  But on the other, as you said, GIGO.

Re bringing things back to the time domain, I think that'd be a great idea if we can come up with a good sim for it.  
Bill and Srdjan's main qualms with the paper are how does this all relate to physiological function, and outside of some hand-wavy explanations and pointing some of 
Dan Johnston & Co's papers, I haven't had a great retort for that.  I'll give it some thought, but please let me know if you think of anything.

Best,
Craig
*** bill's comments 
billl  10:01 AM
this seems quite reasonable; what do you think;  i'm a big fan of timedomain illustrations as you recall

Craig  10:02 AM
yeah, i think it's a great idea, but I'm still at a bit of a loss for a good example sim right now (edited) 
10:06
also not sure whether this implies I ought to toss the Kole cell results.  as ted mentioned regarding the Poirzai and Mel paper w/ the same issue at gordon's lab meeting last week, their results at least are probably qualitatively still right.  on the other hand, since channels are distributed based on distance to the soma, might be problematic to draw any conclusions based on those channel distributions when we know they're spurious

billl  10:36 AM
you already have the sims ; show responses in time domain -- big vs little
10:36
if know it to be spurious i would leave it out; qual still but quant not

Craig  10:39 AM
sure,  but those are still continuous inputs, rather than synaptic.  and right on - will have to redo the m-type K+ and Ih density stuff (figs 8 & 9 I think) with another cell and I think maybe a-type rather than m-type (I think kole was the only one with m-type all over)

billl  10:41 AM
how much is our model of mtype diff from atype?
10:42
i think would be interesting to say about differences in properties they confer

Craig  10:43 AM
good question, will have to look, and I agree, would be cool to compare the two.

** Ia and Im distributions:
*** Acker and Antic: Ih and Ia but no Im, separated as proximal and distal, but both in all dends 
*** Hay: Im, but K_Pst and K_Tst (not sure if that adds up to Ia), shaw related potassium
channel family (SKv3).  Also, only Ih in basal dends 
*** Neymotin: Ih and Ia, but no Im unless it's IKsin (slowly inactivating, Im is noninactivating, right?)
*** Kole: Ih and Im, no Ia
*** Allen cells: Ih and Im throughout 

** trying  Ih and Im changes in apical branch of hay cell
*** trying to parallelize with ParallelContext for neurosim_machine
*** works with do nothing function, not with 

* [2020-5-4 Mon] - more Im / Ia stuff 
** running changes to Im on single branch for Hay cell
*** changing just apic 65 didn't do shit, trying whole apical arbor 
** salva's suggestion re getting rid of Kole cell 
I was finishing ysterday the Labarrera 2018 cell reports paper and it uses the kole ih model with some pyr cell morphology — I think Shai 2015 … maybe that’s an option
3:57
labarrera 2018:
All simulations were done using the Neuron simulation environment (Hines and
Carnevale, 1997). Ih was simulated using the deterministic model by Kole et al.
(2006), with a positive shift of 14 mV (to accommodate our uncorrected liquid
junction potential values). To explore the effect of shifting of Vhalf, we introduced
a variable Vshift for both functions, alpha(V) and beta(V), which resulted in the
correct shift in both activation curve and activation time constant. For Figure 6,
we modified the published (Shai et al., 2015) L5PC model to fit experimental re-
sults of Ih (Harnett et al., 2015; Supplemental Experimental Procedures).

* [2020-5-6 Wed] - implementing teds time-domain sim suggestion
** added conditionAndTest() to chirpUtils.y
from getCells import AckerAnticCell
cell = AckerAnticCell()
from neuron import h, gui
from chirpUtils import conditionAndTest
stim_seg = cell.apical[15](0.5)
soma_seg = cell.soma[0](0.5)
start = 200
lag = 10
Sc0 = 0.0025
St0 = 0.001
St, v_soma, v_stim, t_vec = conditionAndTest(stim_seg, soma_seg,  Sc0, St0, start, lag)
** added getSc0 to chirpUtils.py 
from getCells import AckerAnticCell
cell = AckerAnticCell()
from neuron import h, gui
from chirpUtils import findSc
# stim_seg = cell.apical[15](0.5)
stim_seg = cell.basal[12](0.5)
soma_seg = cell.soma[0](0.5)
start = 200
SC = findSc(stim_seg, soma_seg, start, 0.006, 0.0005)

* [2020-5-7 Thu] - continued from yesterday
** incorporated getTp and sweepLags
from getCells import AckerAnticCell
cell = AckerAnticCell()
from neuron import h, gui
from chirpUtils import findSc
stim_seg = cell.basal[12](0.5)
soma_seg = cell.soma[0](0.5)
v_stim = h.Vector()
v_soma = h.Vector()
t_vec = h.Vector()
v_stim.record(stim_seg._ref_v)    
v_soma.record(soma_seg._ref_v)
t_vec.record(h._ref_t)
start = 200
SC = findSc(stim_seg, soma_seg, start, 0.5, 0.01)
from chirpUtils import getTp
TP = getTp(stim_seg, start, SC / 2)
from chirpUtils import sweepLags
lags, testWeights = sweepLags(stim_seg, soma_seg, SC / 2, SC / 10, SC / 20, start, TP, 5)
** results look reasonable/good 

* [2020-5-8 Fri] - " "
** looking at a few weights in basal section *testScript.py*
** trying to figure out how to pick an initial weight to find Sc - lowest weight of single syn to get spike
*** right now, something of a trial and error affair, trying to use |Z| for better guesses
**** testSC.py
from getCells import AckerAnticCell
cell = AckerAnticCell()
from neuron import h, gui

from scipy.io import loadmat
data = loadmat('AckerAntic/ackerantic_impedance_measures/apical[15].mat')

from chirpUtils import findSc
stim_sec = cell.apical[15]
soma_seg = cell.soma[0](0.5)
start = 200
base = 2e-5
count = 0
weights = []
inds = [0, 6, 12]
# for stim_seg in stim_seg.allseg():
for loc in [0.1, 0.5, 0.9]:
    SC = findSc(stim_sec(loc), soma_seg, start, base * data['ZinResAmp'][0][inds[count]], base * data['ZinResAmp'][0][inds[count]] / 50)
    weights.append(SC)
    count = count + 1
**** outputs:
In [4]: weights
Out[4]: [None, 0.004943106899110322, 0.0033753265030080875]
*** not a great strategy,salva suggests weightnorm 
https://github.com/NathanKlineInstitute/A1/blob/d1061a5861c303a5193f91c33a146447dbe9891d/analysis/wscale.py#L177
https://github.com/NathanKlineInstitute/A1/blob/d1061a5861c303a5193f91c33a146447dbe9891d/analysis/wscale.py#L194
https://github.com/suny-downstate-medical-center/M1/blob/d5e5c240a40305dac2c23c29d79b36d1f347d87a/analysis/wscale.py#L175

* [2020-5-11 Mon] - more time domain
** trying out procedure in testScript on an apical tuft 
** commit: 'initial code for time domain sims'
** another commit: 'trying to use parallel context to parallelize the time domain stuff'
*** at least got it running on my in serial . . . 
** one more: 'even simpler approach, just gonna try using pcid to index list'
*** finally got something running from scratch with mpi

* [2020-5-14 Thu] - meeting w/ bill
** consider color coding impedance plots apical vs basal
** think about cponsolidating figs 2-5
*** get rid of sam's cell and non-resonant allen institute cell
*** maybe have figure 2 be transfer frequency comparison, figure 3 resonance strength
figure 4 phase response, something along those lines 
** obviously hash out synaptic sims 
** (bill) invite migliore to join in, then hopefully pow wow w/ everybody 

* [2020-5-14 Thu] - revisiting some old data, working on time domain
** got the color coding more or less down
** still screwing around with time domain sims, takes a real long time to run 
** plotting traces
plt.figure()
plt.subplot(2,1,1)
plt.plot(t_vec, cond_i, label='Conditioning Synapse')
plt.plot(t_vec, test_i, label='Test Synapse')
plt.ylabel('Synaptic Current')
plt.title('Apical Tuft: Lag = 3ms')
plt.xlim(195,350)
plt.subplot(2,1,2)
plt.plot(t_vec, v_soma, label='Soma')
plt.plot(t_vec, v_stim, label='Synapse')
plt.xlabel('Time (ms)')
plt.ylabel('Membrane Potential')
plt.title('Test Synapse Weight: 0.0025')
plt.xlim(195,350)

* [2020-5-16 Sat] - synaptic stims for hay cell
** making synapses more realistic, time constants based on AMPA and NMDA - https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3545156/
** focusing on hay's apical trunk - reasonably large change in Zc before start getting into dend spike territory 
*** NMDA-type: apic[2](0.25): weight = 0.03; apic[36](0.8): weight = 0.05
*** AMPA-type: apic[2](0.25): weight = 0.125; apic[36](0.8): weight = 0.065

* [2020-5-17 Sun] - fleshing out stuff from yesterday
** AMPA synaptic stim on farther segment - dendritic Vm has bump 8ms after initial stim 
** separated code for chirp utils and synaptic utils 
*** added in recording dendritic currents, saving traces
*** modified testScript.py to sweep lags for two apical trunk segments mentioned [2020-5-16 Sat]
** commit: 'cleaned up and augmented synaptic stim code, test script focuses on hay apical trunk'

* [2020-5-18 Mon] - " "
** since sweeping over lags is the bottleneck, worked out parallelizing it 
*** added some functions to *synUtils.py*
*** new script *sweepLagsMulti.py*
*** uses robert's suggestions re multiprocessing package
** commit: 'code for parallelizing lag sweep'
*** basic tests worked added code for higher res and both segments with amplitude stim

* [2020-5-19 Tue] 
** plotting yesterday's output
from matplotlib import pyplot as plt
import json 
from os import listdir
from os.path import isdir
import numpy as np 
path_name = 'L5PYR_Resonance/timeDomainOutput/HayApic0/'
file_list = listdir(path_name)

lags = []
weights = []
start = 200
for filename in file_list:
    if not isdir(path_name + filename):
        lag = int(filename.split('_')[1][3:])
        weight = float(filename.split('_')[2][1:])
        lags.append(lag)
        weights.append(weight)
        with open(path_name+filename, 'rb') as fileObj:
            data = json.load(fileObj)

        dt = 0.025
        restVm = data['v_soma'][int(start*(1/dt) - 25*(1/dt))]
        a = np.array(data['v_soma'])
        b = a[a > restVm - 0.1]
        c = b[b < restVm + 0.1]
        t = np.array(data['t_vec'])
        t1 = t[a > restVm - 0.1]
        t2 = t1[b < restVm + 0.1]

        diff = 0.02
        ind = -2
        while diff < 0.026:
            diff = t2[ind+1] - t2[ind]
            ind = ind - 1

        Tp = t2[ind+2] - start
        
        plt.figure(figsize=(8,10))  
        plt.subplot(3,1,1)  
        plt.plot(data['t_vec'], data['v_soma'], label='Soma')  
        plt.plot(data['t_vec'], data['v_stim'], label='Dendrite')  
        plt.ylabel('Membrane Potential (mV)')
        plt.title('Lag: ' + str(lag) + ' Weight: ' + str(weight))
        plt.legend(loc='lower right')  
        plt.xlim(195, start+Tp+5)  
        # plt.subplot(2,2,4)  
        plt.subplot(3,1,2)  
        plt.plot(data['t_vec'], data['cond_i'], label='Conditioning Synapse')  
        plt.plot(data['t_vec'], data['test_i'], label='Test Synapse')  
        plt.ylabel('Current (nA)')
        plt.title('Synaptic Currents')
        plt.legend(loc='lower right')  
        plt.xlim(195, start+Tp+5)  
        plt.subplot(3,1,3)  
        plt.plot(data['t_vec'], data['i_hcn'], label='Ih')  
        plt.plot(data['t_vec'], data['i_im'], label='Im')  
        plt.plot(data['t_vec'], data['i_ca_lvast'], label='Ica lvast')  
        plt.plot(data['t_vec'], data['i_ca_hva'], label='Ica hva')  
        # plt.plot(data['t_vec'], data['i_nata'], label='Ina')  
        plt.plot(data['t_vec'], data['i_ske2'], label='Iske2')  
        plt.plot(data['t_vec'], data['i_skv3'], label='Iskv3')
        plt.xlim(195, start+Tp+5)  
        plt.legend(loc='lower right') 
        plt.title('Dendritic Currents')
        plt.xlabel('Time (s)')
        plt.ylabel('Current (nA)')
        plt.savefig(path_name + 'Figures/' + filename[:-4] + 'png')
        plt.close()
    
lasgs_sort = np.sort(np.array(lags))
inds = np.argsort(np.array(lags))
weights_sort = np.array(weights)[inds]

plt.figure(figsize=(8,10))
plt.plot(lasgs_sort, weights_sort, '*-')
plt.ylabel('Test Weight')
plt.xlabel('Interstimulus interval (ms)')
plt.title('Base of Apical Trunk - AMPA Synapses')
plt.savefig(path_name+'Figures/base_apicalTrunk_weightsLags.png')
plt.close()

* [2020-5-20 Wed]
** running a midway synapse/segment
*** adding Apic[14](0.5):  AMPA weight = 0.14
*** updating *sweepLagsMulti.py* for it

* [2020-5-21 Thu] - hopefully three points is enough for a trend 
** everything has a delay of 1 ms, might as well rerun
** nice plotting of "critical" weight stims 
from matplotlib import pyplot as plt
plt.ion()
import json
from os import listdir
from os.path import isdir
# path = './HayApic2/'
# path = './HayApic14/'
# path = './HayApic36/'
# path = './HayApic409/'
path = './ChirpSKE2/HayApic409/'
filenames = listdir(path)
dt = 0.025
lags = []
weights = []
for filename in filenames:
    if not isdir(path+filename):
        lag = int(filename.split('_')[1][3:])
        weight = float(filename.split('_')[2][1:])
        lags.append(lag)
        weights.append(weight)
        if '_lag0_' in filename:
        # if '_lag4_' in filename:
        # if '_lag3_' in filename:
        # if '_lag15_' in filename:
        # if '_lag20_' in filename:
        # if '_lag35_' in filename:
            current_file = filename
            with open(path + filename, 'rb') as fileObj: data = json.load(fileObj)
            stim_lag = lag
            stim_weight = weight

time = [t - data['t_vec'][int(1/dt*198)] - 2 for t in data['t_vec'][int(1/dt*198):]]

plt.figure(figsize=(8,10))  
plt.subplot(3,1,1)  
plt.plot(time, data['v_soma'][int(1/dt*198):], label='Soma')  
plt.plot(time, data['v_stim'][int(1/dt*198):], label='Dendrite')  
plt.ylabel('Membrane Potential (mV)')
plt.title('Lag: ' + str(stim_lag) + ' Weight: ' + str(stim_weight))
plt.legend(loc='lower right')  
# plt.xlim(-1,60)
plt.xlim(-1,18)
# plt.xlim(-1,30)

plt.subplot(3,1,2)  
plt.plot(time, data['cond_i'][int(1/dt*198):], label='Conditioning Synapse')  
plt.plot(time, data['test_i'][int(1/dt*198):], label='Test Synapse')  
plt.ylabel('Current (nA)')
plt.title('Synaptic Currents')
plt.ylim(-5.5,0.2)
plt.legend(loc='lower right')  
# plt.xlim(-1,60)
plt.xlim(-1,18)
# plt.xlim(-1,30)

plt.subplot(3,1,3)  
plt.plot(time, data['i_hcn'][int(1/dt*198):], label='Ih')  
plt.plot(time, data['i_im'][int(1/dt*198):], label='Im')  
plt.plot(time, data['i_ca_lvast'][int(1/dt*198):], label='Ica lvast')  
plt.plot(time, data['i_ca_hva'][int(1/dt*198):], label='Ica hva')  
# plt.plot(time, data['i_nata'][int(1/dt*198):], label='Ina')  
plt.plot(time, data['i_ske2'][int(1/dt*198):], label='Iske2')  
plt.plot(time, data['i_skv3'][int(1/dt*198):], label='Iskv3')
plt.legend(loc='lower right') 
plt.title('Dendritic Currents')
plt.xlabel('Time (s)')
plt.ylabel('Current (nA)')
# plt.xlim(-1,60)
plt.xlim(-1,18)
# plt.xlim(-1,30)
# plt.ylim(-0.00043,0.00026)
# plt.ylim(-0.00026, 0.00026)
# plt.ylim(-0.0004,0.00026)
# plt.savefig(path + 'Figures/' + current_file[:-4] + 'png')

* [2020-5-22 Fri] - more teasing a trend out
** filling things out with one more segment at 400 um from soma, running on el
*** plotting impedance data from the four segments:
from scipy.io import loadmat
from matplotlib import pyplot as plt 
plt.ion()
data0 = loadmat('Hay/hay_impedance_measures/L5PCtemplate[0].apic[0].mat')
data1 = loadmat('Hay/hay_impedance_measures/L5PCtemplate[0].apic[2].mat')
data2 = loadmat('Hay/hay_impedance_measures/L5PCtemplate[0].apic[14].mat')
data3 = loadmat('Hay/hay_impedance_measures/L5PCtemplate[0].apic[36].mat')
ZinResAmp = [data0['ZinResAmp'][0][0],data1['ZinResAmp'][0][0], data2['ZinResAmp'][0][1], data3['ZinResAmp'][0][1], data3['ZinResAmp'][0][-3]]
ZinResFreq = [data0['ZinResFreq'][0][0],data1['ZinResFreq'][0][0], data2['ZinResFreq'][0][1], data3['ZinResFreq'][0][1], data3['ZinResFreq'][0][-3]]
ZinQ = [data0['QfactorIn'][0][0],data1['QfactorIn'][0][0], data2['QfactorIn'][0][1], data3['QfactorIn'][0][1], data3['QfactorIn'][0][-3]]
ZcResAmp = [data0['ZcResAmp'][0][0],data1['ZcResAmp'][0][0], data2['ZcResAmp'][0][1], data3['ZcResAmp'][0][1], data3['ZcResAmp'][0][-3]]
ZcResFreq = [data0['ZcResFreq'][0][0],data1['ZcResFreq'][0][0], data2['ZcResFreq'][0][1], data3['ZcResFreq'][0][1], data3['ZcResFreq'][0][-3]]
ZcQ = [data0['QfactorTrans'][0][0],data1['QfactorTrans'][0][0], data2['QfactorTrans'][0][1], data3['QfactorTrans'][0][1], data3['QfactorTrans'][0][-3]]
dist = [data0['dist'][0][0],data1['dist'][0][0], data2['dist'][0][1], data3['dist'][0][1], data3['dist'][0][-3]]
plt.figure()
plt.subplot(3,2,1)
plt.plot(dist, ZinResAmp, '*-')
plt.ylabel('Resonance Amplitude')
plt.ylim(15,55)
plt.title('Input Impedance')

plt.subplot(3,2,3)
plt.plot(dist, ZinResFreq, '*-')
plt.ylabel('Resonance Frequency')
plt.ylim(4,6.5)

plt.subplot(3,2,5)
plt.plot(dist, ZinQ, '*-')
plt.ylabel('Q-factor')
plt.ylim(1,1.5)
plt.xlabel('Distnace to Soma (um)')

plt.subplot(3,2,2)
plt.plot(dist, ZcResAmp, '*-', label='Control')
plt.legend()
plt.ylabel('Resonance Amplitude')
plt.ylim(15,55)
plt.title('Transfer Impedance')

plt.subplot(3,2,4)
plt.plot(dist, ZcResFreq, '*-')
plt.ylabel('Transfer Frequency')
plt.ylim(4,6.5)

plt.subplot(3,2,6)
plt.plot(dist, ZcQ, '*-')
plt.ylabel('Q-factor')
plt.xlabel('Distnace to Soma (um)')
plt.ylim(1,1.5)

* [2020-5-23 Sat] - " "
** finished running segment from yesterday, only kind of fleshes things out 
** figures in presentiation on google drive
** running on more segment apic[0]
** Ih and SK_E2 seem to be only dendritic currents affecting paired-pulse effects
** how does SK_E2 impact chirp?
*** new file: chirpSKE2.py

* [2020-5-25 Mon] -results from chirp sans SK_E2
** plotting with code from [2020-5-22 Fri]
modData1 = loadmat('timeDomainOutput/ChirpSKE2/analysis/apic0_0.5.mat')
modData2 = loadmat('timeDomainOutput/ChirpSKE2/analysis/apic2_2.5.mat')
modData3 = loadmat('timeDomainOutput/ChirpSKE2/analysis/apic14_0.5.mat')
modData4 = loadmat('timeDomainOutput/ChirpSKE2/analysis/apic36_0.14.mat')
modData5 = loadmat('timeDomainOutput/ChirpSKE2/analysis/apic36_0.8.mat')

ZinResAmpSK = [modData1['ZinResAmp'][0][0], modData2['ZinResAmp'][0][0], modData3['ZinResAmp'][0][0], modData4['ZinResAmp'][0][0], modData5['ZinResAmp'][0][0]]
ZinResFreqSK = [modData1['ZinResFreq'][0][0], modData2['ZinResFreq'][0][0], modData3['ZinResFreq'][0][0], modData4['ZinResFreq'][0][0], modData5['ZinResFreq'][0][0]]
ZinQSK = [modData1['QfactorIn'][0][0], modData2['QfactorIn'][0][0], modData3['QfactorIn'][0][0], modData4['QfactorIn'][0][0], modData5['QfactorIn'][0][0]]
ZcResAmpSK = [modData1['ZcResAmp'][0][0], modData2['ZcResAmp'][0][0], modData3['ZcResAmp'][0][0], modData4['ZcResAmp'][0][0], modData5['ZcResAmp'][0][0]]
ZcResFreqSK = [modData1['ZcResFreq'][0][0], modData2['ZcResFreq'][0][0], modData3['ZcResFreq'][0][0], modData4['ZcResFreq'][0][0], modData5['ZcResFreq'][0][0]]
ZcQSK = [modData1['QfactorTrans'][0][0], modData2['QfactorTrans'][0][0], modData3['QfactorTrans'][0][0], modData4['QfactorTrans'][0][0], modData5['QfactorTrans'][0][0]]

plt.subplot(3,2,1)
plt.plot(dist, ZinResAmpSK, '*-')
plt.subplot(3,2,3)
plt.plot(dist, ZinResFreqSK, '*-')
plt.subplot(3,2,5)
plt.plot(dist, ZinQSK, '*-')
plt.subplot(3,2,2)
plt.plot(dist, ZcResAmpSK, '*-', label='Block SK E2')
plt.legend()
plt.subplot(3,2,4)
plt.plot(dist, ZcResFreqSK, '*-')
plt.subplot(3,2,6)
plt.plot(dist, ZcQSK, '*-')
** trying synaptic sims without SK_E2
*** has an effect at least for apic36(0.14)
** SK channels and resonance in lit:
*** Xue2012-dh: rat substantia nigra pars compacta dopaminergic neurons - blocking SK w/ 
apamin eliminated resonance 
*** Ge2016-sq: Electrical resonance mediated by other channels:
Electrical resonance could also arise from Ca2+ channels, which underlies autonomous
rhythmicity of certain excitable cells. The resonant frequency is in the same range 
as the central frequency revealed by spectral analysis of the spontaneous rhythm, 
and both the resonant and rhythmic behaviors disappear after blocking Ca2+ current66. 
L-type Ca2+ channels (Cav1.3) act as the main generator of spontaneous oscillations in 
substantia nigra pars compacta (SNc) neurons59. Later, T-type Ca2+ channels (Cav3) were 
found to mediate the subthreshold resonance phenomenon in GABAergic interneurons, with 
possible aid from persistent Na+ currents67. Electrical resonance contributes to the 
network oscillation in the immature neocortex and temporally tunes the integration of 
synaptic inputs within a specific range of frequencies in developing cortical neurons68. 
In addition, persistent Na+ currents could amplify the electrical resonance in neurons1,7,16 
and may play an important role in the nervous system69,70,71,72.
*** Matsumoto-Makidono2016-rd: Bath-applied UCL1684, a blocker of SK-type Ca2+-activated
K+ channels, or intracellular loading of BAPTA did not block resonance in WT mice (Figure S5), 
suggesting that Ca2+-activated K+ channel activation plays a negligible role, if any, in resonance

* [2020-5-27 Wed]
** plotting: just get Tp and Tp_soma for each of the segments: 
from getCells import HayCell
cell = HayCell()
from synUtils import getTp

start = 200
factor = 4
durDend = []
durSoma = []
secs = [0, 2, 14, 36, 36]
locs = [0.5, 0.5, 0.5, 0.14, 0.8]
weights = [0.065, 0.125, 0.14, 0.075, 0.065]

soma_seg = cell.soma[0](0.5)

for i in range(len(secs)):
    stim_seg = cell.apic[secs[i]](locs[i])
    Sc0 = weights[i] #/ factor 
    Tp, TpSoma = getTp(stim_seg, soma_seg, start, Sc0)
    durDend.append(Tp)
    durSoma.append(TpSoma)

# without SK
from neuron import h
for sec in h.allsec():
    try: sec.uninsert('SK_E2')
    except: pass

durDendNoSK = []
durSomaNoSK = []
for i in range(len(secs)):
    stim_seg = cell.apic[secs[i]](locs[i])
    Sc0 = weights[i] #/ factor 
    Tp, TpSoma = getTp(stim_seg, soma_seg, start, Sc0)
    durDendNoSK.append(Tp)
    durSomaNoSK.append(TpSoma)

from scipy.io import loadmat
data0 = loadmat('Hay/hay_impedance_measures/L5PCtemplate[0].apic[0].mat')
data1 = loadmat('Hay/hay_impedance_measures/L5PCtemplate[0].apic[2].mat')
data2 = loadmat('Hay/hay_impedance_measures/L5PCtemplate[0].apic[14].mat')
data3 = loadmat('Hay/hay_impedance_measures/L5PCtemplate[0].apic[36].mat')
ZinResAmp = [data0['ZinResAmp'][0][0],data1['ZinResAmp'][0][0], data2['ZinResAmp'][0][1], data3['ZinResAmp'][0][1], data3['ZinResAmp'][0][-3]]
ZinResFreq = [data0['ZinResFreq'][0][0],data1['ZinResFreq'][0][0], data2['ZinResFreq'][0][1], data3['ZinResFreq'][0][1], data3['ZinResFreq'][0][-3]]
ZinQ = [data0['QfactorIn'][0][0],data1['QfactorIn'][0][0], data2['QfactorIn'][0][1], data3['QfactorIn'][0][1], data3['QfactorIn'][0][-3]]
ZcResAmp = [data0['ZcResAmp'][0][0],data1['ZcResAmp'][0][0], data2['ZcResAmp'][0][1], data3['ZcResAmp'][0][1], data3['ZcResAmp'][0][-3]]
ZcResFreq = [data0['ZcResFreq'][0][0],data1['ZcResFreq'][0][0], data2['ZcResFreq'][0][1], data3['ZcResFreq'][0][1], data3['ZcResFreq'][0][-3]]
ZcQ = [data0['QfactorTrans'][0][0],data1['QfactorTrans'][0][0], data2['QfactorTrans'][0][1], data3['QfactorTrans'][0][1], data3['QfactorTrans'][0][-3]]
dist = [data0['dist'][0][0],data1['dist'][0][0], data2['dist'][0][1], data3['dist'][0][1], data3['dist'][0][-3]]

from matplotlib import pyplot as plt 
plt.ion()
plt.figure()
plt.subplot(1,2,1)
plt.plot(dist, durDend, label='Control')
# plt.plot(dist, durDendNoSK, label='Block SK')
plt.title('Dendrite')
plt.xlabel('Distance to Soma (microns)')
plt.ylabel('PSP Duration (ms)')
plt.ylim(40,240)
# plt.ylim(90,140)
plt.subplot(1,2,2)
plt.plot(dist, durSoma, label='Control')
# plt.plot(dist, durSomaNoSK, label='Block SK')
plt.title('Soma')
plt.xlabel('Distance to Soma (microns)')
plt.ylim(40,240)
# plt.ylim(90,140)
# plt.legend()

modData1 = loadmat('timeDomainOutput/ChirpSKE2/analysis/apic0_0.5.mat')
modData2 = loadmat('timeDomainOutput/ChirpSKE2/analysis/apic2_2.5.mat')
modData3 = loadmat('timeDomainOutput/ChirpSKE2/analysis/apic14_0.5.mat')
modData4 = loadmat('timeDomainOutput/ChirpSKE2/analysis/apic36_0.14.mat')
modData5 = loadmat('timeDomainOutput/ChirpSKE2/analysis/apic36_0.8.mat')
ZinResAmpSK = [modData1['ZinResAmp'][0][0], modData2['ZinResAmp'][0][0], modData3['ZinResAmp'][0][0], modData4['ZinResAmp'][0][0], modData5['ZinResAmp'][0][0]]
ZinResFreqSK = [modData1['ZinResFreq'][0][0], modData2['ZinResFreq'][0][0], modData3['ZinResFreq'][0][0], modData4['ZinResFreq'][0][0], modData5['ZinResFreq'][0][0]]
ZinQSK = [modData1['QfactorIn'][0][0], modData2['QfactorIn'][0][0], modData3['QfactorIn'][0][0], modData4['QfactorIn'][0][0], modData5['QfactorIn'][0][0]]
ZcResAmpSK = [modData1['ZcResAmp'][0][0], modData2['ZcResAmp'][0][0], modData3['ZcResAmp'][0][0], modData4['ZcResAmp'][0][0], modData5['ZcResAmp'][0][0]]
ZcResFreqSK = [modData1['ZcResFreq'][0][0], modData2['ZcResFreq'][0][0], modData3['ZcResFreq'][0][0], modData4['ZcResFreq'][0][0], modData5['ZcResFreq'][0][0]]
ZcQSK = [modData1['QfactorTrans'][0][0], modData2['QfactorTrans'][0][0], modData3['QfactorTrans'][0][0], modData4['QfactorTrans'][0][0], modData5['QfactorTrans'][0][0]]

** look at time to minimum rather than return to rest 
from getCells import HayCell
cell = HayCell()
from synUtils import getT2min

start = 200
factor = 4
durDend = []
durSoma = []
secs = [0, 2, 14, 36, 36]
locs = [0.5, 0.5, 0.5, 0.14, 0.8]
weights = [0.065, 0.125, 0.14, 0.075, 0.065]

soma_seg = cell.soma[0](0.5)

for i in range(len(secs)):
    stim_seg = cell.apic[secs[i]](locs[i])
    Sc0 = weights[i] / factor 
    Tp, TpSoma = getT2min(stim_seg, soma_seg, start, Sc0)
    durDend.append(Tp)
    durSoma.append(TpSoma)

# without SK
from neuron import h
for sec in h.allsec():
    try: sec.uninsert('SK_E2')
    except: pass

durDendNoSK = []
durSomaNoSK = []
for i in range(len(secs)):
    stim_seg = cell.apic[secs[i]](locs[i])
    Sc0 = weights[i] / factor 
    Tp, TpSoma = getT2min(stim_seg, soma_seg, start, Sc0)
    durDendNoSK.append(Tp)
    durSomaNoSK.append(TpSoma)

from scipy.io import loadmat
data0 = loadmat('Hay/hay_impedance_measures/L5PCtemplate[0].apic[0].mat')
data1 = loadmat('Hay/hay_impedance_measures/L5PCtemplate[0].apic[2].mat')
data2 = loadmat('Hay/hay_impedance_measures/L5PCtemplate[0].apic[14].mat')
data3 = loadmat('Hay/hay_impedance_measures/L5PCtemplate[0].apic[36].mat')
ZinResAmp = [data0['ZinResAmp'][0][0],data1['ZinResAmp'][0][0], data2['ZinResAmp'][0][1], data3['ZinResAmp'][0][1], data3['ZinResAmp'][0][-3]]
ZinResFreq = [data0['ZinResFreq'][0][0],data1['ZinResFreq'][0][0], data2['ZinResFreq'][0][1], data3['ZinResFreq'][0][1], data3['ZinResFreq'][0][-3]]
ZinQ = [data0['QfactorIn'][0][0],data1['QfactorIn'][0][0], data2['QfactorIn'][0][1], data3['QfactorIn'][0][1], data3['QfactorIn'][0][-3]]
ZcResAmp = [data0['ZcResAmp'][0][0],data1['ZcResAmp'][0][0], data2['ZcResAmp'][0][1], data3['ZcResAmp'][0][1], data3['ZcResAmp'][0][-3]]
ZcResFreq = [data0['ZcResFreq'][0][0],data1['ZcResFreq'][0][0], data2['ZcResFreq'][0][1], data3['ZcResFreq'][0][1], data3['ZcResFreq'][0][-3]]
ZcQ = [data0['QfactorTrans'][0][0],data1['QfactorTrans'][0][0], data2['QfactorTrans'][0][1], data3['QfactorTrans'][0][1], data3['QfactorTrans'][0][-3]]
dist = [data0['dist'][0][0],data1['dist'][0][0], data2['dist'][0][1], data3['dist'][0][1], data3['dist'][0][-3]]

from matplotlib import pyplot as plt 
plt.ion()
plt.figure()
plt.subplot(1,2,1)
plt.plot(dist, durDend, label='Control')
plt.plot(dist, durDendNoSK, label='Block SK')
plt.title('Dendrite')
plt.xlabel('Distance to Soma (microns)')
plt.ylabel('PSP Duration (ms)')
plt.ylim(90,140)
plt.subplot(1,2,2)
plt.plot(dist, durSoma, label='Control')
plt.plot(dist, durSomaNoSK, label='Block SK')
plt.title('Soma')
plt.xlabel('Distance to Soma (microns)')
plt.ylim(90,140)
plt.legend()



* [2020-5-31 Sun] - quick look at blocking SK in other models
** plotting removal of SK for allen cell
from scipy.io import loadmat
from matplotlib import pyplot as plt 
plt.ion()

modData0 = loadmat('timeDomainOutput/allenSK/analysis/apic0.mat')
modData1 = loadmat('timeDomainOutput/allenSK/analysis/apic2.mat')
modData2 = loadmat('timeDomainOutput/allenSK/analysis/apic4.mat')
modData3 = loadmat('timeDomainOutput/allenSK/analysis/apic6.mat')
modData4 = loadmat('timeDomainOutput/allenSK/analysis/apic8.mat')
modData5 = loadmat('timeDomainOutput/allenSK/analysis/apic10.mat')

ZinResAmpSK = [modData0['ZinResAmp'][0][0], modData1['ZinResAmp'][0][0], modData2['ZinResAmp'][0][0], modData3['ZinResAmp'][0][0], modData4['ZinResAmp'][0][0], modData5['ZinResAmp'][0][0]]
ZinResFreqSK = [modData0['ZinResFreq'][0][0], modData1['ZinResFreq'][0][0], modData2['ZinResFreq'][0][0], modData3['ZinResFreq'][0][0], modData4['ZinResFreq'][0][0], modData5['ZinResFreq'][0][0]]
ZinQSK = [modData0['QfactorIn'][0][0], modData1['QfactorIn'][0][0], modData2['QfactorIn'][0][0], modData3['QfactorIn'][0][0], modData4['QfactorIn'][0][0], modData5['QfactorIn'][0][0]]
ZcResAmpSK = [modData0['ZcResAmp'][0][0], modData1['ZcResAmp'][0][0], modData2['ZcResAmp'][0][0], modData3['ZcResAmp'][0][0], modData4['ZcResAmp'][0][0], modData5['ZcResAmp'][0][0]]
ZcResFreqSK = [modData0['ZcResFreq'][0][0], modData1['ZcResFreq'][0][0], modData2['ZcResFreq'][0][0], modData3['ZcResFreq'][0][0], modData4['ZcResFreq'][0][0], modData5['ZcResFreq'][0][0]]
ZcQSK = [modData0['QfactorTrans'][0][0], modData1['QfactorTrans'][0][0], modData2['QfactorTrans'][0][0], modData3['QfactorTrans'][0][0], modData4['QfactorTrans'][0][0], modData5['QfactorTrans'][0][0]]

data0 = loadmat('497232419/497232419_impedance_measures/apic/apic[0].mat')
data1 = loadmat('497232419/497232419_impedance_measures/apic/apic[2].mat')
data2 = loadmat('497232419/497232419_impedance_measures/apic/apic[4].mat')
data3 = loadmat('497232419/497232419_impedance_measures/apic/apic[6].mat')
data4 = loadmat('497232419/497232419_impedance_measures/apic/apic[8].mat')
data5 = loadmat('497232419/497232419_impedance_measures/apic/apic[10].mat')

ZinResAmp = [data0['ZinResAmp'][0][0],data1['ZinResAmp'][0][0], data2['ZinResAmp'][0][0], data3['ZinResAmp'][0][12], data4['ZinResAmp'][0][0], data5['ZinResAmp'][0][2]]
ZinResFreq = [data0['ZinResFreq'][0][0],data1['ZinResFreq'][0][0], data2['ZinResFreq'][0][0], data3['ZinResFreq'][0][12], data4['ZinResFreq'][0][0], data5['ZinResFreq'][0][2]]
ZinQ = [data0['QfactorIn'][0][0],data1['QfactorIn'][0][0], data2['QfactorIn'][0][0], data3['QfactorIn'][0][12], data4['QfactorIn'][0][0], data5['QfactorIn'][0][2]]
ZcResAmp = [data0['ZcResAmp'][0][0],data1['ZcResAmp'][0][0], data2['ZcResAmp'][0][0], data3['ZcResAmp'][0][12], data4['ZcResAmp'][0][0], data5['ZcResAmp'][0][2]]
ZcResFreq = [data0['ZcResFreq'][0][0],data1['ZcResFreq'][0][0], data2['ZcResFreq'][0][0], data3['ZcResFreq'][0][12], data4['ZcResFreq'][0][0], data5['ZcResFreq'][0][2]]
ZcQ = [data0['QfactorTrans'][0][0],data1['QfactorTrans'][0][0], data2['QfactorTrans'][0][0], data3['QfactorTrans'][0][12], data4['QfactorTrans'][0][0], data5['QfactorTrans'][0][2]]
dist = [data0['dist'][0][0],data1['dist'][0][0], data2['dist'][0][0], data3['dist'][0][12], data4['dist'][0][0], data5['dist'][0][2]]

plt.figure()
plt.subplot(3,2,1)
plt.plot(dist, ZinResAmp, '*-')
plt.ylabel('Resonance Amplitude')
# plt.ylim(15,55)
plt.title('Input Impedance')

plt.subplot(3,2,3)
plt.plot(dist, ZinResFreq, '*-')
plt.ylabel('Resonance Frequency')
# plt.ylim(4,6.5)

plt.subplot(3,2,5)
plt.plot(dist, ZinQ, '*-')
plt.ylabel('Q-factor')
# plt.ylim(1,1.5)
plt.xlabel('Distnace to Soma (um)')

plt.subplot(3,2,2)
plt.plot(dist, ZcResAmp, '*-', label='Control')
plt.legend()
plt.ylabel('Resonance Amplitude')
# plt.ylim(15,55)
plt.title('Transfer Impedance')

plt.subplot(3,2,4)
plt.plot(dist, ZcResFreq, '*-')
plt.ylabel('Transfer Frequency')
# plt.ylim(4,6.5)

plt.subplot(3,2,6)
plt.plot(dist, ZcQ, '*-')
plt.ylabel('Q-factor')
plt.xlabel('Distnace to Soma (um)')
# plt.ylim(1,1.5)

plt.subplot(3,2,1)
plt.plot(dist, ZinResAmpSK, '*-')
plt.subplot(3,2,3)
plt.plot(dist, ZinResFreqSK, '*-')
plt.subplot(3,2,5)
plt.plot(dist, ZinQSK, '*-')
plt.subplot(3,2,2)
plt.plot(dist, ZcResAmpSK, '*-', label='Block SK E2')
plt.legend()
plt.subplot(3,2,4)
plt.plot(dist, ZcResFreqSK, '*-')
plt.subplot(3,2,6)
plt.plot(dist, ZcQSK, '*-')

** EEE cell
from scipy.io import loadmat
from matplotlib import pyplot as plt 
plt.ion()

modData0 = loadmat('timeDomainOutput/ackerSK/analysis/apic0.mat')
modData1 = loadmat('timeDomainOutput/ackerSK/analysis/apic2.mat')
modData2 = loadmat('timeDomainOutput/ackerSK/analysis/apic4.mat')
modData3 = loadmat('timeDomainOutput/ackerSK/analysis/apic6.mat')
modData4 = loadmat('timeDomainOutput/ackerSK/analysis/apic10.mat')
modData5 = loadmat('timeDomainOutput/ackerSK/analysis/apic13.mat')

ZinResAmpSK = [modData0['ZinResAmp'][0][0], modData1['ZinResAmp'][0][0], modData2['ZinResAmp'][0][0], modData3['ZinResAmp'][0][0], modData4['ZinResAmp'][0][0], modData5['ZinResAmp'][0][0]]
ZinResFreqSK = [modData0['ZinResFreq'][0][0], modData1['ZinResFreq'][0][0], modData2['ZinResFreq'][0][0], modData3['ZinResFreq'][0][0], modData4['ZinResFreq'][0][0], modData5['ZinResFreq'][0][0]]
ZinQSK = [modData0['QfactorIn'][0][0], modData1['QfactorIn'][0][0], modData2['QfactorIn'][0][0], modData3['QfactorIn'][0][0], modData4['QfactorIn'][0][0], modData5['QfactorIn'][0][0]]
ZcResAmpSK = [modData0['ZcResAmp'][0][0], modData1['ZcResAmp'][0][0], modData2['ZcResAmp'][0][0], modData3['ZcResAmp'][0][0], modData4['ZcResAmp'][0][0], modData5['ZcResAmp'][0][0]]
ZcResFreqSK = [modData0['ZcResFreq'][0][0], modData1['ZcResFreq'][0][0], modData2['ZcResFreq'][0][0], modData3['ZcResFreq'][0][0], modData4['ZcResFreq'][0][0], modData5['ZcResFreq'][0][0]]
ZcQSK = [modData0['QfactorTrans'][0][0], modData1['QfactorTrans'][0][0], modData2['QfactorTrans'][0][0], modData3['QfactorTrans'][0][0], modData4['QfactorTrans'][0][0], modData5['QfactorTrans'][0][0]]

data0 = loadmat('AckerAntic/ackerantic_impedance_measures/apic/apical[0].mat')
data1 = loadmat('AckerAntic/ackerantic_impedance_measures/apic/apical[2].mat')
data2 = loadmat('AckerAntic/ackerantic_impedance_measures/apic/apical[4].mat')
data3 = loadmat('AckerAntic/ackerantic_impedance_measures/apic/apical[6].mat')
data4 = loadmat('AckerAntic/ackerantic_impedance_measures/apic/apical[10].mat')
data5 = loadmat('AckerAntic/ackerantic_impedance_measures/apic/apical[13].mat')

ZinResAmp = [data0['ZinResAmp'][0][1],data1['ZinResAmp'][0][1], data2['ZinResAmp'][0][0], data3['ZinResAmp'][0][1], data4['ZinResAmp'][0][1], data5['ZinResAmp'][0][3]]
ZinResFreq = [data0['ZinResFreq'][0][1],data1['ZinResFreq'][0][1], data2['ZinResFreq'][0][0], data3['ZinResFreq'][0][1], data4['ZinResFreq'][0][1], data5['ZinResFreq'][0][3]]
ZinQ = [data0['QfactorIn'][0][1],data1['QfactorIn'][0][1], data2['QfactorIn'][0][0], data3['QfactorIn'][0][1], data4['QfactorIn'][0][1], data5['QfactorIn'][0][3]]
ZcResAmp = [data0['ZcResAmp'][0][1],data1['ZcResAmp'][0][1], data2['ZcResAmp'][0][0], data3['ZcResAmp'][0][1], data4['ZcResAmp'][0][1], data5['ZcResAmp'][0][3]]
ZcResFreq = [data0['ZcResFreq'][0][1],data1['ZcResFreq'][0][1], data2['ZcResFreq'][0][0], data3['ZcResFreq'][0][1], data4['ZcResFreq'][0][1], data5['ZcResFreq'][0][3]]
ZcQ = [data0['QfactorTrans'][0][1],data1['QfactorTrans'][0][1], data2['QfactorTrans'][0][0], data3['QfactorTrans'][0][1], data4['QfactorTrans'][0][1], data5['QfactorTrans'][0][3]]
dist = [data0['dist'][0][1],data1['dist'][0][1], data2['dist'][0][0], data3['dist'][0][1], data4['dist'][0][1], data5['dist'][0][3]]

plt.figure()
plt.subplot(3,2,1)
plt.plot(dist, ZinResAmp, '*-')
plt.ylabel('Resonance Amplitude')
# plt.ylim(15,55)
plt.title('Input Impedance')

plt.subplot(3,2,3)
plt.plot(dist, ZinResFreq, '*-')
plt.ylabel('Resonance Frequency')
# plt.ylim(4,6.5)

plt.subplot(3,2,5)
plt.plot(dist, ZinQ, '*-')
plt.ylabel('Q-factor')
# plt.ylim(1,1.5)
plt.xlabel('Distnace to Soma (um)')

plt.subplot(3,2,2)
plt.plot(dist, ZcResAmp, '*-', label='Control')
plt.legend()
plt.ylabel('Resonance Amplitude')
# plt.ylim(15,55)
plt.title('Transfer Impedance')

plt.subplot(3,2,4)
plt.plot(dist, ZcResFreq, '*-')
plt.ylabel('Transfer Frequency')
# plt.ylim(4,6.5)

plt.subplot(3,2,6)
plt.plot(dist, ZcQ, '*-')
plt.ylabel('Q-factor')
plt.xlabel('Distnace to Soma (um)')
# plt.ylim(1,1.5)

plt.subplot(3,2,1)
plt.plot(dist, ZinResAmpSK, '*-')
plt.subplot(3,2,3)
plt.plot(dist, ZinResFreqSK, '*-')
plt.subplot(3,2,5)
plt.plot(dist, ZinQSK, '*-')
plt.subplot(3,2,2)
plt.plot(dist, ZcResAmpSK, '*-', label='Block SK E2')
plt.legend()
plt.subplot(3,2,4)
plt.plot(dist, ZcResFreqSK, '*-')
plt.subplot(3,2,6)
plt.plot(dist, ZcQSK, '*-')
** neat results blocking SK 

* [2020-6-1 Mon] - revisiting figures 
** data from figures
*** dembrow 
dist = [318.1987014295793,
    307.52076704913554,
    342.74197031427707,
    354.50252659765914,
    366.82166971394025,
    379.9067102402788,
    383.3172571658917,
    411.5042973755057,
    425.9008652337284,
    456.65481349246346,
    443.4099710628987,
    428.29501446855073,
    452.4049466607161,
    475.1860756395676,
    491.63847338794426,
    486.4269158232678,
    480.3587624710269,
    547.2121046342552,
    568.8415081844489,
    604.1706857085271,
    568.3779386994141,
    626.7704179323649,
    698.2608946027268,
    585.4954578828408,
    555.8745195145478,
    540.9539165862858,
    504.9538590000144,
    495.8120384100431,
    470.7677689638791,
    429.6166193979356,
    423.9069405853645,
    433.152416463915,
    407.80437943594256,
    399.5321115446078,
    369.9385266552455,
    371.69202862037696,
    386.09723441931453,
    385.5429665567729,
    383.62534371805765];
transfer = [3.447920415772879,
    4.459639222009471,
    4.794316235009575,
    4.813362894286001,
    5.268495990555852,
    5.20815997466204,
    4.553749586098673,
    4.175235023970284,
    4.094988554728552,
    3.934366047134363,
    4.728192798836757,
    5.105843566893652,
    5.441254804854523,
    5.875872791926403,
    5.3593671268769505,
    5.28041634874246,
    6.133240235527849,
    5.2763997063100145,
    4.997437410921236,
    4.836512575402022,
    4.125221347230818,
    6.10374166798635,
    7.962453751025753,
    9.555808295302398,
    7.515915405767263,
    7.001482846489395,
    7.241747167475273,
    7.202703675443773,
    8.15590043333669,
    8.039676941017259,
    7.247102690718532,
    6.810368408171492,
    6.15785836656541,
    5.127567987791711,
    5.962122629965016,
    6.9135486100113726,
    6.793653992888094,
    6.3377434819539005,
    6.1396323116569];
syncDist = [319.6391290360118,
    306.8443641292072,
    365.4776817189286,
    378.92409525569684,
    380.1466209417418,
    374.98819229110626,
    356.4805497943063,
    341.8020275034055,
    358.29996372124225,
    369.19454312722894,
    376.73094167334057,
    396.50218014799,
    413.131541299601,
    427.17210505780645,
    421.5002977596156,
    424.1014162405624,
    433.71323353252427,
    402.46969354717265,
    408.30852003203483,
    401.3087732988343,
    449.80046683231683,
    548.0036415658733,
    566.490748916771,
    605.2994366524974,
    549.795675298273,
    568.8646117830667,
    591.1644112231417,
    623.6729161960697,
    556.6393549226167,
    696.9094605417172,
    507.5767843330527,
    499.1491604547851,
    426.36712733843973,
    443.1936258907119,
    475.79111649588276,
    494.929872476744,
    470.6367948744276,
    452.8027051632202,
    487.95476791862615,
    445.8549807996386,
    388.9835787283269,
    404.9749813472425];
synchFreq = [4.236051502145923,
    4.738197424892704,
    5.568669527896995,
    4.8733905579399135,
    5.626609442060085,
    6.399141630901287,
    6.495708154506437,
    6.572961373390558,
    7.82832618025751,
    7.133047210300429,
    8.813304721030041,
    8.890557939914162,
    8.291845493562231,
    8.214592274678111,
    7.229613733905579,
    6.534334763948497,
    5.9356223175965654,
    5.703862660944205,
    4.3326180257510725,
    4.081545064377682,
    3.9849785407725324,
    4.583690987124463,
    4.776824034334762,
    6.283261802575107,
    6.3025751072961365,
    7.287553648068668,
    7.6931330472103,
    8.079399141630901,
    8.75536480686695,
    9.894849785407724,
    7.905579399141629,
    9.798283261802574,
    10.570815450643774,
    7.190987124463518,
    6.321888412017167,
    6.321888412017167,
    7.0364806866952785,
    6.630901287553647,
    5.723175965665236,
    5.645922746781116,
    6.959227467811158,
    6.360515021459227];
*** ulrich 
distUlrich = [124.96170813873078,
    154.66628208399433,
    167.2835520647282,
    158.03049296842354,
    145.54102276803377,
    148.26741808204184,
    145.07834022993603,
    175.5432045351172,
    180.47000440051326,
    200.32689527148207,
    201.02801906642554,
    198.64419816361774,
    241.7582823946188,
    267.5549047233409,
    258.79470311327066];
resFreq= [3.87548673744467,
    3.882223405553522,
    4.297444189288633,
    4.689161055087769,
    5.501217536969858,
    5.433132536803452,
    6.308019288300182,
    6.615919318992837,
    6.6785942763744215,
    6.616799421646828,
    6.34977886496341,
    6.207648757687031,
    5.487588888519098,
    4.715777689027931,
    6.340466602323028];
distQ = [124.72035635199708,
    145.02991867237844,
    146.4082527211068,
    147.93372125746546,
    167.25814200069928,
    179.99494012001583,
    175.05126681770503,
    153.87890968114226,
    158.26429060766884,
    200.68291324011406,
    200.30495726106994,
    202.26500695022838,
    266.5418562937232,
    241.89284993476167,
    258.22500547206124];
Q = [1.038395961192426,
    1.097792129896784,
    1.1206389093400269,
    1.1380710486743397,
    1.0946174816010825,
    1.1390329943971778,
    1.20102505209118,
    1.2005827389869437,
    1.4002490143183233,
    1.2988774457271017,
    1.19903066344123,
    1.1911963773533416,
    1.1973296341251949,
    1.3990187243985706,
    1.3982944224772376];
** comparing to experimental values
*** experimental data focuses entirely on apical dendrites 
** some nice new figures 
*** if going this direction, have to rework Ih/Im figure(s)
*** need to flesh out SK figures 

* [2020-6-3 Wed]
** important fix to get numpy working on multiple threads:
import os
os.environ["OPENBLAS_NUM_THREADS"] = "6"
** running all apical segments without SK for allen cell on *my*

* [2020-6-4 Thu]
** towards nice plots for SK
path_name = './497232419/497232419_impedance_measures/apic/';
dist = [];
fVarIn = [];
QfactorIn = [];
ZinResAmp = [];
ZinResFreq = [];
ZinSynchFreq = [];
ZinPeakPhaseFreq = [];
ZinLeadPhaseMinFreq =[];
ZinLeadPhaseBW = [];
ZcResFreq = [];
ZinLeadPhaseBool = [];
list = dir(path_name);
count = 1;
for i = 1:length(list)
if ~list(i).isdir
file = load(strcat(path_name,list(i).name));
for j = 1:length(file.dist)
dist = [dist file.dist(j)];
fVarIn = [fVarIn file.fVarIn(j)];
QfactorIn = [QfactorIn file.QfactorTrans(j)];
ZinResAmp = [ZinResAmp file.ZcResAmp(j)];
ZinResFreq = [ZinResFreq file.ZcResFreq(j)];
ZinLeadPhaseBool(count,:) = file.ZinLeadPhaseBool(j,:);
if isstr(file.ZinSynchFreq(j))
ZinSynchFreq = [ZinSynchFreq NaN];
else
ZinSynchFreq = [ZinSynchFreq file.ZinSynchFreq(j)];
end
if isstr(ZinLeadPhaseBW)
ZinLeadPhaseBW  = [ZinLeadPhaseBW  NaN];
else
ZinLeadPhaseBW  = [ZinLeadPhaseBW  file.ZinLeadPhaseBW(j)];
end
ZcResFreq =  [ZcResFreq file.ZcResFreq(j)];
% dendType = [dendType type];
count = count + 1;
end
end
end
figure()
subplot(3,4,1)
hold on
contAmp = scatter(dist, ZinResAmp, 'bo');
subplot(3,4,2)
hold on
contFreq =scatter(dist, ZinResFreq, 'bo');
subplot(3,4,3)
hold on
contQ = scatter(dist, QfactorIn, 'bo');
subplot(3,4,4)
hold on
contSync = scatter(dist, ZinSynchFreq, 'bo');
path_name = './497232419/noSK/';
dist = [];
fVarIn = [];
QfactorIn = [];
ZinResAmp = [];
ZinResFreq = [];
ZinSynchFreq = [];
ZinPeakPhaseFreq = [];
ZinLeadPhaseMinFreq =[];
ZinLeadPhaseBW = [];
ZcResFreq = [];
ZinLeadPhaseBool = [];
list = dir(path_name);
count = 1;
for i = 1:length(list)
if ~list(i).isdir
file = load(strcat(path_name,list(i).name));
for j = 1:length(file.dist)
dist = [dist file.dist(j)];
fVarIn = [fVarIn file.fVarIn(j)];
QfactorIn = [QfactorIn file.QfactorTrans(j)];
ZinResAmp = [ZinResAmp file.ZcResAmp(j)];
ZinResFreq = [ZinResFreq file.ZcResFreq(j)];
ZinLeadPhaseBool(count,:) = file.ZinLeadPhaseBool(j,:);
if isstr(file.ZinSynchFreq(j))
ZinSynchFreq = [ZinSynchFreq NaN];
else
ZinSynchFreq = [ZinSynchFreq file.ZinSynchFreq(j)];
end
if isstr(ZinLeadPhaseBW)
ZinLeadPhaseBW  = [ZinLeadPhaseBW  NaN];
else
ZinLeadPhaseBW  = [ZinLeadPhaseBW  file.ZinLeadPhaseBW(j)];
end
ZcResFreq =  [ZcResFreq file.ZcResFreq(j)];
% dendType = [dendType type];
count = count + 1;
end
end
end
subplot(3,4,1)
koAmp = scatter(dist, ZinResAmp, 'ro');
legend([contAmp, koAmp], {'Control', 'Block SK'})
subplot(3,4,2)
koFreq =scatter(dist, ZinResFreq, 'ro');
subplot(3,4,3)
koQ = scatter(dist, QfactorIn, 'ro');
subplot(3,4,4)
koSync = scatter(dist, ZinSynchFreq, 'ro');

path_name = './Hay/hay_impedance_measures/apic/';
dist = [];
fVarIn = [];
QfactorIn = [];
ZinResAmp = [];
ZinResFreq = [];
ZinSynchFreq = [];
ZinPeakPhaseFreq = [];
ZinLeadPhaseMinFreq =[];
ZinLeadPhaseBW = [];
ZcResFreq = [];
ZinLeadPhaseBool = [];
list = dir(path_name);
count = 1;
for i = 1:length(list)
if ~list(i).isdir
file = load(strcat(path_name,list(i).name));
for j = 1:length(file.dist)
dist = [dist file.dist(j)];
fVarIn = [fVarIn file.fVarIn(j)];
QfactorIn = [QfactorIn file.QfactorTrans(j)];
ZinResAmp = [ZinResAmp file.ZcResAmp(j)];
ZinResFreq = [ZinResFreq file.ZcResFreq(j)];
ZinLeadPhaseBool(count,:) = file.ZinLeadPhaseBool(j,:);
if isstr(file.ZinSynchFreq(j))
ZinSynchFreq = [ZinSynchFreq NaN];
else
ZinSynchFreq = [ZinSynchFreq file.ZinSynchFreq(j)];
end
if isstr(ZinLeadPhaseBW)
ZinLeadPhaseBW  = [ZinLeadPhaseBW  NaN];
else
ZinLeadPhaseBW  = [ZinLeadPhaseBW  file.ZinLeadPhaseBW(j)];
end
ZcResFreq =  [ZcResFreq file.ZcResFreq(j)];
% dendType = [dendType type];
count = count + 1;
end
end
end
synchFreq = [];
distSynch = [];
for i = 1:length(ZinSynchFreq)
if ~isnan(ZinSynchFreq{i})
distSynch = [distSynch, dist(i)];
synchFreq = [synchFreq, ZinSynchFreq{i}];
end
subplot(3,4,5)
hold on
contAmp = scatter(dist, ZinResAmp, 'bo');
subplot(3,4,6)
hold on
contFreq =scatter(dist, ZinResFreq, 'bo');
subplot(3,4,7)
hold on
contQ = scatter(dist, QfactorIn, 'bo');
subplot(3,4,8)
hold on
contSync = scatter(distSynch, synchFreq, 'bo');
path_name = './Hay/noSK/';
dist = [];
fVarIn = [];
QfactorIn = [];
ZinResAmp = [];
ZinResFreq = [];
ZinSynchFreq = [];
ZinPeakPhaseFreq = [];
ZinLeadPhaseMinFreq =[];
ZinLeadPhaseBW = [];
ZcResFreq = [];
ZinLeadPhaseBool = [];
list = dir(path_name);
count = 1;
for i = 1:length(list)
if ~list(i).isdir
file = load(strcat(path_name,list(i).name));
for j = 1:length(file.dist)
dist = [dist file.dist(j)];
fVarIn = [fVarIn file.fVarIn(j)];
QfactorIn = [QfactorIn file.QfactorTrans(j)];
ZinResAmp = [ZinResAmp file.ZcResAmp(j)];
ZinResFreq = [ZinResFreq file.ZcResFreq(j)];
ZinLeadPhaseBool(count,:) = file.ZinLeadPhaseBool(j,:);
if isstr(file.ZinSynchFreq(j))
ZinSynchFreq = [ZinSynchFreq NaN];
else
ZinSynchFreq = [ZinSynchFreq file.ZinSynchFreq(j)];
end
if isstr(ZinLeadPhaseBW)
ZinLeadPhaseBW  = [ZinLeadPhaseBW  NaN];
else
ZinLeadPhaseBW  = [ZinLeadPhaseBW  file.ZinLeadPhaseBW(j)];
end
ZcResFreq =  [ZcResFreq file.ZcResFreq(j)];
% dendType = [dendType type];
count = count + 1;
end
end
end
synchFreq = [];
distSynch = [];
for i = 1:length(ZinSynchFreq)
if ~isnan(ZinSynchFreq{i})
distSynch = [distSynch, dist(i)];
synchFreq = [synchFreq, ZinSynchFreq{i}];
end
subplot(3,4,9)
koAmp = scatter(dist, ZinResAmp, 'ro');
subplot(3,4,10)
koFreq =scatter(dist, ZinResFreq, 'ro');
subplot(3,4,11)
koQ = scatter(dist, QfactorIn, 'ro');
subplot(3,4,12)
koSync = scatter(dist, ZinSynchFreq, 'ro');
** allen institute cell w/out SK looks a bit like M1 cell, which also doesn't have SK
** hay cell still running on *zn*

* [2020-6-5 Fri]
** continuing plotting code for SK stuff on [2020-6-4 Thu] in Analysis/plotSK.mat

* [2020-6-16 Tue] - outline of TODOs
** Focus on one or two cells:  BBP vs ABA
*** heavier on BBP because of more realistic channel distributions
*** BBP makes a bit more sense than EEE cell: closer to experimental data (I think) and better looking tufts 
*** TODO: look at traces for ABA cell(s) more closely 

** Passive properties
*** TODO: Summarize channel dists and passive properties 
*** TODO: Changing passive properties by +/- 

** Morphology
*** TODO: impedance profiles for BBP and ABA cells with multiple morphologies
*** maybe TODO: Srdjan's suggestion of systematically changing morphology
**** going to do dendrite diameter as passive property
**** option 1 - could characterize existing morphologies based on branching
**** option 2 - could systematically alter a single morphology (e.g. increase length of apical tufts, basal branches, add/remove branches)

** Synaptic integreation
*** Focus just along apical trunk
*** TODO: Flesh out for BBP cell (all segments, save all params)
*** TODO: repeat for ABA channel distribution for comparison
*** TODO: Plot impedance measures for just main trunk of both models

** DONE: ask Joao about his modified PT cell

* [2020-6-17 Wed] - working way through todo from [2020-6-16 Tue]
** running chirp on modified PT cell from Joao on *pt*
*** kind of bizarre results, have to dig into a bit
*** fucked something up when modifying cell params - consistently fires sans input 
** working on computing number of branch points 
N = 0
for sec in h.allsec():
    if len(sec.children()) == 2:
        N = N + 1
** modified Hay cell template to load in SWC cells and added all Suter/Shepherd morphos to repo
** ways to quantify morphology:
*** distance of center of mass of bifurcation points to soma 
*** bifurcation "torque" on soma 

* [2020-6-18 Thu] - same as yesterday 
** set up Suter morphologies + Hay biophys to run on neurosim machines - *chirpSuterMorphs.py*
** Added code for finding number and positions of bifurcation points 

* [2020-6-19 Fri] - " "
** only ran chirp on one morph last night - gotta run more but its a lot of segments
** code for putting all allen morphologies in same place 
import os
model_ids = [497229117, 491766131, 497232312, 485591806,
		497232419, 497232429, 496930324, 497232564, 497232839, 497232946,
		497233049, 497233139, 497233307, 497229124]
for id in model_ids:
    files = os.listdir(str(id))
    for filename in files:
        if filename[-3:] == 'swc':
            os.system('cp %s/%s ./allen_morphs' % (str(id),filename))

* [2020-6-22 Mon] - morphology and Ih dist 
** a few suter-shepherd morphologies still running on neurosim machines 
** testing out allen morphologies on zn 
** added a few utils for computing morphology stats     

* [2020-7-9 Thu] - traces for synchronous frequency 
** using Kole cell, best fit to data 

* [2020-7-13 Mon] - focusing just on main trunks 
** trunks
*** that's the only place data has been collected
*** sam's cell is much more reasonable when just looking at that 
*** including sam's cell allows to easily look at effect of different Ih models
*** also should make looking at influence of morphology a bit more sensible
*** kole - pt, neymotinharnett - au, hay - el, neymotinmigliore - my, 
neymotinkole - zn, ackerantic - ag

* [2020-7-14 Tue] - new figs 
** Comparisons of the decent models (no ABA) to available data
*** Analysis/comparison2transferDataWithQ.svg 
*** Analysis/comparison2transfer.svg
** Morphologies from L5b corticospinal neurons 
*** Analysis/hay_shepherdMorphsZAP.svg
*** Analysis/hay_shepherdMorphs.svg 
*** variety of morphologies accounts for 46% of the range of experimentally
observed range of resonance frequencies and the full range of observed resonance
strengths.

* [2020-7-15 Wed]
** running m1 cell with salva's changes in netpyne - looks promising
** i'm a dope, it's the only cell that makes sense now 
*** transfer frequency, synchronous frequencies, and Q-factor (least of all) match experimental values
*** phase lead (not reported in L5 Pyr cells) matches what's seen in CA1 Pyr cells Narayanan2008-zw
**** reasonable comparison since location dependence of transfer and synch freqs is comparable

* [2020-7-17 Fri] - Hay dist + migliore HCN 
** altered Hay cell biophys template to implement migliore's shunt current params 
*** see how this effects impedance in original morph 
*** see how morph effects a realistic impedance profile 
** evidence for changes is m-type k+ channels affecting impedance from Dewell2019-ra
** Migliore2012-ev in ca1 pyramidal cells, probably no m-type in dendrites - same hold for L5b PYR?

* [2020-7-25 Sat] - working on WIP 
** From Salva's paper on improving PT cell:
For the current simulations, we further
improved the PT model by 1. increasing the concentration of Ca2+ channels (“hot zones”) between the
nexus and apical tuft, following parameters published in 52; 2. lowering dendritic Na+ channel density in
order to increase the threshold required to elicit dendritic spikes, which then required adapting the axon
sodium conductance and axial resistance to maintain a similar f-I curve; 3. replacing the HCN channel
model and distribution with a more recent implementation 88.The new HCN channel reproduced a wider
range of experimental observations than our previous implementation 68, including the change from
excitatory to inhibitory effect in response to synaptic inputs of increasing strength 44. This was achieved by
including a shunting current proportional to Ih. We tuned the HCN parameters (lk and vrevlk) and passive
parameters to reproduce the findings noted above, while keeping a consistent f-I curve consistent 131.
Dura-Bernal2019-pj

* [2020-8-5 Wed] - notes on task channels and discussion 
** HCN channel from migliore and migliore
*** While the dendritic impedance was not considered in the development 
of any of the models considered here, it is only the model from Dura-Bernal et al. (2019)
which accurately captures features from both dendritic impedance amplitude and
phase profiles.
*** The updated model of I$_h$ in conjunction with a TASK-like shunt current was
included in the model to account for the paradoxical change from the excitatory 
to inhibitory effects of I$_h$ in response to increasingly strong synaptic inputs 
\cite{George2009-ad,Migliore2012-ev, Dura-Bernal2019-pj}.
*** The parameters $lk$ and $v_{rev_{lk}}$ were tuned to reproduce this result while 
maintaining a consistent F-I curve with experimental observations \cite{Neymotin2017-dr, Dura-Bernal2019-pj}.
*** Importantly, the Dura-Bernal et al. (2019) model does not reproduce biologically realistic synchronous
frequencies when the HCN model from Migliore \& Migliore (2012) was replaced with
earlier models not including a shunting current but also tuned to maintain the
experimentally observed F-I curve \cite{Kole2006-bm, Harnett2015-sj, Neymotin2017-dr}.
This suggests the model combining I$_h$ and the TASK-like shunting current provide
the best approximation of the currents mediating the location-dependent impedance
profiles of PT cells.
*** It is also noteworthy that the Migliore \& Migliore (2012) model undermines the hypothesis 
that the aforementioned paradoxical effect of I$_h$ is mediated by M-type K$^+$ channel currents.  
The only model studied here which includes M-type K$^+$ channels throughout the dendrites is Kole et al. (2008),
which produces reasonable synchronous frequencies but overestimates dendritic transfer frequencies.
** TASK channels 
*** 

* [2020-9-11 Fri] - revisiting STA
** basically impossible to get spikes by just stimulating near nexus 

* [2020-9-24 Thu] - more sta 
** I, t = getNoise(0, 0.75, t0, 20, 1000, 5) gets a couple spikes for apic20

* [2020-9-25 Fri] - " " 
** rerun previous sims, record voltages as well 
*** apic2 - std: 0.1, amp: 2.5
*** apic12 - std: 0.2, amp: 3.5
*** apic20 - std: 1.0, amp: 15

* [2020-9-27 Sun] - plotting basic STA results 
** code 
from scipy.io import loadmat 
from pylab import fft, convolve 
import numpy as np 
from matplotlib import pyplot as plt 
plt.ion()

# from getCells import M1Cell 
# s = M1Cell() 
# soma_seg = s.net.cells[0].secs['soma']['hObj'](0.5) 
# stim_seg = s.net.cells[0].secs['apic_2']['hObj'](0.5) 
# from chirpUtils import fromtodistance
# dists = [fromtodistance(soma_seg, stim_seg)]
# stim_seg = s.net.cells[0].secs['apic_12']['hObj'](0.5) 
# dists.append(fromtodistance(soma_seg, stim_seg))
# stim_seg = s.net.cells[0].secs['apic_20']['hObj'](0.5) 
# dists.append(fromtodistance(soma_seg, stim_seg))

from getCells import HayCellMig
cell, _ = HayCellMig()
soma_seg = cell.soma[0](0.5)
from chirpUtils import fromtodistance
stim_seg = cell.apic[1](0.5)
dists = [fromtodistance(soma_seg, stim_seg)]
stim_seg = cell.apic[14](0.5)
dists.append(fromtodistance(soma_seg, stim_seg))
stim_seg = cell.apic[36](0.5)
dists.append(fromtodistance(soma_seg, stim_seg))

# files = ['apic2_sta_1000s.mat', 'apic12_sta_2000s.mat', 'apic20_sta_5000s.mat']  
files = ['hay_apic1_sta_1000s.mat', 'hay_apic14_sta_1000s.mat', 'hay_apic36_sta_1000s.mat']

bwinsz = 5 #20
fblur = np.array([1.0/bwinsz for i in range(bwinsz)])  

plt.figure(figsize=(10,6))

for file, dist in zip(files, dists):
    data = loadmat(file)
    avgI = np.mean(data['currents'], axis=0)
    # avgI = avgI[int(3/10*40000)*-1:]
    Ipad = np.concatenate((np.zeros(2**16-40000, dtype=avgI.dtype),avgI))   
    # Ipad = np.concatenate((np.zeros(2**14-len(avgI), dtype=avgI.dtype),avgI))   
    f_current = (fft(Ipad)/len(Ipad))[0:int(len(Ipad)/2)]
    f_smoothI = convolve(np.abs(f_current),fblur, 'same') 
    Freq = np.linspace(0.0, 40000/2.0, len(f_current)) 
    plt.plot(Freq, np.divide(f_smoothI,np.max(f_smoothI)), label=r'%d.1 $\mu$m' % (dist))
plt.xlim(0,50)
plt.legend(fontsize=14)
plt.xlabel('Frequency (Hz)', fontsize=16)
plt.ylabel(r'Normalized |STA|', fontsize=16)
plt.show()

* [2020-9-28 Mon] - pretty weak case for STA location dependence 
** Figures 
*** ./sta_examples_unsmoothed.png 
*** ./sta_examples_5ptSmooth.png 

* [2020-10-5 Mon] - looking at modified hay cell 
** some ok params 
*** apic1: noise - 0.35, amp - 2.5
*** apic14: noise - 0.475, amp - 3.0
*** apic36: noise - 0.75, amp - 3.2

* [2020-10-7 Wed] - srdjan's comments on paper
** abstract
*** "but most captured" -> "catpured" actually changes the meaning of the sentence.
Implies that none of the models captured both.
** introduction 
***  'Corticopontine cells are not carried by the Pyramidal tract, and their function
 is not “pyramidal” either.' - srdjan 
**** changed to "pyramidal tract type neurons".
**** they're described as PT in Dmebrow et al. 2015
**** share similar morphology, high levels of HCN, resonance w/ honest-to-god
pyramidal tract. just a term of convenience to refer to those non-corticothalamic,
non-intratelencephalic, subcortically projecting cells.
*** srdjan's problem paragraph
**** original 
HCN also affects neuronal filtering properties, which are characterized as impedance profiles measured 
at subthreshold voltages \cite{Ulrich2002-dd, Robinson2003-uc, Dembrow2015-zb}.
A common experimental method for probing the impedance response is to stimulate the neuron with a chirp current injection, 
which is a constant-amplitude, sinusoidal waveform whose instantaneous frequency is a linear function of time \cite{Puil1986-uv}.  
Subthreshold resonance is identified when there is a peak in impedance amplitude ($|Z|$) at a nonzero frequency.
It has been observed in a wide variety of species and neuronal cell 
types \cite{Crawford1981-av, Puil1988-ca, Hutcheon2000-gs, Yoshida2011-ec, Ulrich2002-dd},
and is proposed to impart neurons with the ability to discriminate inputs by frequency \cite{Branco2010-nr, Das2017-nz}.
The simple parallel conductance RC circuit (Hodgkin-Huxley model without active \na\ and \k\ channels) does not show resonance properties but instead shows voltage
amplitude fall-off above a certain frequency. IT cells largely respond in this way, showing the properties of a low-pass filter \cite{Dembrow2015-zb}. In order to get resonance, one
must add an inductive reactance such as that provided by HCN channels, which dynamically oppose changes in the direction of current flow\cite{Das2017-nz}.
The presence of relatively high HCN in PT cells endows them with resonance, giving the properties of a bandpass filter.
Impedance phase shift ($\Phi$) describes the temporal relationship between the stimulating current and \vmemb\.
Leading, or inductive, phase is defined as the case where membrane potential peak comes before current peak, and at the synchronous frequency membrane potential and stimulating current are synchronized \cite{Puil1986-uv}. 
Both resonance and synchronous frequencies increase with distance from the soma in PT cells in a
manner similar to hippocampal PCs \cite{Ulrich2002-dd, Dembrow2015-zb, Das2017-nz}.
**** new version 
HCN also affects neuronal filtering properties, which are characterized as impedance profiles measured 
at subthreshold voltages \cite{Ulrich2002-dd, Robinson2003-uc, Dembrow2015-zb}.
A common experimental method for probing the impedance response is to stimulate the neuron with a chirp current injection, 
which is a constant-amplitude, sinusoidal waveform whose instantaneous frequency is a linear function of time \cite{Puil1986-uv}.  
Subthreshold resonance is identified when there is a peak in impedance amplitude ($|Z|$) at a nonzero frequency.
It has been observed in a wide variety of species and neuronal cell 
types \cite{Crawford1981-av, Puil1988-ca, Hutcheon2000-gs, Yoshida2011-ec, Ulrich2002-dd},
and is proposed to impart neurons with the ability to discriminate inputs by frequency \cite{Branco2010-nr, Das2017-nz}.
The simple parallel conductance RC circuit (Hodgkin-Huxley model without active \na\ and \k\ channels) does not show resonance4
properties but instead shows voltage amplitude fall-off above a certain frequency. IT cells largely respond in this way, 
showing the properties of a low-pass filter \cite{Dembrow2015-zb}. In order to get resonance, one
must add an inductance which dynamically oppose changes in the direction of current flow.
The voltage dependent conductance produced by HCN channels fills this role by generating
what has been termed an "anomalous" or "phenomenonolgical" inductance \cite{Das2017-nz}.
The  relatively high expression of HCN in PT cells endows them with resonance, giving the properties of a bandpass filter.
Impedance phase ($\Phi$) is another important, yet often neglected, filter property that describes the temporal relationship 
between the stimulating current and \vmemb\.
Leading, or inductive, phase is defined as the case where peaks in \vmemb\ come before peaks in the stimulating current, 
and at the synchronous frequency membrane potential and stimulating current are synchronized \cite{Puil1986-uv}. 
Inductive phase has been proposed as a mechanism for compensating the location-dependent capacitive delay of dendritic
inputs at the soma (\cite{Vaidya2013-sx}).
Both resonance and synchronous frequnecy are to the sensitive to the presence and distribution of voltage-gated 
ion channels in the dendrites and increase with distance from the soma in PT cells in a
manner similar to hippocampal PCs \cite{Ulrich2002-dd, Dembrow2015-zb, Das2017-nz}.
**** Questions:
1. So, inductive reactance is “a membrane conductance which opposes a change in the direction of current flow”? Is this correct? This definition is confusing to me. 
    Removed mention of reactance, it's not really the important part here. 

2. Sentence-01 introduces the term “inductive reactance”, but Sentence-02 does not follow this prelude in any way or sense. 
What is the connection between inductive reactance mentioned in Sentence-01 and the content of the Sentence-02? 
    Format has changed obv, but in short HCN acts like an inductor, membrane acts like RLC circuit 

3. Is “inductive reactance” mentioned in Sentence-01 the same as “imaginary valued reactance” mentioned in Methods? 
    Partly.  There are inductive and capacitive contributions to reactance (which is analogous to resistance in the context of alternating currents).

4. “Impedance phase shift (Φ) describes the temporal relationship between the stimulating current and Vmemb Leading”. 
Why should anyone study “phase shift”? I am missing that point. 
    Cited one physiologically relevant aspect: "Inductive phase has been proposed as a mechanism for compensating the location-dependent capacitive delay of dendritic
    inputs at the soma (\cite{Vaidya2013-sx})."
    Also, I at least partially address that by the addition of "Both resonance and synchronous frequnecy are to the sensitive to the presence and distribution 
    of voltage-gated ion channels in the dendrites".  Right now I'm deliberately avoiding the questions of how do these impedance properties translate
    to physiological conditions.  People argue for a strong relationship between resonance and spiking, but I think it's a tenous argument.  The relevance of phase
    physiologically is even less clear.  However, these are experimentally observable measures, and they give a fairly detailed picture of the equivalent circuit of the
    neuron, and I think that is important in itself.  Even if resonance or synch frequency isn't "important" physiologically, changes to them reflect changes in cell 
    properties (like HCN dist) which certainly do.

5. How is Sentence-03 related to Sentence-02? 
    Hopefully addressed by: "In addition to resonance, which is a property of $|Z|$, impedance phase shift ($\Phi$) 
    is another important, yet often neglected, filter property".

6. “Synchronous frequencies” are mentioned in Sentence-04 for the first time? The Introduction should perhaps explain 
why anyone should care about “synchronous frequencies”? 
    In addition to what I've said wrt Q4, synchronous frequency provides a single value which partly
    characterized the impedance phase in a similar way to how resonance characterizes impedance amplitude.

** Results
*** deleted 
Experimental studies have shown location-dependent resonance and leading phase in the dendrites of PT cells (\cite{Ulrich2002-dd, Dembrow2015-zb}).
Previous modeling studies have explored the impedance amplitude properties of PT cells with simplified morphologies. 
However, location-dependent gradients in resonance and impedance phase were not extensively investigated 
*** what measures?
They are listed in the next sentence... I think it's more concise this way, but if you feel especially passionate about it could change to:
We computed transfer impedance (Z$_c$), and from it transfer resonance frequency, resonance strength, total inductive phase, and synchronous frequency 
from each of the recorded somatic membrane potential 
waveforms via Equations 1-3 (\fref{methods}I-K).
In an example neuron ({\bf model 5} ), we see location-dependent changes in the impedance profiles with
all features increasing along the apical trunk with distance from the soma (\fref{methods}J, K).
*** I do not see any logic in naming the first neuron described in the Results section “model 5”. This is analogous to calling Monday the “3rd day of the week”. 
**** Monday is the 2nd day of the week...
**** It's not first in the methods section, and it's not first when all 5 are referred to in the next paragraph.  This figure is just meant to be an example
and makes sense (to me) to use the best model wrt experimental data as the example.  
*** resonance strength and total inductive phase 
**** so both of these are defined in the mehtods section.  And since resonance strength is a ratio and total inductive phase is an integral, I believe it would
overcrowd the figure to try to visually indicate them.  I can try to further indicate them in the text if you think it's helpful:
    In an example neuron ({\bf model 5} ), we see location-dependent changes in the impedance profiles with
    transfer resonance frequency, resonance strength (\frac{|Z_c(f_{transfer})|}{|Z_c(0.5)|}}), total inductive phase (area under the positive portion of $\Phi$),
    and synchronous frequency all increasing along the apical trunk with distance from the soma (\fref{methods}J, K).
but this seems cumbersome to me.
*** reader familiarity with degeneracy
**** added to same paragraph: This is an example of degeneracy, wherein different combinations of elements, parameters,
or in this case ion channels, can produce the same behavior.

** Discussion 
*** Did you mean to say Meena et al. (2009)? - Meena George

* [2020-10-19 Mon] - looking at subthreshold membrane oscillations 
** scipy for filtering 
from scipy.signal import butter, lfilter, freqz                                        

def butter_lowpass(cutoff, fs, order=5): 
    nyq = 0.5 * fs 
    normal_cutoff = cutoff / nyq 
    b, a = butter(order, normal_cutoff, btype='low', analog=False) 
    return b, a 
 
def butter_lowpass_filter(data, cutoff, fs, order=5): 
    b, a = butter_lowpass(cutoff, fs, order=order) 
    y = lfilter(b, a, data) 
    return y 
** started new banch of M1 repo for looking at PT5B oscillations 

* [2020-10-20 Tue] - first pass on memb oscillations, Ted's comments 
** first decent run of M1 model - ../data/membOsc/
*** cells with decent subthreshold oscillations 
**** good - 6037, 
**** ok - 6169, 
*** analysis for 6037
import math 
import numpy as np 
from matplotlib import pyplot as plt 
plt.ion()
import json 
from pylab import fft
from scipy.signal import butter, filtfilt

def next_power_of_2(x):
    return 1 if x == 0 else 2**math.ceil(math.log2(x))

def zeroPadFFT(x, Fs):
    nZeros = math.floor((next_power_of_2(len(x)) - len(x)) / 2)
    xPad = [0 for i in range(nZeros)]
    xPad.extend(x - np.mean(x))
    xPad.extend([0 for i in range(nZeros)])
    Y = (fft(xPad)/len(xPad))[0:int(len(xPad)/2)]
    Y = np.abs(Y)
    freq = np.linspace(0, Fs/2.0, len(Y))
    return freq, Y

def butter_lowpass(cutoff, fs, order=5): 
    nyq = 0.5 * fs 
    normal_cutoff = cutoff / nyq 
    b, a = butter(order, normal_cutoff, btype='low', analog=False) 
    return b, a 

def butter_lowpass_filter(data, cutoff, fs, order=5): 
    b, a = butter_lowpass(cutoff, fs, order=order) 
    y = filtfilt(b, a, data) 
    return y    

file = open('membOsc_v0.json')
data = json.load(file)
file.close()
cellName = 'cell_6037'
v = data['simData']['V_soma'][cellName]
times = np.linspace(0,1,len(v))
v_trim = [vol for vol, t in zip(v,times) if (0.2 <= t <= 0.875)] 
fs = 1 / (times[1] - times[0])
freq, Y = zeroPadFFT(v_trim, fs)

** Ted's comments 
Big issues first, smaller stuff later.

############################################
Recurring issue: terminology and definitions
############################################

Page 2
======

***
Lines 27 - 34
Issue: inconsistent terminology
What to call different cell classes?
L5 PCs is OK--layer 5 pyramidal cells.
What about names for pyramidal cells classified by their projections, e.g.  corticothalamic, pyramidal tract, and intratelencephalic PCs?
pathname + cell or neuron or PC is OK, e.g. "CT cell," "PT neuron," "IT PC."
What about CT, PT and IT, without "cell" | "neuron" | "PC"?
*** Srdjan also has qualms with nomenclature, should discuss 

***
Line 50
Resonance
Subthreshold resonance: 
impedance amplitude has a maximum at a nonzero f.
f is the resonant frequency
*** Subthreshold resonance occurs when impedance 
amplitude (|Z|) has a maximum at a nonzero frequency 
known as the resonance frequency (f$_{res]$}).

Line 60
Impedance phase
*** don't follow

***
Lines 61-62
Inductive phase / leading phase
peak of v precedes peak of i
Line 63
Synchronous frequency
f at which maxima of v and i are synchronized
*** noted, will change 

Page 3
======

***
Line 69
"resonant frequency" is used without being defined.  A good place to define it might be on page 2 near line 50.
*** addressedd in rewrite above 

Line 76
"resonance frequencies" is used.  For consistency, change to resonant frequencies.
*** noted 

Page 4
======

Lines 113-114
Algebraic formulas for chirp's i and instantaneous frequency

Line 122
"Transfer resonance strength" defined

Equation 4
What is Zc(0.5)?
*** transfer frequency at f = 0.5 Hz . . . could put Hz 

***
Line 127
"Total inductive phase" defined without citation.
Why care about it?  Does it have a specific functional implication?
The amount of phase lead was characterized by integrating phi(f) over the range 
where phi(f) > 0 (Narayanan and Johnston 2008).
*** will add the citation
*** hopefully addressed in introduction with "nductive phase has been proposed 
as a mechanism for compensating the location-dependent capacitive delay of 
dendritic inputs at the soma " (line 64)

***
Line 143
Where is "transfer frequency" defined?
*** will include distinction of transfer from resonance freqeuncy ~line 50 alongside
new description of resonance above 

Page 5
======
***
Line 165
PHI_L is not defined.
*** will reference equation 5

***
Line 166
ZPP is not defined
*** noted 

***
Line 167
PHI_c is not defined.  Also, why would this be lower case c and not upper case C?
*** will reference equation 4 
*** idk, was using lowercase c for transfer impedance 

###################
Problematical stuff
###################
***
Page 2
======

Lines 56-58
Ih doesn't oppose change in the direction of membrane current.  
It enhances membrane current at DC and very low frequencies 
(typically well below f_m = 1/(2*PI*tau_m)).  A cell with a passive 
membrane acts like a low pass filter--below f_m = 1/(2*PI*tau_m) the v 
elicited by injecting current is relatively independent of the current's
frequency, but the response to higher frequency currents falls off by about 
6db/octave.  Ih makes the membrane leakier to current at frequencies well 
below tau_m, but has little effect on high frequency signals.  This carves 
a "hollow" out of the low frequency range of the cell's Z vs. f graph, 
producing a broad peak.

Hutcheon and Yarom 2000 summarized the conditions that lead to resonance 
in neurons in the form of a basic idea plus a simple rule.  The basic idea 
is that resonance emerges from the interaction of two kinds of mechanisms:  
one that attenuates responses to high frequency signals, and another that 
attenuates responses to low frequency signals.  Acting together, these 
mechanisms produce a frequency response with a maximum at a nonzero frequency.  
The first mechanism is present in all cells, because membrane capacitance 
attenuates the v response to membrane currents at high frequencies.  
The second mechanism is provided by a voltage-gated current that follows a 
two-part rule.  Part 1 is that it must "actively oppose changes" of v 
(restated, this means that any perturbation of v elicits a change in the open 
or closed state of the channels that tends to restore v to its original value).  
Part 2 is that it must "activate slowly relative to the membrane time constant."  Ih is just one of many kinds of currents that satisfy this rule.  Garden variety delayed rectifier potassium channels also satisfy it.  A cell that has nothing more than cm and spike potassium channels will have resonance.  Add leak channels, and it still has resonance.  Any ion channel that satisfies the rule will do--doesn't matter whether the channels are opened by depolarization or by hyperpolarization--either way, it produces phenomenological inductance, and combined with the electrical properties of membrane, the result is resonance.

Page 3
======

-------
Methods
-------

What was the maximum elicited/allowed peak-to-peak variation of v?  
What was done to quantify/estimate the degree of nonlinearity over the 
studied v range(s) in each model?
*** haven't checked for the maximum, but from fig 1 about +/-2mV
used the same current stim for all sims.  All I did to check on nonlinearity
make sure voltage excursion was symmetrical to withing 0.1 or so mV.
*** this gets at something that I know has been an issue for Bill and (I think) 
Srdjan - the voltages are so small. 
I know that you want to keep it as small as possible,
but even some of the experimental papers I've seen doing chirp seem to overdue
and have asymmetric voltage excursions 

*** Missing: validation of methods ***
1. against analytical results for a simple model (e.g. single compartment RLC).
2. against results generated with NEURON's Impedance class.


#######################
Composition and clarity
#######################

Page 1
======

Abstract
--------
***
Repeated words:
complex--lines 2 and 4
relationships--lines 2 and 7

***
Line 14
"demonstrated that"
sounds like we knew all along, so why bother with all this modeling?
Better to say 
"found that"
which implies that getting these results involved some (cognitive and computational) effort.

Introduction
------------
***
Line 19
L5 pyramidal neurons aren't "outputs" of cortical circuits.
L5 pyram nn generate the main output of cortical circuits, in the form of spike trains that propagate along axons to other regions of the CNS.


Page 2
======
***
Line 27
Cortical PCs
should start a new paragraph.

***
Line 45
would change
neuronal filtering properties which are characterized
to
neuronal filtering properties, which have been characterized
Why?
1.  There's more than one way to characterize filtering.
2.  Others have done this before.

***
Lines 47-48
would change
the impedance response
to
impedance
because impedance isn't a response.  It is inferred from a response.

***
Line 48
would change
with a chirp current injection, which is
to
by injecting

**** - sort of fixed I think 
Line 49
would change
time [51]
to
time [51] ("linear chirp")
The original form of the sentence suggests incorrectly that linear chirp is the only kind that has been used (others have used exponential chirp, e.g. Gabbiani).

*** 
Line 54
resonance4
should be
resonance

***
Line 65
omit
to the


Page 3
======
***
Line 76
would change
demonstrated
to
examined

Page 4
======

Line 144
"extracted from published data and pooled"
Were all such data available in the source articles as numerical values?  If not, how were they obtained?
***
@misc{Rohatgi2020,
  url = {https://automeris.io/WebPlotDigitizer},
  author = {Rohatgi,  Ankit},
  title = {Webplotdigitizer: Version 4.3},
  year = {2020}
}

Page 5
======
***
Line 147
would omit "here"

***
Lines 156-157
with resonance and synchronous frequencies
If "resonance" is supposed to be "resonant frequency" then change to
with resonant frequency and synchronous frequency
Otherwise provide a quantitative definition of "resonance". 

Paragraph 3 (lines 164-171)

Not a good idea to pile observation after observation onto readers without
some suggestion as to why any of this matters.  How does PHI_L or PHI_c affect 
individual epsp or ipsp waveforms, or integration of a train of psps, locally or
at the soma or spike trigger zone?  How does it affect local (dendritic) spike 
initiation or propagation?  Why should anyone care about 2 Hz--what does this 
frequency have to do with experimentally observed firing rates or spontaneous 
brain rhythms in behaving animals?  (btw:  even sleep is a behavior)

***
Lines 179-180
What "other two HCN models?

***
Line 181
What "They"?  The other HCN models?  The transfer frequencies?

Line 185
What's special about TASK currents?  Are they purely passive or do they have
 some special voltage gating?


Page 6
======

***
Line 191
Exactly what is meant by "simple HH parallel RC circuit model"?

***
Line 214-215
"but they did not contribute equally" to what?

***
Line 215
change
modulating
to
varying

***
Lines 217-218
"transfer impedance between the distal end of the apical trunk" and what?

***
Lines 219-220
"Changes . . . "
Ambiguous.  Does this mean
Ih had a bigger effect on Z profile than on shunting current
or
Ih had a bigger effect on Z profile than shunting current did
?
***
Lines 219-220 and elsewhere
Shouldn't the statement be that h channel density had a stronger effect on Z profile than shunt channel did?  
After all, you can't change any channel's current directly--you can only change its channel density.

***
Lines 221 and elsewhere.
"Q-factor"
Q factor should not be hyphenated.
Which definition of Q factor are you using?  Ratio of center frequency to resonance width?  Are you defining resonance width as the frequency range over which power is > half power at resonant frequency?  Given a plot of Z vs. f, how do you define power at resonant frequency and at half resonant frequency?  An illustration that uses a Bode plot would help.

***
The values in Fig. 7A seem very high to me.  I'm not used to seeing such a high degree of resonance in model cells.  Most responses to swept sine that I've seen look like Figs. 1C and D, which demonstrate Q values < 0.5.  I'd like to see a time domain plot of a swept sine response for a cell with a Q of 3.

Lines 226-227
There are no contour lines in Fig. 7.

Page 7
======

***
Line 233
would change
was included
to
was intended

***
Line 234
Does the shunting current actually have an activation variable?  Isn't it just a passive current, with no voltage gating?

***
Lines 235-236
consistent F-I curve with
should be
F-I curve consistent with

***
Line 248
change 
which
to
that

***
Line 255
Does "how" refer to
"description of an observation"
or does it mean
"mechanism that accounts for something that is observed"
?

***
Lines 264-265
Not a sentence.

***
Line 265
from "is" on is a conjecture.  I'd prefer to say "seems".  Leave as is and see whether reviewer says anything.

***
Line 269
"with" isn't quite right.  Maybe "for example" instead?

***
Line 270
HCN channels may account for this resonance in these cells, but it doesn't account for all resonance phenomena.  Maybe change
"resonance"
to
"resonance in these cells"
or
"resonance in PT neurons"

Page 8
======
***
Line 281
would change
only modulate
to
but can only modulate

Figure 1
========
Ih increases exponentially with distance from the soma.
If Ih accounts for resonance, why does resonance decrease 
with distance from the soma?  Shouldn't it increase with distance?

Figure 2
========
Symbols need to be bigger, and a different style should be used for 
experimental data (so the latter can be distinguished from simulation results).  
Similar comments for other figures with small symbols.

Figure 3
========
Nice pictures.  Phase shift in D is not impressive.  Experimentalists will be 
underwhelmed.  "When was the last time I saw a sine wave in a cell?"  
Demo of effect on a psp waveform or a coincidence-detection scenario might
be more compelling.

* [2020-10-21 Wed] - meeting w/ Ted, Srdjan, Bill 
** Major topics
*** Nomencalture, stick w/ just PT? Srdjan's problem w/ corticopontine
**** just PT 

*** Description of impedance, resonance, etc. (lines 46-67)
**** get rid of anomalous phenomenological, fix mechanism of HCN 
**** make sure impedance phase description 
**** single transient, >L -> earlier peak in V 
**** Ted's .ses file . . . 

*** Methods/Validation (voltage excursion amplitude, comparison w/ analytical
 or nrn impedance class)
**** mention check for symmetry about Vrest 
**** repeat fig 1 sims w/ different amplitude current stim 

** Minor topics 
*** equations defining chirp stimulus
**** include in  methods 

*** Numbering of the models 
**** go for it 

*** description of results in 


* [2020-10-22 Thu] - sorting out things from comments 
** doubling current amplitude 
traces = loadmat('apic13_doubleAmp_traces.mat') 
plt.figure()
plt.subplot(1,3,1)
plt.plot(np.linspace(-5,25,len(traces['time'][0])), traces['current_np'][0] - traces['current_np'][0][int(4990*1/0.025)], 'b')
plt.subplot(1,3,2)
plt.plot(np.linspace(-5,25,len(traces['time'][0])), traces['cis_np'][0] - traces['cis_np'][0][int(4990*1/0.025)], 'b') 
plt.subplot(1,3,3)
plt.plot(np.linspace(-5,25,len(traces['time'][0])), traces['soma_np'][0] - traces['soma_np'][0][int(4990*1/0.025)], 'b')
traces = loadmat('M1_PTcell/trunk_data2/apic_130.5_traces.mat') 
plt.subplot(1,3,1)
plt.xlim(-0.5, 20.5)
plt.ylabel('Current (mA)', fontsize=16)
plt.xticks(fontsize=14)
plt.title('Stimulus', fontsize=18)
plt.plot(np.linspace(-5,25,len(traces['time'][0])), traces['current_np'][0] - traces['current_np'][0][int(4990*1/0.025)], 'r--')
plt.subplot(1,3,2)
plt.plot(np.linspace(-5,25,len(traces['time'][0])), traces['cis_np'][0] - traces['cis_np'][0][int(4990*1/0.025)], 'r--') 
plt.xlim(-0.5, 20.5)
plt.ylim(-2.5,2.5)
plt.ylabel(r'V$_{dend}$ (mV)', fontsize=16)
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.xlabel('Time (s)', fontsize=16)
plt.title('Local Membrane Potential', fontsize=18)
plt.subplot(1,3,3)
plt.plot(np.linspace(-5,25,len(traces['time'][0])), traces['soma_np'][0] - traces['soma_np'][0][int(4990*1/0.025)], 'r--')
plt.xlim(-0.5, 20.5)
plt.ylim(-2.5,2.5)
plt.ylabel(r'V$_{soma}$ (mV)', fontsize=16)
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.title('Somatic Membrane Potential', fontsize=18)

plt.figure()
data = loadmat('apic13_doubleAmp.mat')
plt.subplot(2,2,1)
plt.plot(data['Freq'][0], data['ZinAmp'][0], 'b')
plt.subplot(2,2,2)
plt.plot(data['Freq'][0], data['ZcAmp'][0], 'b')
plt.subplot(2,2,3)
plt.plot(data['Freq'][0], data['ZinPhase'][0], 'b')
plt.subplot(2,2,4)
plt.plot(data['Freq'][0], data['ZcPhase'][0], 'b')
data = loadmat('M1_PTcell/trunk_data2/apic_130.5.mat')
plt.subplot(2,2,1)
plt.plot(data['Freq'][0], data['ZinAmp'][0], 'r--')
plt.title('Input Impedance', fontsize=18)
plt.ylabel(r'Impedance Amplitude (M$\Omega$)', fontsize=16)
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.subplot(2,2,2)
plt.plot(data['Freq'][0], data['ZcAmp'][0], 'r--')
plt.ylabel(r'Impedance Amplitude (M$\Omega$)', fontsize=16)
plt.title('Transfer Impedance', fontsize=18)
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.subplot(2,2,3)
plt.plot(data['Freq'][0], data['ZinPhase'][0], 'r--')
plt.xlabel('Frequency (Hz)', fontsize=16)
plt.ylabel('Impedance Phase (rad)', fontsize=16)
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.subplot(2,2,4)
plt.plot(data['Freq'][0], data['ZcPhase'][0], 'r--')
plt.xlabel('Frequency (Hz)', fontsize=16)
plt.ylabel('Impedance Phase (rad)', fontsize=16)
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)

* [2020-10-23 Fri] - toy example 
** plotting results of chirp w/ and w/out L 
from matplotlib import pyplot as plt 
plt.ion()
from scipy.io import loadmat 
import numpy as np 

traces = loadmat('toy_withL_traces.mat')
plt.subplot(3,2,1)
plt.plot(np.linspace(-5,55,len(traces['time'][0])), traces['cis_np'][0] - traces['cis_np'][0][int(4990*1/0.025)], 'r', label='10 kH')
plt.subplot(3,2,2)
plt.plot(np.linspace(-5,55,len(traces['time'][0])), traces['soma_np'][0] - traces['soma_np'][0][int(4990*1/0.025)], 'r')
traces = loadmat('toy_withoutL_traces.mat')
plt.subplot(3,2,1)
plt.plot(np.linspace(-5,55,len(traces['time'][0])), traces['cis_np'][0] - traces['cis_np'][0][int(4990*1/0.025)], 'b', label='0.001 H') 
plt.subplot(3,2,2)
plt.plot(np.linspace(-5,55,len(traces['time'][0])), traces['soma_np'][0] - traces['soma_np'][0][int(4990*1/0.025)], 'b')


data = loadmat('toy_withoutL.mat')
plt.subplot(3,2,3)
plt.plot(data['Freq'][0], data['ZinAmp'][0], 'b')
plt.subplot(3,2,4)
plt.plot(data['Freq'][0], data['ZcAmp'][0], 'b')
plt.subplot(3,2,5)
plt.plot(data['Freq'][0], data['ZinPhase'][0], 'b')
plt.subplot(3,2,6)
plt.plot(data['Freq'][0], data['ZcPhase'][0], 'b')

data = loadmat('toy_withL.mat')
plt.subplot(3,2,3)
plt.plot(data['Freq'][0], data['ZinAmp'][0], 'r')
plt.subplot(3,2,4)
plt.plot(data['Freq'][0], data['ZcAmp'][0], 'r')
plt.subplot(3,2,5)
plt.plot(data['Freq'][0], data['ZinPhase'][0], 'r')
plt.subplot(3,2,6)
plt.plot(data['Freq'][0], data['ZcPhase'][0], 'r')

plt.subplot(3,2,1)
plt.xlim(-1,51)
plt.ylim(-2,2)
plt.xlabel('Time (s)', fontsize=14)
plt.ylabel(r'$\Delta$ V$_{dend}$ (mV)', fontsize=14)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.title('Dendrite', fontsize=16)

plt.subplot(3,2,2)
plt.xlim(-1,51)
plt.ylim(-2,2)
plt.xlabel('Time (s)', fontsize=14)
plt.ylabel(r'$\Delta$ V$_{soma}$ (mV)', fontsize=14)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.title('Soma', fontsize=16)

plt.subplot(3,2,3)
plt.ylim(0,55)
plt.xlim(0,1000)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.ylabel('$|Z_{in}|$ (M$\Omega$)', fontsize=14)
plt.title('Input Impedance', fontsize=16)

plt.subplot(3,2,4)
plt.ylim(0,55)
plt.xlim(0,1000)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.ylabel('$|Z_{in}|$ (M$\Omega$)', fontsize=14)
plt.title('Transfer Impedance', fontsize=16)

plt.subplot(3,2,5)
plt.ylabel(r'$\Phi_{in}$ (rad)', fontsize=14)
plt.xlabel('Frequency (Hz)', fontsize=14)
plt.yticks([-np.pi/2, 0, np.pi/2], [r'$\frac{-\pi}{2}$', '0', r'$\frac{\pi}{2}$'],fontsize=14)
plt.xticks(fontsize=12)

plt.subplot(3,2,6)
plt.ylabel(r'$\Phi_{c}$ (rad)', fontsize=14)
plt.xlabel('Frequency (Hz)', fontsize=14)
plt.yticks([-np.pi/2, 0, np.pi/2], [r'$\frac{-\pi}{2}$', '0', r'$\frac{\pi}{2}$'],fontsize=14)
plt.xticks(fontsize=12)
plt.tight_layout()

* [2020-10-24 Sat] more syn stuff 
** gmax for 1mv at soma for model/sec 
*** m1/apic_22(0.8) - 1.5e-2
*** m1/apic_13(0.5) - 3e-3 
*** ptharnett/apic_22(0.8) - 1.5e-3

** plotting m1 apic_13(0.5) w/ and w/out hcn 
from scipy.io import loadmat 
import numpy as np 
from matplotlib import pyplot as plt 
plt.ion()

data = loadmat('m1pt_apic1305_syn.mat')
data_zd = loadmat('m1pt_apic1305_zd_syn.mat')

time = [t for t in data['time'][0] if 4995 <= t <= 5020]
soma_v = [v for v, t in zip(data['soma_v'][0], data['time'][0]) if 4995 <= t <= 5020]
dend_v = [v for v, t in zip(data['dend_v'][0], data['time'][0]) if 4995 <= t <= 5020]
soma_v_zd = [v for v, t in zip(data_zd['soma_v'][0], data_zd['time'][0]) if 4995 <= t <= 5020]
dend_v_zd = [v for v, t in zip(data_zd['dend_v'][0], data_zd['time'][0]) if 4995 <= t <= 5020]
i = [i for i, t in zip(data['i'][0], data['time'][0]) if 4995 <= t <= 5020]

time = np.array(time)
soma_v = np.array(soma_v)
dend_v = np.array(dend_v)
soma_v_zd = np.array(soma_v_zd)
dend_v_zd = np.array(dend_v_zd)
i = np.array(i)

plt.figure()
plt.subplot(2,1,1)
plt.plot(time-5000, i, 'k')

plt.subplot(2,1,2)
plt.plot(time-5000, dend_v-dend_v[0], 'r', label='Dendrite')
plt.plot(time-5000, soma_v-soma_v[0], 'r--', label='Soma')
plt.plot(time-5000, dend_v_zd-dend_v_zd[0], 'b', label='Dendrite - ZD7288')
plt.plot(time-5000, soma_v_zd-soma_v_zd[0], 'b--', label='Soma - ZD7288')

plt.subplot(2,1,1)
plt.plot([1,1], [-0.22,0.01],'k--')
plt.ylim(-0.22,0.01)
plt.xlim(-1,15)
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.ylabel('Current (nA)', fontsize=16)
plt.title('Stimulus', fontsize=18)

plt.subplot(2,1,2)
plt.xlabel('Time (ms)', fontsize=16)
plt.ylabel(r'$\Delta$ V$_{memb}$ (mV)',fontsize=16)
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.title('Response', fontsize=18)
plt.plot([1,1], [-0.1, 7.1], 'k--')
plt.xlim(-1,15)
plt.ylim(-0.1, 7.1)
plt.plot([time[np.argmax(dend_v)]-5000, time[np.argmax(dend_v)]-5000], [-0.1, np.max(dend_v)-dend_v[0]], 'r')
plt.plot([time[np.argmax(soma_v)]-5000, time[np.argmax(soma_v)]-5000], [-0.1, np.max(soma_v)-soma_v[0]], 'r--')
plt.plot([time[np.argmax(dend_v_zd)]-5000, time[np.argmax(dend_v_zd)]-5000], [-0.1, np.max(dend_v_zd)-dend_v_zd[0]], 'b')
plt.plot([time[np.argmax(soma_v_zd)]-5000, time[np.argmax(soma_v_zd)]-5000], [-0.1, np.max(soma_v_zd)-soma_v_zd[0]], 'b--')
plt.legend()

** toy model 
import numpy as np 
plt.figure()
plt.subplot(2,1,1)
plt.plot(time, i, 'k')
plt.plot([1,1], [-0.035, 0.001],'k--')
plt.ylim(-0.035, 0.001)
plt.xlim(0,8)
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.ylabel('Current (nA)', fontsize=16)
plt.title('Stimulus', fontsize=18)
plt.subplot(2,1,2)
plt.plot(time, dend_v, 'r', label='Dendrite - L = 10 kH')
plt.plot(time, soma_v, 'r--', label='Soma - L = 10 kH')
plt.plot(time, dend_v_noL, 'b', label='Dendrite - L = 1 mH')
plt.plot(time, soma_v_noL, 'b--', label='Soma - L = 1 mH')
plt.plot([time[np.argmax(dend_v)], time[np.argmax(dend_v)]], [-70, np.max(dend_v.as_numpy())], 'r')
plt.plot([time[np.argmax(soma_v)], time[np.argmax(soma_v)]], [-70, np.max(soma_v.as_numpy())], 'r--')
plt.plot([time[np.argmax(dend_v_noL)], time[np.argmax(dend_v_noL)]], [-70, np.max(dend_v_noL.as_numpy())], 'b')
plt.plot([time[np.argmax(soma_v_noL)], time[np.argmax(soma_v_noL)]], [-70, np.max(soma_v_noL.as_numpy())], 'b--')

** impedance for detailed model 
from scipy.io import loadmat 
from matplotlib import pyplot as plt 
plt.ion()
import numpy as np 

data = loadmat('M1_PTcell/trunk_data2/apic_130.5.mat')
# data_zd = loadmat('M1_PTcell/noih_trunk_data/apic_130.5.mat')
data_zd = loadmat('apic13_noih.mat')
plt.figure()
plt.subplot(2,3,1)
plt.plot(data['Freq'][0], data['ZinAmp'][0], 'r', label='Control')
plt.plot(data_zd['Freq'][0], data_zd['ZinAmp'][0], 'b', label='ZD7288')
plt.subplot(2,3,4)
plt.plot(data['Freq'][0], data['ZinPhase'][0], 'r')
plt.plot(data_zd['Freq'][0], data_zd['ZinPhase'][0], 'b')
plt.subplot(2,3,2)
plt.plot(data['Freq'][0], data['ZcAmp'][0], 'r--', label='Control')
plt.plot(data_zd['Freq'][0], data_zd['ZcAmp'][0], 'b--', label='ZD7288')
plt.subplot(2,3,5)
plt.plot(data['Freq'][0], data['ZcPhase'][0], 'r--')
plt.plot(data_zd['Freq'][0], data_zd['ZcPhase'][0], 'b--')
plt.subplot(2,3,1)
plt.legend()
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.ylabel(r'$|Z_{in}|$ (M$\Omega$)', fontsize=16)
plt.title('Input Impedance', fontsize=18)
plt.xlim(0.5,20)
plt.subplot(2,3,2)
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.ylabel(r'$|Z_{c}|$ (M$\Omega$)', fontsize=16)
plt.title('Transfer Impedance', fontsize=18)
plt.xlim(0.5,20)
plt.subplot(2,3,4)
plt.plot([0.5,20], [0,0], 'k--')
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.xlabel('Frequency (Hz)', fontsize=16)
plt.ylabel(r'$\Phi_{in}$ (rad)', fontsize=16)
plt.xlim(0.5,20)
plt.subplot(2,3,5)
plt.plot([0.5,20], [0,0], 'k--')
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.xlabel('Frequency (Hz)', fontsize=16)
plt.ylabel(r'$\Phi_{c}$ (rad)', fontsize=16)
plt.xlim(0.5,20)

data = loadmat('m1pt_apic1305_syn.mat')
data_zd = loadmat('m1pt_apic1305_zd_syn.mat')

time = [t for t in data['time'][0] if 4995 <= t <= 5020]
soma_v = [v for v, t in zip(data['soma_v'][0], data['time'][0]) if 4995 <= t <= 5020]
dend_v = [v for v, t in zip(data['dend_v'][0], data['time'][0]) if 4995 <= t <= 5020]
soma_v_zd = [v for v, t in zip(data_zd['soma_v'][0], data_zd['time'][0]) if 4995 <= t <= 5020]
dend_v_zd = [v for v, t in zip(data_zd['dend_v'][0], data_zd['time'][0]) if 4995 <= t <= 5020]
i = [i for i, t in zip(data['i'][0], data['time'][0]) if 4995 <= t <= 5020]

time = np.array(time)
soma_v = np.array(soma_v)
dend_v = np.array(dend_v)
soma_v_zd = np.array(soma_v_zd)
dend_v_zd = np.array(dend_v_zd)
i = np.array(i)

plt.subplot(2,3,3)
plt.plot(time-5000, i, 'k')

plt.subplot(2,3,6)
plt.plot(time-5000, dend_v-dend_v[0], 'r', label='Dendrite')
plt.plot(time-5000, soma_v-soma_v[0], 'r--', label='Soma')
plt.plot(time-5000, dend_v_zd-dend_v_zd[0], 'b', label='Dendrite - ZD7288')
plt.plot(time-5000, soma_v_zd-soma_v_zd[0], 'b--', label='Soma - ZD7288')

plt.subplot(2,3,3)
plt.plot([1,1], [-0.22,0.01],'k--')
plt.ylim(-0.22,0.0)
plt.xlim(0,15)
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.ylabel('Current (nA)', fontsize=16)
plt.title('Stimulus', fontsize=18)

plt.subplot(2,3,6)
plt.xlabel('Time (ms)', fontsize=16)
plt.ylabel(r'$\Delta$ V$_{memb}$ (mV)',fontsize=16)
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.title('Response', fontsize=18)
plt.plot([1,1], [-0.1, 7.1], 'k--')
plt.xlim(0,15)
plt.ylim(-0.1, 7.1)
plt.plot([time[np.argmax(dend_v)]-5000, time[np.argmax(dend_v)]-5000], [-0.1, np.max(dend_v)-dend_v[0]], 'r')
plt.plot([time[np.argmax(soma_v)]-5000, time[np.argmax(soma_v)]-5000], [-0.1, np.max(soma_v)-soma_v[0]], 'r--')
plt.plot([time[np.argmax(dend_v_zd)]-5000, time[np.argmax(dend_v_zd)]-5000], [-0.1, np.max(dend_v_zd)-dend_v_zd[0]], 'b')
plt.plot([time[np.argmax(soma_v_zd)]-5000, time[np.argmax(soma_v_zd)]-5000], [-0.1, np.max(soma_v_zd)-soma_v_zd[0]], 'b--')
plt.legend()

** toy model impedance 
from matplotlib import pyplot as plt 
plt.ion()
import numpy as np 
from scipy.io import loadmat 

data = loadmat('toy_withL.mat')
plt.subplot(2,3,1)
plt.plot(data['Freq'][0], data['ZinAmp'][0], 'r', label='L = 10 kH')
plt.subplot(2,3,2)
plt.plot(data['Freq'][0], data['ZcAmp'][0], 'r')
plt.subplot(2,3,4)
plt.plot(data['Freq'][0], data['ZinPhase'][0], 'r')
plt.subplot(2,3,5)
plt.plot(data['Freq'][0], data['ZcPhase'][0], 'r')

data = loadmat('toy_withoutL.mat')
plt.subplot(2,3,1)
plt.plot(data['Freq'][0], data['ZinAmp'][0], 'b', label='L = 1 mH')
plt.subplot(2,3,2)
plt.plot(data['Freq'][0], data['ZcAmp'][0], 'b--')
plt.subplot(2,3,4)
plt.plot(data['Freq'][0], data['ZinPhase'][0], 'b')
plt.subplot(2,3,5)
plt.plot(data['Freq'][0], data['ZcPhase'][0], 'b--')

plt.subplot(2,3,1)
plt.ylim(0,55)
plt.xlim(0,1000)
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.ylabel('$|Z_{in}|$ (M$\Omega$)', fontsize=16)
plt.title('Input Impedance', fontsize=18)
plt.legend()

plt.subplot(2,3,2)
plt.ylim(0,55)
plt.xlim(0,1000)
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.ylabel('$|Z_{in}|$ (M$\Omega$)', fontsize=16)
plt.title('Transfer Impedance', fontsize=18)

plt.subplot(2,3,4)
plt.ylabel(r'$\Phi_{in}$ (rad)', fontsize=16)
plt.xlabel('Frequency (Hz)', fontsize=16)
plt.yticks([-np.pi/2, 0, np.pi/2], [r'$\frac{-\pi}{2}$', '0', r'$\frac{\pi}{2}$'],fontsize=14)
plt.xticks(fontsize=14)
plt.plot([0,1000],[0,0],'k--')
plt.xlim(0,1000)

plt.subplot(2,3,5)
plt.ylabel(r'$\Phi_{c}$ (rad)', fontsize=16)
plt.xlabel('Frequency (Hz)', fontsize=16)
plt.yticks([-np.pi/2, 0, np.pi/2], [r'$\frac{-\pi}{2}$', '0', r'$\frac{\pi}{2}$'],fontsize=14)
plt.xticks(fontsize=14)
plt.plot([0,1000],[0,0],'k--')
plt.xlim(0,1000)

data = loadmat('withL_syn_traces.mat')
data_zd = loadmat('withoutL_syn_traces.mat')
soma_v = data['soma_v'][0]
dend_v = data['dend_v'][0]
time = data['time'][0]
i = data['i'][0]
soma_v_noL = data_zd['soma_v'][0]
dend_v_noL = data_zd['dend_v'][0]

plt.subplot(2,3,3)
plt.plot(time, i, 'k')
plt.plot([1,1], [-0.035, 0.001],'k--')
plt.ylim(-0.035, 0.001)
plt.yticks([-0.035, 0.0], fontsize=14)
plt.xlim(0,8)
plt.xticks(fontsize=14)
# plt.yticks(fontsize=14)
plt.ylabel('Current (nA)', fontsize=16)
plt.title('Stimulus', fontsize=18)
plt.subplot(2,3,6)
plt.plot(time, dend_v-dend_v[0], 'r', label='Dendrite - L = 10 kH')
plt.plot(time, soma_v-soma_v[0], 'r--', label='Soma - L = 10 kH')
plt.plot(time, dend_v_noL-dend_v_noL[0], 'b', label='Dendrite - L = 1 mH')
plt.plot(time, soma_v_noL-soma_v_noL[0], 'b--', label='Soma - L = 1 mH')
plt.plot([time[np.argmax(dend_v-dend_v[0])], time[np.argmax(dend_v-dend_v[0])]], [0, np.max(dend_v-dend_v[0])], 'r')
plt.plot([time[np.argmax(soma_v-soma_v[0])], time[np.argmax(soma_v-soma_v[0])]], [0, np.max(soma_v-soma_v[0])], 'r--')
plt.plot([time[np.argmax(dend_v_noL-dend_v_noL[0])], time[np.argmax(dend_v_noL-dend_v_noL[0])]], [0, np.max(dend_v_noL-dend_v_noL[0])], 'b')
plt.plot([time[np.argmax(soma_v_noL-soma_v_noL[0])], time[np.argmax(soma_v_noL-soma_v_noL[0])]], [0, np.max(soma_v_noL-soma_v_noL[0])], 'b--')
plt.xlim(0,8)
# plt.plot([1,1],[-70,-68.5],'k--')
# plt.ylim(-70,-68.5)
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.ylabel(r'$\Delta$ V$_{memb}$ (mV)', fontsize=16)
plt.xlabel('Time (ms)', fontsize=16)
plt.legend()
plt.title('Response', fontsize=18)
plt.xlim(0,5)
plt.ylim(0,1.2)
plt.plot([1,1],[0,1.2], 'k--')


* [2020-10-25 Sun] - looking at phase fig 
** hardly any difference in time to peak for m1 vs harnett 
*** could reduce m1 EPSP amplitude (currently 1.2 to harnetts ~1.0)
*** could compare to kole version instead where there's 0 inductive phase 

* [2020-10-27 Tue] - square + syn 
** toy model 
from scipy.io import loadmat 
from matplotlib import pyplot as plt 
plt.ion()

data = loadmat('toyModel_sqaureWave.mat')
data_zd = loadmat('toyModel_noL_sqaureWave.mat')

plt.subplot(1,2,1)
plt.plot(data['time'][0]-1, data['dend_v'][0]-data['dend_v'][0][0], 'r', label='Dendrite 10 kH')
plt.plot(data['time'][0]-1, data['soma_v'][0]-data['soma_v'][0][0], 'r--', label='Soma 10 kH')
plt.plot(data_zd['time'][0]-1, data_zd['dend_v'][0]-data_zd['dend_v'][0][0], 'b', label='Dendrite 1 mH')
plt.plot(data_zd['time'][0]-1, data_zd['soma_v'][0]-data_zd['soma_v'][0][0], 'b--', label='Soma 1 mH')
plt.xlabel('Time (ms)', fontsize=16)
plt.ylabel(r'$\Delta$ V$_{memb}$ (mV)', fontsize=16)
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.title('Response to Square Wave', fontsize=18)
plt.xlim(-1,10)

data = loadmat('withL_syn_traces.mat')
data_zd = loadmat('withoutL_syn_traces.mat')

plt.subplot(1,2,2)
plt.plot(data['time'][0], data['dend_v'][0]-data['dend_v'][0][0], 'r', label='Dendrite 10 kH')
plt.plot(data['time'][0], data['soma_v'][0]-data['soma_v'][0][0], 'r--', label='Soma 10 kH')
plt.plot(data_zd['time'][0], data_zd['dend_v'][0]-data_zd['dend_v'][0][0], 'b', label='Dendrite 1 mH')
plt.plot(data_zd['time'][0], data_zd['soma_v'][0]-data_zd['soma_v'][0][0], 'b--', label='Soma 1 mH')
plt.xlabel('Time (ms)', fontsize=16)
plt.ylabel(r'$\Delta$ V$_{memb}$ (mV)', fontsize=16)
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.title('Response to Synaptic Stimulation', fontsize=18)
plt.plot([1,1], [0,1.2], 'k--')
plt.ylim(0,1.2)
plt.xlim(0,10)

** detailed model 
from scipy.io import loadmat 
from matplotlib import pyplot as plt 
plt.ion()
import numpy as np 

data = loadmat('detailed_sqaureWave.mat')
data_zd = loadmat('detailed_noih_sqaureWave.mat')

time = [t for t in data['time'][0] if 4995 <= t <= 6000]
soma_v = [v for v, t in zip(data['soma_v'][0], data['time'][0]) if 4995 <= t <= 6000]
dend_v = [v for v, t in zip(data['dend_v'][0], data['time'][0]) if 4995 <= t <= 6000]
soma_v_zd = [v for v, t in zip(data_zd['soma_v'][0], data_zd['time'][0]) if 4995 <= t <= 6000]
dend_v_zd = [v for v, t in zip(data_zd['dend_v'][0], data_zd['time'][0]) if 4995 <= t <= 6000]

time = np.array(time)
soma_v = np.array(soma_v)
dend_v = np.array(dend_v)
soma_v_zd = np.array(soma_v_zd)
dend_v_zd = np.array(dend_v_zd)

soma_dif = soma_v-soma_v[0]
dend_dif = dend_v-dend_v[0]
soma_zd_dif = soma_v_zd-soma_v_zd[0]
dend_zd_dif = dend_v_zd-dend_v_zd[0]

soma_max = np.max(soma_dif)
dend_max = np.max(dend_dif)
soma_zd_max = np.max(soma_zd_dif)
dend_zd_max = np.max(dend_zd_dif)

soma_ind = 0
while soma_dif[soma_ind] < 0.99 * soma_max:
    soma_ind = soma_ind + 1
dend_ind = 0
while dend_dif[dend_ind] < 0.99 * dend_max:
    dend_ind = dend_ind + 1
soma_zd_ind = 0
while soma_zd_dif[soma_zd_ind] < 0.99 * soma_zd_max:
    soma_zd_ind = soma_zd_ind + 1
dend_zd_ind = 0
while dend_zd_dif[dend_zd_ind] < 0.99 * dend_zd_max:
    dend_zd_ind = dend_zd_ind + 1

plt.subplot(1,2,1)
plt.plot(time-5000, dend_v-dend_v[0], 'r', label='Dendrite')
plt.plot(time-5000, soma_v-soma_v[0], 'r--', label='Soma')
plt.plot(time-5000, dend_v_zd-dend_v_zd[0], 'b', label='Dendrite - ZD7288')
plt.plot(time-5000, soma_v_zd-soma_v_zd[0], 'b--', label='Soma - ZD7288')
plt.plot([time[soma_ind]-5000, time[soma_ind]-5000], [-0.2, soma_v[soma_ind]-soma_v[0]], 'r--')
plt.plot([time[dend_ind]-5000, time[dend_ind]-5000], [-0.2, dend_v[dend_ind]-dend_v[0]], 'r')
plt.plot([time[soma_zd_ind]-5000, time[soma_zd_ind]-5000], [-0.2, soma_v_zd[soma_zd_ind]-soma_v_zd[0]], 'b--')
plt.plot([time[dend_zd_ind]-5000, time[dend_zd_ind]-5000], [-0.2, dend_v_zd[dend_zd_ind]-dend_v_zd[0]], 'b')
plt.ylim(-.2, 17.5)
plt.xlim(-2,800)
plt.plot([-2,800], [0,0], 'k--')
plt.ylabel(r'$\Delta$ V$_{memb}$ (mV)', fontsize=16)
plt.xlabel('Time (ms)', fontsize=16)
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.title('Response to Square Wave', fontsize=18)

data = loadmat('m1pt_apic1305_syn.mat')
data_zd = loadmat('m1pt_apic1305_zd_syn.mat')

time = [t for t in data['time'][0] if 4995 <= t <= 5600]
soma_v = [v for v, t in zip(data['soma_v'][0], data['time'][0]) if 4995 <= t <= 5600]
dend_v = [v for v, t in zip(data['dend_v'][0], data['time'][0]) if 4995 <= t <= 5600]
soma_v_zd = [v for v, t in zip(data_zd['soma_v'][0], data_zd['time'][0]) if 4995 <= t <= 5600]
dend_v_zd = [v for v, t in zip(data_zd['dend_v'][0], data_zd['time'][0]) if 4995 <= t <= 5600]

time = np.array(time)
soma_v = np.array(soma_v)
dend_v = np.array(dend_v)
soma_v_zd = np.array(soma_v_zd)
dend_v_zd = np.array(dend_v_zd)

plt.subplot(1,2,2)
plt.plot(time-5000, dend_v-dend_v[0], 'r', label='Dendrite')
plt.plot(time-5000, soma_v-soma_v[0], 'r--', label='Soma')
plt.plot(time-5000, dend_v_zd-dend_v_zd[0], 'b', label=r'Dendrite - Block I$_{h}$')
plt.plot(time-5000, soma_v_zd-soma_v_zd[0], 'b--', label=r'Soma - Block I$_{h}$')
plt.plot([time[np.argmax(dend_v)]-5000, time[np.argmax(dend_v)]-5000], [-0.1, np.max(dend_v)-dend_v[0]], 'r')
plt.plot([time[np.argmax(soma_v)]-5000, time[np.argmax(soma_v)]-5000], [-0.1, np.max(soma_v)-soma_v[0]], 'r--')
plt.plot([time[np.argmax(dend_v_zd)]-5000, time[np.argmax(dend_v_zd)]-5000], [-0.1, np.max(dend_v_zd)-dend_v_zd[0]], 'b')
plt.plot([time[np.argmax(soma_v_zd)]-5000, time[np.argmax(soma_v_zd)]-5000], [-0.1, np.max(soma_v_zd)-soma_v_zd[0]], 'b--')
plt.legend(fontsize=14)
plt.ylabel(r'$\Delta$ V$_{memb}$ (mV)', fontsize=16)
plt.plot([1,1],[0,7],'k--')
plt.ylim(0,7)
plt.xlim(0,30)
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.xlabel('Time (ms)', fontsize=16)
plt.title('Response to Synaptic Stimulation', fontsize=18)

* [2020-10-29 Thu]
** extra references 
@ARTICLE{2020SciPy-NMeth,
  author  = {Virtanen, Pauli and Gommers, Ralf and Oliphant, Travis E. and
            Haberland, Matt and Reddy, Tyler and Cournapeau, David and
            Burovski, Evgeni and Peterson, Pearu and Weckesser, Warren and
            Bright, Jonathan and {van der Walt}, St{\'e}fan J. and
            Brett, Matthew and Wilson, Joshua and Millman, K. Jarrod and
            Mayorov, Nikolay and Nelson, Andrew R. J. and Jones, Eric and
            Kern, Robert and Larson, Eric and Carey, C J and
            Polat, {\.I}lhan and Feng, Yu and Moore, Eric W. and
            {VanderPlas}, Jake and Laxalde, Denis and Perktold, Josef and
            Cimrman, Robert and Henriksen, Ian and Quintero, E. A. and
            Harris, Charles R. and Archibald, Anne M. and
            Ribeiro, Ant{\^o}nio H. and Pedregosa, Fabian and
            {van Mulbregt}, Paul and {SciPy 1.0 Contributors}},
  title   = {{{SciPy} 1.0: Fundamental Algorithms for Scientific
            Computing in Python}},
  journal = {Nature Methods},
  year    = {2020},
  volume  = {17},
  pages   = {261--272},
  adsurl  = {https://rdcu.be/b08Wh},
  doi     = {10.1038/s41592-019-0686-2},
}

@book{MATLAB:2010,
    year = {2020},
    author = {MATLAB},
    title = {version 9.9.0 (R2020b)},
    publisher = {The MathWorks Inc.},
    address = {Natick, Massachusetts}
}

@misc{Rohatgi2020,
  url = {https://automeris.io/WebPlotDigitizer},
  author = {Rohatgi,  Ankit},
  title = {Webplotdigitizer: Version 4.3},
  year = {2020}
}

* [2020-10-30 Fri] - still working on synaptic stuff - synaptic stim figure
** no ih, no lk 
from scipy.io import loadmat 
from matplotlib import pyplot as plt 
plt.ion() 
import numpy as np 

data = loadmat('data/m1pt_apic1305_syn_traces_v2.mat')
# data_zd = loadmat('m1pt_apic1305_zd_syn.mat')
data_zd = loadmat('data/detailed_noih_syn_v2.mat')
data_lk = loadmat('data/detailed_nolk_syn_v2.mat')

time = [t for t in data['time'][0] if 4995 <= t <= 5600]
time_lk = [t for t in data_lk['time'][0] if 4995 <= t <= 5600]
time_zd = [t for t in data_zd['time'][0] if 4995 <= t <= 5600]

soma_v = [v for v, t in zip(data['soma_v'][0], data['time'][0]) if 4995 <= t <= 5600]
dend_v = [v for v, t in zip(data['dend_v'][0], data['time'][0]) if 4995 <= t <= 5600]
soma_v_zd = [v for v, t in zip(data_zd['soma_v'][0], data_zd['time'][0]) if 4995 <= t <= 5600]
dend_v_zd = [v for v, t in zip(data_zd['dend_v'][0], data_zd['time'][0]) if 4995 <= t <= 5600]
soma_v_lk = [v for v, t in zip(data_lk['soma_v'][0], data_lk['time'][0]) if 4995 <= t <= 5600]
dend_v_lk = [v for v, t in zip(data_lk['dend_v'][0], data_lk['time'][0]) if 4995 <= t <= 5600]

time = np.array(time)
soma_v = np.array(soma_v)
dend_v = np.array(dend_v)
soma_v_zd = np.array(soma_v_zd)
dend_v_zd = np.array(dend_v_zd)
soma_v_lk = np.array(soma_v_lk)
dend_v_lk = np.array(dend_v_lk)
time_lk = np.array(time_lk)
time_zd = np.array(time_zd)
# plt.plot(time-5000, dend_v-dend_v[0], 'm', label='Dendrite')
plt.plot(time-5000, soma_v-soma_v[0], 'm', label='Control')
# plt.plot(time-5000, dend_v_zd-dend_v_zd[0], 'g', label=r'Dendrite - Block I$_{h}$')
plt.plot(time_zd-5000, soma_v_zd-soma_v_zd[0], 'g', label=r'Block I$_{h}$')
# plt.plot(time_lk-5000, dend_v_lk-dend_v_lk[0], 'b', label=r'Dendrite - Block shunting current')
plt.plot(time_lk-5000, soma_v_lk-soma_v_lk[0], 'b', label=r'Block shunting current')
# plt.plot([time[np.argmax(dend_v)]-5000, time[np.argmax(dend_v)]-5000], [-0.1, np.max(dend_v)-dend_v[0]], 'm')
plt.plot([time[np.argmax(soma_v)]-5000, time[np.argmax(soma_v)]-5000], [-0.1, np.max(soma_v)-soma_v[0]], 'm--')
# plt.plot([time[np.argmax(dend_v_zd)]-5000, time[np.argmax(dend_v_zd)]-5000], [-0.1, np.max(dend_v_zd)-dend_v_zd[0]], 'g')
plt.plot([time_zd[np.argmax(soma_v_zd)]-5000, time[np.argmax(soma_v_zd)]-5000], [-0.1, np.max(soma_v_zd)-soma_v_zd[0]], 'g--')
# plt.plot([time_lk[np.argmax(dend_v_lk)]-5000, time_lk[np.argmax(dend_v_lk)]-5000], [-0.1, np.max(dend_v_lk)-dend_v_lk[0]], 'b')
plt.plot([time_lk[np.argmax(soma_v_lk)]-5000, time_lk[np.argmax(soma_v_lk)]-5000], [-0.1, np.max(soma_v_lk)-soma_v_lk[0]], 'b--')
plt.legend(fontsize=14)
plt.ylabel(r'$\Delta$ V$_{memb}$ (mV)', fontsize=16)
# plt.plot([1,1],[0,7],'k--')
# plt.ylim(0,7)
plt.xlim(0,30)
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.xlabel('Time (ms)', fontsize=16)
plt.title('Response to Synaptic Stimulation', fontsize=18)

** figure of impedance and synaptic response toy 
from matplotlib import pyplot as plt 
plt.ion()
import numpy as np 
from scipy.io import loadmat 

# data = loadmat('data/toy_withL.mat')
data = loadmat('data/withL_imped_v4.mat')
plt.subplot(1,3,1)
plt.plot(data['freqs'][0], data['zAmp'][0], color='k', linestyle='-', label='L = 10 kH')
plt.subplot(1,3,2)
plt.plot(data['freqs'][0], data['zPhase'][0], color='k', linestyle='-')

# data = loadmat('data/toy_withoutL.mat')
data = loadmat('data/noL_imped_v4.mat')
# data = loadmat('data/withL3mH_imped_v4.mat')
plt.subplot(1,3,1)
# plt.plot(data['freqs'][0], data['zAmp'][0], color='k', linestyle='--', label='L = 1 mH')
plt.plot(data['freqs'][0], data['zAmp'][0], color='k', linestyle='--', label='Passive Neuron')
plt.subplot(1,3,2)
plt.plot(data['freqs'][0], data['zPhase'][0], color='k', linestyle='--')

plt.subplot(1,3,1)
plt.ylim(0,55)
plt.xlim(0,1000)
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.ylabel('$|Z_{c}|$ (M$\Omega$)', fontsize=16)
plt.title('Impedance Amplitude', fontsize=18)
plt.legend(fontsize=14)
plt.xlabel('Frequency (Hz)', fontsize=16)

plt.subplot(1,3,2)
plt.ylabel(r'$\Phi_{c}$ (rad)', fontsize=16)
plt.xlabel('Frequency (Hz)', fontsize=16)
# plt.yticks([-np.pi/2, 0, np.pi/2], [r'$\frac{-\pi}{2}$', '0', r'$\frac{\pi}{2}$'],fontsize=22)
plt.yticks([-1.8, 0.0, 0.1], ['Lag', 'Sync', 'Lead'], fontsize=16)
plt.xticks(fontsize=14)
plt.plot([0,1000],[0,0], color='k', linestyle=':')
plt.xlim(0,1000)
plt.title('Impedance Phase', fontsize=18)

data = loadmat('data/withL_syn_traces.mat')
# data_zd = loadmat('data/withoutL_syn_traces.mat')
# data_zd = loadmat('data/toy_lowL_v2.mat')
data_zd = loadmat('data/noL_syn_v4.mat')
soma_v = data['soma_v'][0]
dend_v = data['dend_v'][0]
time = data['time'][0]
i = data['i'][0]
soma_v_noL = data_zd['soma_v'][0]
dend_v_noL = data_zd['dend_v'][0]

plt.subplot(1,3,3)
plt.plot(time, soma_v-soma_v[0], 'k-', label='Soma - L = 10 kH')
plt.plot(time, soma_v_noL-soma_v_noL[0], color='k', linestyle='--', label='Soma - L = 1 mH')
# plt.plot([time[np.argmax(soma_v-soma_v[0])], time[np.argmax(soma_v-soma_v[0])]], [0, np.max(soma_v-soma_v[0])], color='k', linestyle='-')
# plt.plot([time[np.argmax(soma_v_noL-soma_v_noL[0])], time[np.argmax(soma_v_noL-soma_v_noL[0])]], [0, np.max(soma_v_noL-soma_v_noL[0])], color='k', linestyle='--')
plt.xlim(0,8)
# plt.plot([1,1],[-70,-68.5],'k--')
# plt.ylim(-70,-68.5)
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.ylabel(r'$\Delta$ V$_{memb}$ (mV)', fontsize=16)
plt.xlabel('Time (ms)', fontsize=16)
plt.title('Response to Synaptic Stimulation', fontsize=18)
plt.xlim(0,5)
plt.ylim(0,1.1)
plt.plot([1,1],[0,1.2], color='k', linestyle=':')

* [2020-11-1 Sun] - writing 
** incorporating ted's toy model into the introduction 
** block ih, lk, and control syn times
ih: 7.3, lk: 5.8, control 4.7

* [2020-11-2 Mon] - supplementals 
** stimulating current amplitude 
from scipy.io import loadmat 
from matplotlib import pyplot as plt 
plt.ion() 

data = loadmat('M1_PTcell/trunk_data2/apic_130.5.mat')
# dataDouble = loadmat('data/apic13_doubleAmp.mat')
dataHalf = loadmat('data/apic13_halfAmp.mat')
dataTriple = loadmat('data/apic13_tripleAmp.mat')
dataThreeHalf = loadmat('data/apic13_threeHalfAmp.mat')
data50 = loadmat('data/apic13_50amp.mat')
data40 = loadmat('data/apic13_40Amp.mat')
data100 = loadmat('data/apic13_100amp.mat')

plt.figure()
plt.subplot(1,2,1)
plt.plot(dataHalf['Freq'][0], dataHalf['ZcAmp'][0], label='17.5 pA')
plt.plot(data['Freq'][0], data['ZcAmp'][0], '--', label='25.0 pA')
plt.plot(dataThreeHalf['Freq'][0], dataThreeHalf['ZcAmp'][0], ':', label='37.5 pA')
# plt.plot(dataDouble['Freq'][0], dataDouble['ZcAmp'][0], '-.', label='50 pA')
plt.plot(dataTriple['Freq'][0], dataTriple['ZcAmp'][0], '--', label='75 pA')
plt.plot(data50['Freq'][0], data50['ZcAmp'][0], ':', label='50 pA v2')
plt.plot(data40['Freq'][0], data40['ZcAmp'][0], '-.', label='40 pA')
plt.plot(data100['Freq'][0], data100['ZcAmp'][0], '-.', label='100 pA')
plt.subplot(1,2,2)
plt.plot(dataHalf['Freq'][0], dataHalf['ZcPhase'][0], label='1.75 pA')
plt.plot(data['Freq'][0], data['ZcPhase'][0], '--', label='2.5 pA')
plt.plot(dataThreeHalf['Freq'][0], dataThreeHalf['ZcPhase'][0], ':', label='37.5 pA')
# plt.plot(dataDouble['Freq'][0], dataDouble['ZcPhase'][0], '-.', label='5 pA')
plt.plot(dataTriple['Freq'][0], dataTriple['ZcPhase'][0], '--', label='75 pA')
plt.plot(data50['Freq'][0], data50['ZcPhase'][0], ':', label='50 pA v2')
plt.plot(data40['Freq'][0], data40['ZcPhase'][0], '-.', label='40 pA')
plt.plot(data100['Freq'][0], data100['ZcPhase'][0], '-.', label='100 pA')

plt.subplot(1,2,1)
plt.title('ZAP', fontsize=18)
plt.xlabel('Frequency (Hz)', fontsize=16)
plt.ylabel(r'$|Z_{c}|$ (M\Omega)', fontsize=16)
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.legend(fontsize=14)
plt.subplot(1,2,2)
plt.title('ZPP', fontsize=18)
plt.xlabel('Frequency (Hz)', fontsize=16)
plt.ylabel(r'$\Phi_{c}$ (rad)', fontsize=16)
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)

* [2020-11-9 Mon] - summary of changes to paper 
** Simplified model - effects of inductance, differences with anomalous 
inductance from Ih 

*** New Figure 1 - impedance amplitude, impedance phase, and response to synaptic 
stimulation at low and high L
**** Didn't include response to square wave since never comes up again, wheras 
these three can be related to later results

*** Edited Intro Paragraph 4 on impedance, inductance, and HCN channels 

*** New Intro Para 5 on simple model
I make a couple "as we shall sees" regarding differences with the more detailed 
models in Results - seems like maybe poor form, but also doesn't seem like it 
belongs in Results because not new info.

*** Detailed desciption of simplified model (Methods Para 2)

** Description of chirp stim in Methods Para 4
*** mentions quality check on our data and issue w/ SciPy and Matlab's chirp

** Resonance strength: sticking with the quantity, no longer calling it q factor
*** I note the issue with calling it Q at the end of Methods Para 5

** Replaced sinusoids w/ response to synaptic stimulation in what is now Fig. 4

** New Fig. 7 - effects of blocking TASK of HCN on response to synaptic stim 
*** include new prediction (#4) in Discussion 

** suggestions I'm inclined not to follow
*** still haven't changed number of the models, would prefer not to,
makes less sense now that none of the detailed models are first + pain in the ass

*** also no validation - not sure exactly what it should/would entail, chirp is 
awfully well established, a formal comparison of it to other methods (imped tool 
in NEURON, Gaussian white noise, spike-triggered averaging for suprathreshold) 
might even be better suited to a methods paper imho 

* [2020-11-10 Tue] - rewriting description of phenomenological inductance 
** original 
HCN also affects neuronal filtering properties, which have been characterized as impedance profiles measured 
at subthreshold voltages \cite{Ulrich2002-dd, Robinson2003-uc, Dembrow2015-zb}.
A common experimental method for probing the impedance is to stimulate the neuron by injecting a chirp current waveform, 
which is a constant-amplitude, sinusoidal waveform whose instantaneous frequency changes as function of time \cite{Puil1986-uv}.
Subthreshold resonance occurs when impedance amplitude ($|Z|$) has a maximum at a nonzero frequency
known as the resonant frequency (f$_{res}$). 
It has been observed in a wide variety of species and neuronal cell 
types \cite{Crawford1981-av, Puil1988-ca, Hutcheon2000-gs, Yoshida2011-ec, Ulrich2002-dd},
and is proposed to impart neurons with the ability to discriminate inputs by frequency \cite{Branco2010-nr, Das2017-nz}.
A simple parallel conductance RC circuit model of a passive neuron (Hodgkin-Huxley model without active \na\ and \k\ channels) does not show resonance
properties but instead shows voltage amplitude fall-off above a certain frequency \cite{Hodgkin1952-av}. IT cells largely respond in this way, 
showing the properties of a low-pass filter \cite{Dembrow2015-zb}. In order to get resonance, one
must add an inductance.
The voltage dependent conductance produced by HCN channels fills this role by generating
what has been termed an "anomalous" inductance, wherein HCN channels actively oppose changes
in \vmemb\ and activate slowly relative to the membrane time constant.  
These two properties have the effect of reducing $|Z|$ at frequencies below f$_{res}$,
creating a broad peak in the impedance amplitude profile (ZAP) \cite{Hutcheon2000-gs}.
The relatively high expression of HCN in PTs endows them with resonance, giving the properties of a bandpass filter.
Impedance phase ($\Phi$) is another important, yet often neglected, filter property that describes the temporal relationship 
between the stimulating current and \vmemb\ .
Leading, or inductive, phase is defined as the case where peaks in \vmemb\ precede peaks in the stimulating current, 
and at the synchronous frequency the peaks in \vmemb\ and stimulating current are synchronized \cite{Puil1986-uv}. `
The "anomalous" inductance generated by HCN channels also increases inductive phase \cite{Narayanan2008-zw}.
Inductive phase has been proposed as a mechanism for compensating the location-dependent capacitive delay of dendritic
inputs at the soma \cite{Vaidya2013-sx}.
Both resonance and synchronous frequency are sensitive to the presence and distribution of voltage-gated 
ion channels in the dendrites and increase with distance from the soma in PTs in a
manner similar to hippocampal PCs \cite{Ulrich2002-dd, Dembrow2015-zb, Das2017-nz}.
** new version 
HCN also affects neuronal filtering properties, which have been characterized as impedance profiles measured 
at subthreshold voltages \cite{Ulrich2002-dd, Robinson2003-uc, Dembrow2015-zb}.
A common experimental method for probing the impedance is to stimulate the neuron by injecting a chirp current waveform, 
which is a constant-amplitude, sinusoidal waveform whose instantaneous frequency changes as function of time \cite{Puil1986-uv}.
Impedance amplitude ($|Z|$) characterizes voltage response with respect to the frequency of the stimulus, 
and resonance occurs when $|$$\Delta$V$_{memb}$$|$, and consequently $|Z|$, have a maximum at a nonzero frequency
known as the resonant frequency (f$_{res}$). 
Resonance has been observed in a wide variety of species and neuronal cell 
types \cite{Crawford1981-av, Puil1988-ca, Hutcheon2000-gs, Yoshida2011-ec, Ulrich2002-dd},
and is proposed to impart neurons with the ability to discriminate inputs by frequency \cite{Branco2010-nr, Das2017-nz}.
A simple parallel conductance RC circuit model of a passive neuron (Hodgkin-Huxley model without active \na\ and \k\ channels) does not show resonance
properties but instead shows voltage amplitude fall-off above a certain frequency \cite{Hodgkin1952-av}. 
IT cells largely respond in this way, showing the properties of a low-pass filter \cite{Dembrow2015-zb}.
The voltage dependent conductance produced by HCN channels produces resonance by generating
what has been termed an "phenomenological" inductance, wherein a time-variant conductance 
imparts some of the effects of an inductor on neuronal impedance \cite{Cole1949-ca, Cole1941-vd}.
HCN channels, unlike \na\ and \k\ channels, achieve this by being open at resting membrane potential, 
actively opposing changes in \vmemb\, and activating slowly relative to the membrane time constant \cite{Hutcheon2000-gs}}.  
This produces an "anomalous" impedance, where $|Z|$ is attenuated at low frequencies,
creating a broad resonance peak in the impedance amplitude profile (ZAP) \cite{Mauro1961-ow}.
By contrast, an inductor has the effect of amplifying $|Z|$ nonuniformly across frequencies, creating a resonance peak \cite{Vaidya2013-sx}. 
The relatively high expression of HCN in PTs endows them with resonance, giving the properties of a bandpass filter.
Impedance phase ($\Phi$) is another important, yet often neglected, filter property that describes the temporal relationship 
between the stimulating current and \vmemb\ .
Leading, or inductive, phase is defined as the case where peaks in \vmemb\ precede peaks in the stimulating current, 
and at the synchronous frequency the peaks in \vmemb\ and stimulating current are synchronized \cite{Puil1986-uv}. `
The "phenomenological" inductance generated by HCN channels increases inductive phase \cite{Narayanan2008-zw}.
Inductive phase has been proposed as a mechanism for compensating the location-dependent capacitive delay of dendritic
inputs at the soma \cite{Vaidya2013-sx}.
Both resonance and synchronous frequency are sensitive to the presence and distribution of voltage-gated 
ion channels in the dendrites and increase with distance from the soma in PTs in a
manner similar to hippocampal PCs \cite{Ulrich2002-dd, Dembrow2015-zb, Das2017-nz}.

* [2020-11-19 Thu] 
** passive: 5e-5; 1kH: 0.00065; 5 MH: 5.5e-5; 1MH: 6.5e-5

* [2020-11-22 Sun] 
** computing impedance phase for simple model 
from neuron import h, gui 
h.load_file('models/cellwithL.ses')
import numpy as np 
from matplotlib import pyplot as plt 
from pylab import fft 
from chirpUtils import applyChirp, getChirp
zPhase = []
zAmp = []
amp = 0.01 
t0, Fs, delay = 5, 1000, 1
secs = [sec for sec in h.allsec()] 
for sec in secs:
    sec.g_pas = 2e-4
seg = secs[1](0.5)
soma_seg = secs[0](0.5)
freqs = [i for i in range(1,1000)]
soma_v = h.Vector().record(soma_seg._ref_v) 
dend_v = h.Vector().record(seg._ref_v) 
time = h.Vector().record(h._ref_t)
sampr = 40e3
for f in freqs: 
    f0, f1 = f, f 
    I, t = getChirp(f0,f1,t0,amp,Fs,delay)
    i = h.Vector().record(h.IClamp[0]._ref_i)
    out = applyChirp(I, t, seg, soma_seg, t0, delay, Fs, f1)
    v_trim = [v for v, T in zip(soma_v, time) if 3000 < T < 5000] 
    i_trim = [i for i, T in zip(I,t) if 3000 < T < 5000] 
    t_trim = [T for i, T in zip(I,t) if 3000 < T < 5000] 
    time_trim = [T for v, T in zip(soma_v, time) if 3000 < T < 5000] 
    current = i_trim
    v = v_trim 
    current = current[int(delay*sampr - 0.5*sampr+1):-int(delay*sampr- 0.5*sampr)] 
    current = np.hstack((np.repeat(current[0],int(delay*sampr)),current, np.repeat(current[-1], int(delay*sampr)))) 
    current = current - np.mean(current) 
    v = v[int(delay*sampr - 0.5*sampr)+1:-int(delay*sampr - 0.5*sampr)] 
    v = np.hstack((np.repeat(v[0],int(delay*sampr)), v, np.repeat(v[-1], int(delay*sampr)))) 
    v = v - np.mean(v) 
    f_current = (fft(current)/len(current))[0:int(len(current)/2)] 
    f_cis = (fft(v)/len(v))[0:int(len(v)/2)] 
    z = f_cis / f_current 
    phase = np.arctan2(np.imag(z), np.real(z))
    Freq       = np.linspace(0.0, sampr/2.0, len(z))
    zamp = abs(z)
    ind = np.argmin(np.square(Freq-f))
    zPhase.append(phase)
    zAmp.append(zamp)
    
* [2020-11-24 Tue] - more synaptic stims 
** sync frequency between middle of trunk and soma based on viadya is 7.7 Hz
*** nearby obliques 89, 90, 91

* [2020-12-2 Wed] - methods validation figure
** fig code 
from matplotlib import pyplot as plt 
plt.ion()
from scipy.io import loadmat 
chirpDet = loadmat('models/DuraBernal/trunk_data2/apic_130.5.mat')
validDet = loadmat('data/detailedValidate.mat')
chirpPas = loadmat('data/noL_chirp.mat.mat')
validPas = loadmat('data/noL_imped_v4.mat')
chirpL = loadmat('data/withL_chirp.mat')
validL = loadmat('data/withL_imped_v4.mat')

fig, big_axes = plt.subplots( figsize=(15.0, 15.0) , nrows=3, ncols=1, sharey=True) 

for row, big_ax in enumerate(big_axes, start=1):
    # Turn off axis lines and ticks of the big subplot 
    # obs alpha is 0 in RGBA string!
    big_ax.tick_params(labelcolor=(1.,1.,1., 0.0), top='off', bottom='off', left='off', right='off')
    # removes the white frame
    big_ax._frameon = False

big_axes[0].set_title('Simple Passive Model', fontsize=18)
big_axes[1].set_title('Simple Model w/ Inductor', fontsize=18)
big_axes[2].set_title('Detailed Model w/ HCN', fontsize=18)

ax1 = fig.add_subplot(3,2,1)
ax1.plot(chirpPas['Freq'][0], chirpPas['ZcAmp'][0], label='Chirp', linestyle='-.', color='gray')
ax1.plot(validPas['freqs'][0], validPas['zAmp'][0], label='Validation', color='k')
ax1.set_ylabel(r'|Z$_{c}$| (M$\Omega$)', fontsize=16)

ax2 = fig.add_subplot(3,2,2)
ax2.plot(chirpPas['Freq'][0], chirpPas['ZcPhase'][0], label='Chirp', linestyle='-.', color='gray')
ax2.plot(validPas['freqs'][0], validPas['zPhase'][0], label='Validation', color='k')
ax2.legend(fontsize=14)
ax2.set_ylabel(r'$\Phi_{c}$ (rad)', fontsize=16)

ax3 = fig.add_subplot(3,2,3)
ax3.plot(chirpL['Freq'][0], chirpL['ZcAmp'][0], label='Chirp', linestyle='-.', color='gray')
ax3.plot(validL['freqs'][0], validL['zAmp'][0], label='Validation', color='k')
ax3.set_ylabel(r'|Z$_{c}$| (M$\Omega$)', fontsize=16)

ax4 = fig.add_subplot(3,2,4)
ax4.plot(chirpL['Freq'][0], chirpL['ZcPhase'][0], label='Chirp', linestyle='-.', color='gray')
ax4.plot(validL['freqs'][0], validL['zPhase'][0], label='Validation', color='k')
ax4.set_ylabel(r'$\Phi_{c}$ (rad)', fontsize=16)

ax5 = fig.add_subplot(3,2,5)
ax5.plot(chirpDet['Freq'][0], chirpDet['ZcAmp'][0], label='Chirp', linestyle='-.', color='gray')
ax5.plot(validDet['freqs'][0], validDet['zAmp'][0], label='Validation', color='k')
ax5.set_ylabel(r'|Z$_{c}$| (M$\Omega$)', fontsize=16)
ax5.set_xlabel('Frequency (Hz)', fontsize=16)

ax6 = fig.add_subplot(3,2,6)
ax6.plot(chirpDet['Freq'][0], chirpDet['ZcPhase'][0], label='Chirp', linestyle='-.', color='gray')
ax6.plot(validDet['freqs'][0], validDet['zPhase'][0], label='Validation', color='k')
ax6.set_ylabel(r'$\Phi_{c}$ (rad)', fontsize=16)
ax6.set_xlabel('Frequency (Hz)', fontsize=16)

ax1.set_xlim(0,100)
ax1.set_ylim(200,950)
ax1.set_title('ZAPs', fontsize=16)

ax2.set_xlim(0,100)
ax2.set_ylim(-1.5, 0.05)
ax2.set_title('ZPPs', fontsize=16)

ax3.set_xlim(0,100)
ax3.set_ylim(23.4,24.5)

ax4.set_xlim(0,100)
ax4.set_ylim(0,0.75)

* [2021-1-6 Wed] - ted's comments 
** problem paragraph original 
The basic passive parallel-conductance model of the neuron membrane is an RC circuit. 
This provides low-pass filtering -- voltage amplitude falls off above a certain current-injection frequency, 
determined primarily by membrane resistance (R), since membrane capacitance (C) is presumed to vary little in neurons \cite{Hodgkin1952-av}.
In electrical engineering, a band-pass filter (or resonator) is produced by adding an inductor (L) to get an RLC circuit.
Instead of a uniform response at low frequencies with fall-off at high (characteristic of the simple RC circuit \cite{Hodgkin1952-av}), 
a resonator shows an augmented response at some restricted intermediate range of frequencies.  
The neural membrane, however, is simply RC; there is no inductor. 
Most voltage-dependent conductances, mediated by \na, \k, \ca, increase conductance with depolarization (outward rectification),
preserving this low-pass filter membrane property \cite{Dembrow2015-zb}. 
In contrast, \ih\ slowly inactivates with depolarization and produces inward or anomalous rectification, resisting current injection.
\ih\ effects are similar, but not equivalent, to those produced by an inductor;
the slow, anomalous rectification from \ih\ produces ``phenomenological'' inductance \cite{Cole1949-ca, Cole1941-vd}, 
changing the membrane's properties from those of a low-pass filter to those of a band-pass resonator \cite{Hutcheon2000-gs} --
\ih\ produces a peak in the voltage response to sinusoidal, or temporally-modulated, current or conductance changes at a particular frequency.
\ih\ also changes the phase relationship between the voltage response and changes in current or conductance \cite{Mauro1961-ow}.
** new 
The basic passive parallel-conductance model of the neuron membrane is an RC circuit. 
This provides low-pass filtering -- voltage amplitude falls off above a certain current-injection frequency, 
determined primarily by membrane resistance (R) since membrane capacitance (C) is presumed to vary little in neurons \cite{Hodgkin1952-av}.
In electrical engineering, a band-pass filter (or resonator) is produced by adding an inductor (L) to get an RLC circuit.
Instead of a uniform response at low frequencies with fall-off at high (characteristic of the simple RC circuit \cite{Hodgkin1952-av}), 
a resonator shows an augmented response at some restricted intermediate range of frequencies.  
The neural membrane is simply RC; there is no inductor. 
Voltage-gated ion channels, however, can under the right circumstances produce what is known as "phenomenological inductance" \cite{Cole1949-ca, Cole1941-vd}.
By actively opposing changes to membrane potential and activating slowly relative to the membrane time constant,
channels like HCN and delayed-rectifier \k\ channels change the membrane's properties from those of a low-pass filter 
to those of a band-pass resonator as though there were an inductor present \cite{Mauro1961-ow, Mauro1970-km, Hutcheon2000-gs}.
In PTs, \ih\ produces a peak in the voltage response to sinusoidal, or temporally-modulated, current or conductance changes at a particular frequency.
\ih\ also changes the phase relationship between the voltage response and changes in current or conductance \cite{Hutcheon1996-db, Ulrich2002-dd}.
** ted's suggested rewrite
The electrical properties of the passive neuronal membrane are very similar
to those of a parallel RC circuit, with the response of membrane
potential to currents dropping off at frequencies above the "natural
frequency" 1/(2 PI R C) (low-pass filtering).
Under the right circumstances, however, voltage-gated ion channels
can produce a "phenomenological inductance"
\cite{Cole1941-vd, Cole1949-ca}
that can, like a physical inductor in an RLC circuit, generate
resonance:  an enhanced voltage response over an intermediate range
of frequencies \cite{Mauro1961-ow, Mauro1970-km}.
Phenomenological inductance is most likely to be seen when channels
with slow gating are present, such as HCN channels and delayed
rectifier K channels \cite{Puil1986-uv, Hutcheon1996-db}.
Resonance becomes apparrent when currents through these channels
are prominent enough and lag sufficiently far behind fluctuations
of membrane potential \cite{Hutcheon2000-gs}.

* [2021-2-4 Thu] - reviewer comments 
** Reviewer #1 (Comments to the Author (Required)):
*** SUMMARY

In this report the authors use computational models to investigate the linear 
transfer function from the dendrites to the soma of pyramidal tract (PT) neurons. 
In this study, the linear transfer function is defined to be that of the neuron at 
rest with no synaptic inputs. PT neurons have been shown to have an interesting
resonance in their transfer functions whose  properties are location-dependent. 
The authors address the hypothesis that the amplitude and phase effects of a PT 
neuron's resting liner transfer function is highly affected by dendritic HCN
and TASK-like channels in the dendrites. They compare the transfer functions of 
five published models of PT-like neurons, and find only one model comes close to 
mimicking the linear transfer function observed in the data.

The authors confirm that the frequency-dependent amplitude and phase properties 
of real PT neurons are best accounted for by the model's HCN and TASK-like 
channels, and that these channels can be used to improve the match between data 
and another "less-well-fitting" model. It is notable that most of the published 
models examined were not able to capture these basic linear properties. These 
results further emphasize the importance of both HCN and TASK-like dendritic 
channels in shaping synaptic integration. Importantly, this study demonstrates 
how the linear resting-transfer function is an important dimension that should be 
used in evaluating the ability of realistic models of single neurons to mimic the
electrophysiological properties of real neurons.

*** MAJOR

**** 1) A brief statement regarding the linearity of the models is needed in the 
Methods. That dendrites with non-linear voltage-dependent channels behave mostly 
in a linear fashion for small subthreshold perturbations is an important aspect 
of this study. This linear behavior has been observed for most real neurons 
(I can't think of any study where this was not the case). However, this assumption
of linearity may not apply to the models studied here, and could be a reason 
why some did not fit the data. Nonlineaities (eg dendritic spikes) are more likely
for distal dendritic inputs that can produce larger dendritic depolarizations. 
Did any of the models exhibit nonlinear behavior during the sub-threshold chirps?

***** We agree with the necessity of a statement regarding the linearity of the models.
We have added a brief paragraph to the methods:

"Transfer impedance is equivalent to the transfer function used in linear systems 
theory and assumes the linearity of the system in question.  The biophysically-detailed
models studied here all produce nonlinearities, such as dendritic spikes, action potentials,
and back-propagating action potentials \cite{Kole2008-aj, Gao2020-hj, Hay2011-if, Neymotin2017-dr, Dura-Bernal2019-pj}.
At at V$_{rest}$, however, the neuronal
membrane behaves as linear system for subthreshold depolarizations. Therefore, we have taken care 
to ensure that measurements used to compute $Z_c$ are within a linear operating regime
for the neuronal membrane. This was our motivation for ensuring that excursions in V$_{memb}$ 
about V$_{rest}$ were symmetrical to within 0.01 mV.  An asymmetrical voltage response 
would indicate that the neuron/system was in a nonlinear operating regime. 
Additionally, no dendritic spikes or action potentials were observed during 
stimulations."

**** 2) The authors should elaborate on their choice of a 20 sec long 1 to 20Hz chirp 
stimulus. If the models are mainly linear at rest, then Zc (Eq 2) can be computed 
using a much shorter noise stimulus. For example, I imagine a 2 sec simulation 
injecting white-noise would have given the same results with a 10X reduction in 
simulation time. In addition, a noise stimulus would allow Zc to computed at all 
frequencies up to the Nyquist rate. An even shorter impulse could be used, but I 
would worry about transient nonlinearities dominating the response. The reason I 
bring this up is not that it affects the results (however the chirp reduces the 
frequency ranges studied to 20Hz), but because these models are computationally 
expensive. Other researchers who use this study to motivate their own simulations 
might have limited computational resources available. Maybe there were good 
reasons to use the longer simulations and reduced frequency range associated 
with the chirp, but these should be elaborated in the manuscript.

***** Our choice of simulating a 20 second long 0.5 - 20 Hz chirp stimulus was 
motivated by the fact that this stimulation paradigm was used in the experimental
studies from which we extracted values of transfer and synchronous frequencies. 
We have included a brief paragraph to the "Chirp and impedance" section of Methods:

"Linear chirp stimulation was used to compute impedance along the apical trunks
of PTs in experimental studies \cite{Ulrich2002-dd, Dembrow2015-zb}, so we also used linear chirp stimulation in 
most of our simulations to maintain consistency with experiments. Impedance may also be
estimated using other subthreshold current stimuli, such as nonlinear chirps (quadratic,
logarithmic, etc.) and white-noise \cite{Cook2007-cz, Hong2007-rx, Kasevich2011-dd, Richardson2003-no, Kalmbach2017-yu}.  
White-noise has the advantages of requiring
shorter duration stimulations and a larger frequency range over which impedance may 
be computed (up to the Nyquist rate), but runs the risk of transient nonlinearities dominating 
the response, which is not an issue for the chirp stimulus. We use this method for a qualitative 
comparison of impedance phase across a large frequency range."

The reduction in simulation time and the increase in frequency range is certainly
a major advantage of using a white-noise stimulus as opposed to the chirp.  With
this in mind, we have added a comparison between the white-noise stimulus method
and the validation method (with indivudual constant frequency sinusoids) to the
supplementary figure.  We have included text in the Methods sections:

"We also evaluated the use of 20 second long, subthreshold white-noise stimuli, rather than linear chirp,  
to compute impedance amplitude and phase.  We found that there are errors in 
impedance phase estimation at frequencies greater than 100 Hz, but since we only use this method
for a qualititative comparison of impedance phase across a large frequency bandwidth,
we consider white-noise acceptable for that purpose.  We therefore used a 5 s sinusoid at each frequency 
(1 - 1000 Hz in 0.5 Hz increments) when computing impedance 
for the simple models seen in \fref{toymodel} rather than use chirp or white-noise."

We also use this method to estimate
impedance phase below 500 Hz to address the relationship between impedance phase 
and peak EPSP timing (Fig. 7, see below).

**** 3) The reactance versus resistance plot in Fig 2I is not discussed in any depth 
in the text and representing the impedance in this manner is not used again in 
the paper. Thus, I am not sure if Fig. 2I is really needed.

***** This is true, we do not make much use of this representation of impedance, but 
since it is the transfer function and an intermediate step in computing and 
understanding impedance amplitude and phase, we would like to keep it with editorial 
permission.

**** 4) I really like the idea of using a simplified model in Fig 1 to illustrate the
fundamental effects of inductance on amplitude and phase. But why not use a simple
model that is a little more in line with realistic cells in terms of the frequency
range? I am sure a combination of parameters could be found to produce a resonance
closer to the 10Hz range seen in the real data.

*****  We have modified Figure 1 to address these concerns.  The figure now shows impedance 
profiles and responses to synaptic stimulation for two values of inductance (L = 1 MH; 100 MH)
and for the passive neuron.  At L = 100 MH, the resonance and synchronous frequencies are 
in line with experimentally observed values (> 10 Hz); however, there is little effect on 
the EPSP compared to the passive neuron.  At L = 1 MH, the resonance and synchronous frequencies
are much higher and there is more EPSP undershoot, but the reduction in EPSP lag is closer to 
what is seen in the realistic models. We have added the following to the introduction:

"To illustrate these effects, we modified the standard passive neuronal model 
by adding an inductive circuit which mimics some of the properties of \ih\ (\fref{toymodel}A). 
The resistor (R) stands in for the conductance of \ih; the battery (E), its reversal potential; and the
inductance (L), the phenomenological inductance it generates.
Adding the inductive circuit changes the low-pass filter properties of the passive neuron 
(\fref{toymodel} B, black lines) to those of a resonator (red and blue lines).
Inductance also increases impedance phase, even creating phase lead at lower frequencies,
where the impedance phase profile is greater than zero (\fref{toymodel}C).
The inductance that shapes the impedance amplitude and phase profiles also influences synaptic potentials (\fref{toymodel}D).
The effects of the phenomenological inductance imparted by \ih\ can be recapitulated 
by our simplified neuronal model with its inductive circuit attached, but no single inductance 
can capture all the effects of \ih.
For instance, when L = 100 MH, resonance frequency (\fref{toymodel}B) and synchronous frequency 
(\fref{toymodel}C) are both ~7 Hz, much like what is seen in real PT dendrites \cite{Ulrich2002-dd, Dembrow2015-zb}. 
However, there is little effect on excitatory post-synaptic potential (EPSP) timing (\fref{toymodel}D), because impedance phase 
converges with that of the passive neuron around 50 Hz (\fref{toymodel}C).
Conversely, when L = 1 MH, resonance and synchronous frequencies are much 
higher (~70 Hz, \fref{toymodel}B}), but impedance phase is higher than in the passive
neuron over a far larger frequency range (\fref{toymodel}C).  The increased impedance phase 
leads to a shorter lag between peak synaptic current and EPSP peak similar to what we will see 
in the biophysically-detailed PT models (\fref{toymodel}D).  The EPSP shape is also narrower,
which is consistent with the effects of HCN channels in dendrites,
but there is excessive EPSP undershoot which is not seen experimentally \cite{Yi2010-sz, Kase2012-xt}.
Thus, each inductance value mimics some effects of the phenomenological inductance generated by \ih, but not all of them."

The Methods have been modified as follows:
"To demonstrate the varied effects of inductance on neuronal impedance and \vmemb\ dynamics, 
the cell was connected to an inductor (L = 1 MH or 100 MH), resistor (R = 25 M$\Omega$), and a battery (E = -70 mV) 
placed in series and connected to ground (\fref{toymodel}A)."

And the Figure 1 caption:
"(A) A simple, passive neuron model (soma and dendrite with membrane capacitance) was connected to a series circuit with an inductor (L = 1 MH or 100 MH),
resistor (R = 25 M$\Omega$), and battery (E = -70 mV) to illustrate some of the effects of inductance on impedance and synaptic potentials.
We computed impedance between the center of the dendrite and the center of the soma with this circuit attached (blue and red lines)
and without it (black lines).
(B) The inductive circuit combined with membrane capacitance from the neuron produces resonance. When L = 100 MH, resonance frequency (~7 Hz) is
comparable to those seen in PT dendrites \cite{Ulrich2002-dd, Dembrow2015-zb}. They are much higher when L = 1 MH.
In the passive neuron alone, impedance amplitude falls off with frequency. Resonance frequencies are indicated with vertical dashed lines.
(C) The inductive circuit also increases impedance phase, with positive inductive/leading phase
(voltage peak precedes current peak for an oscillatory input) seen at low frequencies. 
The horizontal dotted line indicates 0 radian phase shift between the stimulating current in the dendrite and voltage response at the soma (i.e. synchrony).
The vertical dashed lines indicate synchronous frequencies.
When L = 100 MH, synchronous frequency (~7 Hz) is comparable to observed values in PT dendrites, but impedance phase converges with that of the passive neuron
~50 Hz.  When L = 1 MH, synchronous frequency is much higher (~70 Hz), and impedance phase converges with that of the passive neuron at a much higher frequency (~500 Hz).
(D) Effects of increased inductance on EPSPs measured at the soma: When L = 1 MH, peak EPSP voltage is earlier compared to the passive neuron 
due to higher impedance phase across the power spectrum of the synaptic current stimulus, but it produces much more undershoot that seen in PTs \cite{Yi2010-sz, Kase2012-xt}.
Conversely, when L = 100 MH, there is little change in peak EPSP time, but EPSP shape is more in line with that observed experimentally \cite{Yi2010-sz, Kase2012-xt}. 
Time of peak synaptic conductance is indicated by the vertical dotted line."


**** 5) What is the power spectrum of the alpha-function used to produce the EPSP? 
I suspect that a lot of power is beyond 20Hz. Thus, the effects of HCN and TASK on 
the EPSP could be due to frequencies outside the range being studied.

***** This is an excellent point, and we have updated Figure 7 to reflect it.  We
have added a panel to this figure showing the transfer impedance phase up to 200 Hz
computed from a white noise, rather than chirp, stimulus.  Superimposed on this panel
is the power spectrum of the synaptic current.  Most of the power in the EPSP is below 
100 Hz.  In this range, we see that impedance phase is highest for the control PT model across 
this frequency range, blocking shunting current shifts impedance phase down across that
range, and blocking Ih decreases it further.

**** 6) In line 302: Blocking HCN and TASK-like channels influences EPSPs in accordance 
with changes to dendritic impedance (Fig. 7). This paragraph is somewhat confusing 
that we now are all of a sudden looking at the response to an EPSP. I think it 
would be more clear if the effects on an EPSP-like input were addressed in a 
separate paragraph. I should add that how EPSPs are affected by the linear 
transfer function is an important part of the paper.

***** We apologize for the confusion, and we agree with the need to clarify the channels' effects on EPSP-like input
and emphasize the relationship between EPSPs and the linear transfer function.  We have therefore edited the paragraph in question, as well as Fig. 7:

"Although the impact of dendritic impedance on neuronal phsyiology is often linked to oscillatory activity and input-freuqency discrimination 
\cite{Vaidya2013-sx, Hutcheon1996-db, Branco2010-nr, Das2017-nz}, it is important to emphasize that dendritic impedance, 
or the linear transfer function between the apical dendrite and the soma, shapes the \vmemb\ response at the soma to a single synaptic stimulation in the dendrites.
The majority of the power in a single excitatory synaptic current stimulus resides between 0 - 100 Hz (\fref{blockIhIlkSyn}A, black dashed lines, right y-axis),
so the transfer impedance amplitude and phase in this frequency range determines the somatic response to synaptic stimulation in the dendrite.
Blocking TASK-like channels shifts transfer impedance phase down across this frequency range, and blocking HCN channels shifts it down further still 
(\fref{blockIhIlkSyn}A, colored lines, left y-axis)).  
The downward shifts in transfer impedance phase caused by blocking HCN and TASK-like channels correspond to reductions in the 
compensation for membrane capacitance, increasing the delay in EPSP peak at the soma.  Blocking TASK-like shunting current increases the
lag between peak synaptic current halfway along the apical trunk and peak \vmemb\ at the soma by ~1 ms.
Blocking \ih\ increases the lag by 2.6 ms.  Similarly, blocking these currents reduces resonance strength (\fref{blockIhIlk}C) and the width of the EPSPs are narrowed accordingly. 
Although the changes to EPSP shape and peak timing are fairly small, they can have a large impact on
coincidence detection of synaptic potentials in the soma."

*** MINOR

**** 1) Fig. 8, there is a reference to "experimentally observed values", but the 
"experimentally observed values" are not included on the figure. Including theses
would make the figure easier to read.
***** We have added the experimental values to the figure.

**** 2) FIg. 9. Heat maps would be more clear if they were the % change in each of the 
4 parameters.
***** We have changed the heat maps to reflect percent change in each parameter.

**** 3) Line 206: but there are differences impedance phase
***** Fixed

**** 4) I think everything would be clearer and easier to read if ZPP and ZAP were not
used, but instead just 'amplitude;' and 'phase'.
***** *DONE* - Figures

**** 5) Line 207: using chirp to compute
***** We have changed "compute" to estimate.

**** 6) Line 418: typo - there is a lost ' in this sentence
***** Thank you, it's been removed.

**** 7) The comparison of the different models is a very nice contribution of this 
study. Could the authors elaborate in the Methods or Results their choice of these 
five models. Are these the only good models available in terms of capturing PT 
neuron properties? Are there other models available that the authors decided not 
to use in their study?

***** We are glad you appreciate the comparison of the different models. 
We chose the models because they are biophysically and morphologically detailed;
many of them were developed with nonlinear, and particularly dendritic, phenomena
in mind; and they satisy the practical criterion of having been developed in NEURON.
The last may seem arbitrary, but even using models developed with the same simulator,
code and model reuse for purposes beyond their original intended use is nontrivial. 
Another motivation was that some of these models (from Hay et al. 2011, Neymotin et al. 2017,
and Dura-Beranl et al. 2019) are used in large scale cortical models, which makes their function 
central to much these much larger modeling endeavors.  

We hope that we haven't (at least explicitly) conveyed the message that one of these models 
is "good" and the rest are "bad".  All of the models presented in this paper focus on 
certain aspects of PT physiology, do certain things well, and no doubt have their own shortcomings.
However, of the five original models, only one of them did the things interested to us here 
(resosnance, synchrony, etc.) well.

We did run simulations with PT models from the Allen Institute and have chosen not to include them
here.  Some of the models from the Allen Institute only dendrites with active properties, but they
are constant in the dendrites.  Not only is there plenty of evidence that HCN channel density
increases with distance from the soma, but our initial simulations with a number of these models 
showed impedance properties that were, frankly, all over the place.  We will indicate in the Methods 
that we haven't chosen to include these models based on their simplified channel distributions,
we prefer not to directly comment on their impedance properties. 

We have added the following to the Methods:

"We chose these models because they are biophysically and morphologically detailed;
many of them were developed with nonlinear, and particularly dendritic, phenomena
in mind; and they were developed in 
NEURON \cite{Kole2008-aj, Gao2020-hj, Hay2011-if, Neymotin2017-dr, Dura-Bernal2019-pj}.
The last criterion may seem arbitrary, but code and model reuse for purposes beyond 
their original intended use is nontrivial. 
Some of these models are also used in large scale cortical
models \cite{Hay2011-if, Neymotin2017-dr, Dura-Bernal2019-pj}, so their linear transfer
functions are of particular importance to the behavior of larger network 
models \cite{Dura-Bernal2019-pj, Markram2015-zg}.  We did chose not to include 
PT models from the Allen Institute's Cell Types Database (\url{http://celltypes.brain-map.org/}).
The "All-active Biophysical" models, which contain active channels in the dendrites,
have constant channel densities in the dendrites. They were excluded because of the 
strong experimental evidence for location-dependent gradients in \ih\ distribution 
and it's importance to dendritic impedance properties \cite{Vaidya2013-sx, Das2017-nz, Harnett2015-sj}."

** Reviewer #2 (Comments to the Author (Required)):

*** General comments:
This manuscript establishes that previous biophysical models of pyramidal-tract 
neocortical pyramidal neurons cannot sufficiently account for experimental data 
on how synaptic inputs are integrated along the primary apical dendritic branch. 
As these neurons play an important role in neocortical circuit function and its 
output to subcortical structures, understanding how the dendrites of these neurons 
integrate is of great value. The key advance here is identifying that the shunting 
current is necessary to best recapitulate previously published experimental data. 
This manuscript provides testable experimental hypotheses for the field and lays 
the groundwork for future studies in silica of this neuron type from both rodents 
and primates.

The authors identify that a shunting current, possibly from Twik-related 
acid-sensitive potassium (TASK) channels, is necessary along with the 
hyperpolarization activated cyclic nucleotide-gated (HCN) channels that mediate 
the current (Ih) in order to accurately recapitulate the experimental data. The 
model used to test how these currents interact to shape synaptic potentials and 
predict that different combinations of these currents may provide some degeneracy 
in how dendritic integration is tuned.

*** Major Specific comments:
**** 1. For Figure 1, a simplified model is used for illustrative purposes in the 
Introduction to show how the addition of an inductive circuit shapes impedance 
amplitude and phase. The authors add a circuit with an extremely high inductance 
(10 kH) that causes the resonant frequency for this system is ~700 Hz and the 
phase lead for any frequency <200 Hz. These values are several orders of magnitude 
distant from those caused b y HCN currents, which also exhibit obvious effects 
(as illustrated in the rest of the paper). Also, the methods for calculating 
impedance here are different from those described in the paragraph before. Rather 
than a linear chirp, sinusoids of different frequencies are utilized (the useful 
rationale for this alternate calculation is later explained well in methods). It 
is stated in the text that the peak in somatic membrane potential precedes the 
peak current in the dendrite with the inclusion of such an extreme inductive 
circuit, but this data is not presented in the figure, and it is acknowledged 
that this is unlike what occurs for HCN channels. Combined these factors diminish 
the clarity regarding this illustrative figure.

*****  This is a fair criticism, and we hope that we have addressed the reviewer's
concerns with modifications to the presentation of the simplified model.
Please see our response to Reviewer #1, Major Concern #4 for details.

**** 2. The TASK-like shunting current coupled to Ih is a central component and its 
importance is a major finding of this paper. If space permits, the readers 
would likely greatly benefit from having model details (e.g. the shunting current 
relative to Ih and the reversal potential for that current) explicitly described 
in the methods.

***** We agree that due to the centrality of the shunting current to our findings it warrants
including details. We have added the following to the Methods:

"TASK-like channels were distributed in proportion to local HCN channel density. In basal
dendrites below the soma, TASK-like channel density was equivalent to HCN channel density,
while TASK-like channel density was 20% of HCN channel density in dendrites above the 
soma \cite{Dura-Bernal2019-pj}. The reversal potential for the TASK-like channels was set to -86 mV."

**** 3. In the third experimentally verifiable prediction in the Discussion, the 
authors indicate that the pharmacological agent XE991 will alter the dendritic 
impedance profile. This is a fair prediction, but may not provide much clarity 
as XE991 is commonly utilized as an M-current blocker. Based on simulations,
it has been proposed that XE991 may also have an effect upon TASK channels (but 
this has not been tested experimentally). The authors should acknowledge this 
point for the reader. While XE991 has been shown to alter the impedance amplitude 
profile at depolarized somatic potentials (but not resting ones: 
Dembrow et al., 2010), muscarine does not alter K+ current in the dendrites 
(Williams and Fletcher, 2019).

***** We agree that we should point out that XE991 modulating TASK channels 
has not been tested experimentally and would like to thank the reviewer for pointing
out the work regarding muscarine's lack of effect in the dendrites. We have edited
the wording of the prediction in the Discussion:

"The paradoxical effects of \ih\ observed by George et al. (2009) were abolished with
application of the drug XE991. These effects are best accounted for by interaction between I$_h$ and
a TASK-like shunting current, and simluation results have suggested that XE991 may block 
TASK channels \cite{Migliore2012-ev, Dura-Bernal2019-pj}. XE991 modulation of TASK channels 
has not been tested experimentally though.  XE991 is commonly ustilized as an M-current 
blocker, and it has been shown to alter the input impedance amplitude profile in the soma 
of hippocampal PCs at depolarized, but not resting, potentials \cite{Dembrow2010-lb}.
It may be that XE991 blocks M-current in the soma and blocks the shunting current in the 
apical dendrites.  Similarly, muscarine has been shown to alter \k-current in the soma 
but not in the apical dendrites of PTs \cite{Williams2019-mc}. 
Therefore, based on our simulations, we predict that bath application of XE991 to PT cells will produce 
comparable changes to the dendritic impedance profile as those observed when
blocking the shunting current in \fref{blockIhIlk}."

**** 4. The major deviation of the experimental data from most models (except for #5) 
is that the synchronous frequency is higher and/or the transfer frequency lower. 
Even in Model 5, which provides the best fit, the synchronous frequency is higher 
for many cases in the experimental data. Previous work on this subject has 
suggested how h-current is distributed along the dendrite 
(Vaidya and Johnston, 2013) and the differences in passive intracellular 
resistivity associated with dendritic length (Fletcher and Williams, 2019) 
may also greatly shape dendritic integration. This manuscript would be 
strengthened by informing readers the relative importance of shunting currents 
to these other factors, and how the simulations in this manuscript improve and 
or contradict those previous reports.

***** Thank you for pointing out the relevance of these two studies.  We hope that
we have addressed how our study relates to that work by including the following in 
the Discussion:

Vaidya and Johnston (2013) demonstrated that realistic transfer resonance frequencies and 
synchronous frequencies in hippocampal PCs are best achieved with HCN channel density increasing linearly with 
distance from the soma, as in {\bf model 1}, or distributed following a sigmoid function,
as in {\bf model 5}.  Similarly, we found realistic transfer and synchronous frequencies when HCN and TASK-like channel distributions
are either linear or sigmoidal (\fref{compareHayDura}).
The shape of a sigmoidal distribution (where channel density increases along the apical trunk and 
saturates in the apical tufts \cite{Harnett2015-sj}), as well as passive intracellular
resistivity, are both dependent on dendritic length. Furthermore, 
experimental evidence shows morphological, electrophysiological, and
computational properties of PTs are closely related to anatomical location \cite{Fletcher2019-sm}.
While these morphologically-related factors no doubt influence the properties of dendritic impedance, 
determining their contributions to resonance and synchrony are beyond the scope of this study. 
Here we show two PT models with different morphologies, apical trunk lengths, passive properties,
and intracellular resistivities, \ca\ channel distributions, and distributions of HCN and TASK-like channels
along their apical trunks produced similar dendritic impedance properties. 
This demonstrates how degeneracy of the impedance profiles may emerge.  
Impedance analysis of the apical trunk could not, however, provide any indication as to
whether either of these channel distribution schemes are more likely to exist in real neurons.
In fact, differences in channel distribution and other morphologically-related properties may 
be strong contributors to the experimentally observed variance in impedance properties \cite{Ulrich2002-dd, Dembrow2015-zb}.
Further investigation of the precise contributions of morphology, channel
distribution, and intracellular resistivity to dendritic impedance in PTs is one avenue for our future work.

*** Minor specific comments.
**** 5. In Figure 6C, the y-axis is confusing. It is labelled Peak absolute impedance 
(Megaohms) but the values seem to correspond with resonance strength, possibly 
transfer resonance strength.
***** Thank you for pointing this out.  We apologize for mislabeling the y-axis in Figure 6C
and have fixed the label.
 
**** 6. Line 15, In the abstract Ih is referred to as a conductance. Ih as an 
abbreviation is commonly thought of as referring to current.
***** We have altered this sentence to read: "TASK-like channel density in this model was proportional to local HCN channel density"

**** 7. Line 92, there is no period between sentences.
***** This sentence has been deleted.

**** 8. For the model representations/reconstructions, no distance scale bar is shown 
in Figures 1, 2 and 8. It would be beneficial to understand how distances relate 
to the h-current gradient as well.
***** We have added scale bars to figures with model representations/reconstructions.

**** Refs
Dembrow, N.C., Chitwood, R.A., and Johnston, D. (2010). Projection-Specific Neuromodulation of Medial Prefrontal Cortex Neurons. J. Neurosci. 30, 16922-16937.
Fletcher, L.N., and Williams, S.R. (2019). Neocortical Topology Governs the Dendritic Integrative Capacity of Layer 5 Pyramidal Neurons. Neuron 101, 76-90.e4.
Vaidya, S.P., and Johnston, D. (2013). Temporal synchrony and gamma-to-theta power conversion in the dendrites of CA1 pyramidal neurons. Nat. Neurosci. 16, 1812-1820.
Williams, S.R., and Fletcher, L.N. (2019). A Dendritic Substrate for the Cholinergic Control of Neocortical Output Neurons. Neuron 101, 486-499.e4.

* [2021-2-5 Fri] - back to the simple model 
** effective params: 1e8 H, 1000 MOhm, 2e-4 uf/cm^2
*** achieves resonance and synchronous frequencies similar to real neurons, but 
doesn't affect EPSP timing because impedance phase converges quickly 
*** reduct L to 1e7 H, higher resonance and synchronous frequencies (but nothing crazy), 0.4 ms decrease in EPSP lag 
*** [data/withL_imped_v5.mat][with above params]
** computing impedance w/ sinusoids 
from neuron import h, gui 
h.load_file('models/cellwithL.ses')
import numpy as np 
from matplotlib import pyplot as plt 
from pylab import fft 
from chirpUtils import applyChirp, getChirp
zPhase = []
zAmp = []
amp = 0.01 
t0, Fs, delay = 5, 1000, 1
secs = [sec for sec in h.allsec()] 
for sec in secs:
    sec.g_pas = 2e-4
seg = secs[1](0.5)
soma_seg = secs[0](0.5)
# freqs = [i for i in range(1,1000)]
freqs = [i for i in range(1,40)]
soma_v = h.Vector().record(soma_seg._ref_v) 
dend_v = h.Vector().record(seg._ref_v) 
time = h.Vector().record(h._ref_t)
sampr = 40e3
for f in freqs: 
    f0, f1 = f, f 
    I, t = getChirp(f0,f1,t0,amp,Fs,delay)
    # i = h.Vector().record(h.IClamp[0]._ref_i)
    out = applyChirp(I, t, seg, soma_seg, t0, delay, Fs, f1)
    v_trim = [v for v, T in zip(soma_v, time) if 3000 < T < 5000] 
    i_trim = [i for i, T in zip(I,t) if 3000 < T < 5000] 
    t_trim = [T for i, T in zip(I,t) if 3000 < T < 5000] 
    time_trim = [T for v, T in zip(soma_v, time) if 3000 < T < 5000] 
    current = i_trim
    v = v_trim 
    current = current[int(delay*sampr - 0.5*sampr+1):-int(delay*sampr- 0.5*sampr)] 
    current = np.hstack((np.repeat(current[0],int(delay*sampr)),current, np.repeat(current[-1], int(delay*sampr)))) 
    current = current - np.mean(current) 
    v = v[int(delay*sampr - 0.5*sampr)+1:-int(delay*sampr - 0.5*sampr)] 
    v = np.hstack((np.repeat(v[0],int(delay*sampr)), v, np.repeat(v[-1], int(delay*sampr)))) 
    v = v - np.mean(v) 
    f_current = (fft(current)/len(current))[0:int(len(current)/2)] 
    f_cis = (fft(v)/len(v))[0:int(len(v)/2)] 
    z = f_cis / f_current 
    phase = np.arctan2(np.imag(z), np.real(z))
    Freq       = np.linspace(0.0, sampr/2.0, len(z))
    zamp = abs(z)
    ind = np.argmin(np.square(Freq-f))
    zPhase.append(phase[ind])
    zAmp.append(zamp[ind])

* [2021-2-10 Wed] - updating figures 
** plotting detailed impedance for PT cell 
from scipy.io import loadmat 
from os import listdir 
from matplotlib import pyplot as plt 
import numpy as np 
plt.ion()

files = listdir('./longImped/')
freqs = []
zAmp = []
zPhase = []
for file in files:
    data = loadmat('./longImped/'+file)
    freqs.extend(data['freqs'][0])
    zAmp.extend(data['zAmp'][0])
    zPhase.extend(data['zPhase'][0])

** new synaptic timing figure 
from scipy.io import loadmat 
from pylab import fft 
from matplotlib import pyplot as plt 
plt.ion()

fig, (ax1, ax2) = plt.subplots(1,2)

data = loadmat('detail_noise.mat')
ax1.semilogx(data['Freq'][0], data['ZcPhase'][0], 'r', label='Control')
data = loadmat('detail_noLk_noise.mat')
ax1.semilogx(data['Freq'][0], data['ZcPhase'][0], 'b', label='Block shunting current')
data = loadmat('detail_noIh_noise.mat')
ax1.semilogx(data['Freq'][0], data['ZcPhase'][0], 'g', label=r'Block I$_h$')
ax1.set_xlim(1,300)
ax1.set_ylim(-2.0, 0.3)
ax1.set_ylabel(r'$\Phi_c$ (radians)', fontsize=16)
ax1.set_xlabel('Frequency (Hz)', fontsize=16)
ax1.legend(fontsize=14, loc='lower left')
ax1.tick_params(labelsize=14)
ax1.set_title('Transfer Impedance Phase', fontsize=18)

ax3 = ax1.twinx()
ax3.semilogx(Freq, np.divide(np.abs(f_i), np.max(np.abs(f_i))), 'k--', label='Syn. Current Power Spectrum')
ax3.set_ylabel('Normalized Synaptic Power', fontsize=16)
ax3.legend(fontsize=14, loc='upper right')
ax3.tick_params(labelsize=14)

data = loadmat('data/m1pt_apic1305_syn_traces_v2.mat')
data_zd = loadmat('data/detailed_noih_syn_v2.mat')
data_lk = loadmat('data/detailed_nolk_syn_v2.mat')

time = [t for t in data['time'][0] if 4995 <= t <= 5600]
time_lk = [t for t in data_lk['time'][0] if 4995 <= t <= 5600]
time_zd = [t for t in data_zd['time'][0] if 4995 <= t <= 5600]

soma_v = [v for v, t in zip(data['soma_v'][0], data['time'][0]) if 4995 <= t <= 5600]
dend_v = [v for v, t in zip(data['dend_v'][0], data['time'][0]) if 4995 <= t <= 5600]
soma_v_zd = [v for v, t in zip(data_zd['soma_v'][0], data_zd['time'][0]) if 4995 <= t <= 5600]
dend_v_zd = [v for v, t in zip(data_zd['dend_v'][0], data_zd['time'][0]) if 4995 <= t <= 5600]
soma_v_lk = [v for v, t in zip(data_lk['soma_v'][0], data_lk['time'][0]) if 4995 <= t <= 5600]
dend_v_lk = [v for v, t in zip(data_lk['dend_v'][0], data_lk['time'][0]) if 4995 <= t <= 5600]

time = np.array(time)
soma_v = np.array(soma_v)
dend_v = np.array(dend_v)
soma_v_zd = np.array(soma_v_zd)
dend_v_zd = np.array(dend_v_zd)
soma_v_lk = np.array(soma_v_lk)
dend_v_lk = np.array(dend_v_lk)
time_lk = np.array(time_lk)
time_zd = np.array(time_zd)
ax2.plot(time-5000, soma_v-soma_v[0], 'r', label='Control')
ax2.plot(time_lk-5000, soma_v_lk-soma_v_lk[0], 'b', label=r'Block shunting current')
ax2.plot(time_zd-5000, soma_v_zd-soma_v_zd[0], 'g', label=r'Block I$_{h}$')
ax2.plot([time[np.argmax(soma_v)]-5000, time[np.argmax(soma_v)]-5000], [-0.1, np.max(soma_v)-soma_v[0]], 'r--')
ax2.plot([time_lk[np.argmax(soma_v_lk)]-5000, time_lk[np.argmax(soma_v_lk)]-5000], [-0.1, np.max(soma_v_lk)-soma_v_lk[0]], 'b--')
ax2.plot([time_zd[np.argmax(soma_v_zd)]-5000, time[np.argmax(soma_v_zd)]-5000], [-0.1, np.max(soma_v_zd)-soma_v_zd[0]], 'g--')
ax2.plot([1,1],[0,7],'k--', label='Peak Syn. Current Time')
ax2.legend(fontsize=14)
ax2.set_ylabel(r'$\Delta$ V$_{memb}$ (mV)', fontsize=16)
ax2.set_ylim(0,1.1)
ax2.set_xlim(0,30)
ax2.tick_params(labelsize=14)
ax2.set_xlabel('Time (ms)', fontsize=16)
ax2.set_title('Response to Synaptic Stimulation', fontsize=18)

** new validation figure 
from matplotlib import pyplot as plt 
plt.ion()
from scipy.io import loadmat 
import numpy as np 
from os import listdir 

chirpDet = loadmat('models/DuraBernal/trunk_data2/apic_130.5.mat')
validDet = loadmat('data/detailedValidate.mat')
chirpPas = loadmat('data/noL_chirp.mat.mat')
validPas = loadmat('data/noL_imped_v4.mat')
chirpL = loadmat('data/withL_chirp.mat')
validL = loadmat('data/withL_imped_v4.mat')

fig, big_axes = plt.subplots( figsize=(15.0, 15.0) , nrows=4, ncols=1, sharey=True) 

for row, big_ax in enumerate(big_axes, start=1):
    # Turn off axis lines and ticks of the big subplot 
    # obs alpha is 0 in RGBA string!
    big_ax.tick_params(labelcolor=(1.,1.,1., 0.0), top='off', bottom='off', left='off', right='off')
    # removes the white frame
    big_ax._frameon = False

big_axes[0].set_title('Simple Passive Model', fontsize=18)
big_axes[1].set_title('Simple Model w/ Inductor', fontsize=18)
big_axes[2].set_title('Detailed Model w/ HCN', fontsize=18)
big_axes[3].set_title('Detailed Model w/ HCN', fontsize=18)

ax1 = fig.add_subplot(4,2,1)
ax1.plot(chirpPas['Freq'][0], chirpPas['ZcAmp'][0], label='Chirp', linestyle='-.', color='gray')
ax1.plot(validPas['freqs'][0], validPas['zAmp'][0], label='Validation', color='k')
ax1.set_ylabel(r'|Z$_{c}$| (M$\Omega$)', fontsize=16)

ax2 = fig.add_subplot(4,2,2)
ax2.plot(chirpPas['Freq'][0], chirpPas['ZcPhase'][0], label='Chirp', linestyle='-.', color='gray')
ax2.plot(validPas['freqs'][0], validPas['zPhase'][0], label='Validation', color='k')
ax2.legend(fontsize=14)
ax2.set_ylabel(r'$\Phi_{c}$ (rad)', fontsize=16)

ax3 = fig.add_subplot(4,2,3)
ax3.plot(chirpL['Freq'][0], chirpL['ZcAmp'][0], label='Chirp', linestyle='-.', color='gray')
ax3.plot(validL['freqs'][0], validL['zAmp'][0], label='Validation', color='k')
ax3.set_ylabel(r'|Z$_{c}$| (M$\Omega$)', fontsize=16)

ax4 = fig.add_subplot(4,2,4)
ax4.plot(chirpL['Freq'][0], chirpL['ZcPhase'][0], label='Chirp', linestyle='-.', color='gray')
ax4.plot(validL['freqs'][0], validL['zPhase'][0], label='Validation', color='k')
ax4.set_ylabel(r'$\Phi_{c}$ (rad)', fontsize=16)
ax4.legend(fontsize=14)

ax5 = fig.add_subplot(4,2,5)
ax5.plot(chirpDet['Freq'][0], chirpDet['ZcAmp'][0], label='Chirp', linestyle='-.', color='gray')
ax5.plot(validDet['freqs'][0], validDet['zAmp'][0], label='Validation', color='k')
ax5.set_ylabel(r'|Z$_{c}$| (M$\Omega$)', fontsize=16)
# ax5.set_xlabel('Frequency (Hz)', fontsize=16)

ax6 = fig.add_subplot(4,2,6)
ax6.plot(chirpDet['Freq'][0], chirpDet['ZcPhase'][0], label='Chirp', linestyle='-.', color='gray')
ax6.plot(validDet['freqs'][0], validDet['zPhase'][0], label='Validation', color='k')
ax6.set_ylabel(r'$\Phi_{c}$ (rad)', fontsize=16)
ax6.legend(fontsize=14)
# ax6.set_xlabel('Frequency (Hz)', fontsize=16)

files = listdir('./longImped/')
freqs = []
zAmp = []
zPhase = []
for file in files:
    data = loadmat('./longImped/'+file)
    freqs.extend(data['freqs'][0])
    zAmp.extend(data['zAmp'][0])
    zPhase.extend(data['zPhase'][0])
noisy = loadmat('data/noise_validation.mat')
freqs_sort = np.sort(freqs)      
zAmp_sort = [zAmp[ind] for ind in np.argsort(freqs)]   
zPhase_sort = [zPhase[ind] for ind in np.argsort(freqs)]

ax7 = fig.add_subplot(4,2,7)
ax7.semilogx(noisy['Freq'][0], noisy['ZcAmp'][0], label='Noise', linestyle='-.', color='gray')
ax7.semilogx(freqs_sort, zAmp_sort, label='Validation', color='k')
ax7.set_ylabel(r'|Z$_{c}$| (M$\Omega$)', fontsize=16)
ax7.set_xlabel('Frequency (Hz)', fontsize=16)
ax7.set_xlim(1,500)

ax8 = fig.add_subplot(4,2,8)
ax8.semilogx(noisy['Freq'][0], noisy['ZcPhase'][0], label='Noise', linestyle='-.', color='gray')
ax8.semilogx(freqs_sort, zPhase_sort, label='Validation', color='k')
ax8.set_ylabel(r'$\Phi_{c}$ (rad)', fontsize=16)
ax8.set_xlabel('Frequency (Hz)', fontsize=16)
ax8.set_xlim(1,500)


ax1.set_xlim(0,100)
ax1.set_ylim(200,950)
ax1.set_title('ZAPs', fontsize=16)

ax2.set_xlim(0,100)
ax2.set_ylim(-1.5, 0.05)
ax2.set_title('ZPPs', fontsize=16)

ax3.set_xlim(0,100)
ax3.set_ylim(23.4,24.5)

ax4.set_xlim(0,100)
ax4.set_ylim(0,0.75)

* [2021-2-11 Thu] - updating toy figure
** new toy fig 
from matplotlib import pyplot as plt 
plt.ion()
import numpy as np 
from scipy.io import loadmat 

data = loadmat('data/withL_1e8_imped.mat')
plt.subplot(1,3,1)
plt.semilogx(data['freqs'][0], data['zAmp'][0], color='r', linestyle='-', label='L = 100 MH')
plt.semilogx([data['freqs'][0][np.argmax(data['zAmp'][0])], data['freqs'][0][np.argmax(data['zAmp'][0])]], [0,np.max(data['zAmp'][0])], 'r--')
plt.subplot(1,3,2)
plt.semilogx(data['freqs'][0], data['zPhase'][0], color='r', linestyle='-')
plt.semilogx([6.64, 6.64], [-2,0], 'r--')

data = loadmat('data/withL_1e6_imped.mat')
plt.subplot(1,3,1)
plt.semilogx(data['freqs'][0], data['zAmp'][0], color='b', linestyle='-', label='L = 1 MH')
plt.semilogx([data['freqs'][0][np.argmax(data['zAmp'][0])], data['freqs'][0][np.argmax(data['zAmp'][0])]], [0,np.max(data['zAmp'][0])], 'b--')
plt.subplot(1,3,2)
plt.semilogx(data['freqs'][0], data['zPhase'][0], color='b', linestyle='-')
plt.semilogx([67.1, 67.1], [-2, 0], 'b--')

data = loadmat('data/noL_imped_v4.mat')
plt.subplot(1,3,1)
plt.semilogx(data['freqs'][0], data['zAmp'][0], color='k', linestyle='-', label='Passive Neuron')
plt.subplot(1,3,2)
plt.semilogx(data['freqs'][0], data['zPhase'][0], color='k', linestyle='-')

plt.subplot(1,3,1)
# plt.ylim(0,55)
plt.xlim(1,1000)
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.ylabel('$|Z_{c}|$ (M$\Omega$)', fontsize=16)
plt.title('Impedance Amplitude', fontsize=18)
plt.legend(fontsize=14)
plt.xlabel('Frequency (Hz)', fontsize=16)

plt.subplot(1,3,2)
plt.ylabel(r'$\Phi_{c}$ (rad)', fontsize=16)
plt.xlabel('Frequency (Hz)', fontsize=16)
# plt.yticks([-np.pi/2, 0, np.pi/2], [r'$\frac{-\pi}{2}$', '0', r'$\frac{\pi}{2}$'],fontsize=22)
plt.yticks([-1.8, 0.0, 1.25], ['Lag', 'Sync', 'Lead'], fontsize=16)
plt.xticks(fontsize=14)
plt.plot([0,1000],[0,0], color='k', linestyle=':')
plt.xlim(1,1000)
plt.title('Impedance Phase', fontsize=18)

data_low = loadmat('data/withL_1e6_syn.mat')
data_high = loadmat('data/withL_1e8_syn.mat')
data_zd = loadmat('data/noL_syn_v4.mat')
soma_v = data_low['soma_v'][0]
time = data_low['time'][0]
time_noL = data_zd['time'][0]
soma_v_high = data_high['soma_v'][0]
# i = data['i'][0]
soma_v_noL = data_zd['soma_v'][0]

plt.subplot(1,3,3)
plt.plot(time-time[0], np.divide(soma_v_high-soma_v_high[0],np.max(soma_v_high-soma_v_high[0])), 'r-', label='L = 100 MH')
plt.plot([time[np.argmax(soma_v_high)]-time[0], time[np.argmax(soma_v_high)]-time[0]], [-1,1], 'r--')
plt.plot(time-time[0], soma_v-soma_v[0], 'b-', label='L = 1 MH')
plt.plot([time[np.argmax(soma_v)]-time[0], time[np.argmax(soma_v)]-time[0]], [-1,1], 'b--')
plt.plot(time_noL, soma_v_noL-soma_v_noL[0], color='k', linestyle='-', label='Passive Neuron')
plt.plot([time_noL[np.argmax(soma_v_noL)]-time_noL[0], time_noL[np.argmax(soma_v_noL)]-time_noL[0]], [-1,1], 'k-.')
plt.xlim(0,15)
plt.ylim(-0.85,1.05) 
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.ylabel(r'$\Delta$ V$_{memb}$ (mV)', fontsize=16)
plt.xlabel('Time (ms)', fontsize=16)
plt.title('Response to Synaptic Stimulation', fontsize=18)
# plt.xlim(0,5)
# plt.ylim(0,1.1)
plt.plot([1,1],[-1,1.2], color='k', linestyle=':')